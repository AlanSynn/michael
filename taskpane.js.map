{"version":3,"file":"taskpane.js","mappings":";4QACAA,EAAA,kBAAAC,CAAA,MAAAC,EAAAD,EAAA,GAAAE,EAAAC,OAAAC,UAAAC,EAAAH,EAAAI,eAAAC,EAAAJ,OAAAK,gBAAA,SAAAP,EAAAD,EAAAE,GAAAD,EAAAD,GAAAE,EAAAO,KAAA,EAAAC,EAAA,mBAAAC,OAAAA,OAAA,GAAAC,EAAAF,EAAAG,UAAA,aAAAC,EAAAJ,EAAAK,eAAA,kBAAAC,EAAAN,EAAAO,aAAA,yBAAAC,EAAAjB,EAAAD,EAAAE,GAAA,OAAAC,OAAAK,eAAAP,EAAAD,EAAA,CAAAS,MAAAP,EAAAiB,YAAA,EAAAC,cAAA,EAAAC,UAAA,IAAApB,EAAAD,EAAA,KAAAkB,EAAA,aAAAjB,GAAAiB,EAAA,SAAAjB,EAAAD,EAAAE,GAAA,OAAAD,EAAAD,GAAAE,CAAA,WAAAoB,EAAArB,EAAAD,EAAAE,EAAAG,GAAA,IAAAK,EAAAV,GAAAA,EAAAI,qBAAAmB,EAAAvB,EAAAuB,EAAAX,EAAAT,OAAAqB,OAAAd,EAAAN,WAAAU,EAAA,IAAAW,EAAApB,GAAA,WAAAE,EAAAK,EAAA,WAAAH,MAAAiB,EAAAzB,EAAAC,EAAAY,KAAAF,CAAA,UAAAe,EAAA1B,EAAAD,EAAAE,GAAA,WAAA0B,KAAA,SAAAC,IAAA5B,EAAA6B,KAAA9B,EAAAE,GAAA,OAAAD,GAAA,OAAA2B,KAAA,QAAAC,IAAA5B,EAAA,EAAAD,EAAAsB,KAAAA,EAAA,IAAAS,EAAA,iBAAAC,EAAA,iBAAAC,EAAA,YAAAC,EAAA,YAAAC,EAAA,YAAAZ,IAAA,UAAAa,IAAA,UAAAC,IAAA,KAAAC,EAAA,GAAApB,EAAAoB,EAAA1B,GAAA,8BAAA2B,EAAApC,OAAAqC,eAAAC,EAAAF,GAAAA,EAAAA,EAAAG,EAAA,MAAAD,GAAAA,IAAAvC,GAAAG,EAAAyB,KAAAW,EAAA7B,KAAA0B,EAAAG,GAAA,IAAAE,EAAAN,EAAAjC,UAAAmB,EAAAnB,UAAAD,OAAAqB,OAAAc,GAAA,SAAAM,EAAA3C,GAAA,0BAAA4C,SAAA,SAAA7C,GAAAkB,EAAAjB,EAAAD,GAAA,SAAAC,GAAA,YAAA6C,QAAA9C,EAAAC,EAAA,gBAAA8C,EAAA9C,EAAAD,GAAA,SAAAgD,EAAA9C,EAAAK,EAAAG,EAAAE,GAAA,IAAAE,EAAAa,EAAA1B,EAAAC,GAAAD,EAAAM,GAAA,aAAAO,EAAAc,KAAA,KAAAZ,EAAAF,EAAAe,IAAAE,EAAAf,EAAAP,MAAA,OAAAsB,GAAA,UAAAkB,EAAAlB,IAAA1B,EAAAyB,KAAAC,EAAA,WAAA/B,EAAAkD,QAAAnB,EAAAoB,SAAAC,MAAA,SAAAnD,GAAA+C,EAAA,OAAA/C,EAAAS,EAAAE,EAAA,aAAAX,GAAA+C,EAAA,QAAA/C,EAAAS,EAAAE,EAAA,IAAAZ,EAAAkD,QAAAnB,GAAAqB,MAAA,SAAAnD,GAAAe,EAAAP,MAAAR,EAAAS,EAAAM,EAAA,aAAAf,GAAA,OAAA+C,EAAA,QAAA/C,EAAAS,EAAAE,EAAA,IAAAA,EAAAE,EAAAe,IAAA,KAAA3B,EAAAK,EAAA,gBAAAE,MAAA,SAAAR,EAAAI,GAAA,SAAAgD,IAAA,WAAArD,GAAA,SAAAA,EAAAE,GAAA8C,EAAA/C,EAAAI,EAAAL,EAAAE,EAAA,WAAAA,EAAAA,EAAAA,EAAAkD,KAAAC,EAAAA,GAAAA,GAAA,aAAA3B,EAAA1B,EAAAE,EAAAG,GAAA,IAAAE,EAAAwB,EAAA,gBAAArB,EAAAE,GAAA,GAAAL,IAAA0B,EAAA,MAAAqB,MAAA,mCAAA/C,IAAA2B,EAAA,cAAAxB,EAAA,MAAAE,EAAA,OAAAH,MAAAR,EAAAsD,MAAA,OAAAlD,EAAAmD,OAAA9C,EAAAL,EAAAwB,IAAAjB,IAAA,KAAAE,EAAAT,EAAAoD,SAAA,GAAA3C,EAAA,KAAAE,EAAA0C,EAAA5C,EAAAT,GAAA,GAAAW,EAAA,IAAAA,IAAAmB,EAAA,gBAAAnB,CAAA,cAAAX,EAAAmD,OAAAnD,EAAAsD,KAAAtD,EAAAuD,MAAAvD,EAAAwB,SAAA,aAAAxB,EAAAmD,OAAA,IAAAjD,IAAAwB,EAAA,MAAAxB,EAAA2B,EAAA7B,EAAAwB,IAAAxB,EAAAwD,kBAAAxD,EAAAwB,IAAA,gBAAAxB,EAAAmD,QAAAnD,EAAAyD,OAAA,SAAAzD,EAAAwB,KAAAtB,EAAA0B,EAAA,IAAAK,EAAAX,EAAA3B,EAAAE,EAAAG,GAAA,cAAAiC,EAAAV,KAAA,IAAArB,EAAAF,EAAAkD,KAAArB,EAAAF,EAAAM,EAAAT,MAAAM,EAAA,gBAAA1B,MAAA6B,EAAAT,IAAA0B,KAAAlD,EAAAkD,KAAA,WAAAjB,EAAAV,OAAArB,EAAA2B,EAAA7B,EAAAmD,OAAA,QAAAnD,EAAAwB,IAAAS,EAAAT,IAAA,YAAA6B,EAAA1D,EAAAE,GAAA,IAAAG,EAAAH,EAAAsD,OAAAjD,EAAAP,EAAAa,SAAAR,GAAA,GAAAE,IAAAN,EAAA,OAAAC,EAAAuD,SAAA,eAAApD,GAAAL,EAAAa,SAAAkD,SAAA7D,EAAAsD,OAAA,SAAAtD,EAAA2B,IAAA5B,EAAAyD,EAAA1D,EAAAE,GAAA,UAAAA,EAAAsD,SAAA,WAAAnD,IAAAH,EAAAsD,OAAA,QAAAtD,EAAA2B,IAAA,IAAAmC,UAAA,oCAAA3D,EAAA,aAAA8B,EAAA,IAAAzB,EAAAiB,EAAApB,EAAAP,EAAAa,SAAAX,EAAA2B,KAAA,aAAAnB,EAAAkB,KAAA,OAAA1B,EAAAsD,OAAA,QAAAtD,EAAA2B,IAAAnB,EAAAmB,IAAA3B,EAAAuD,SAAA,KAAAtB,EAAA,IAAAvB,EAAAF,EAAAmB,IAAA,OAAAjB,EAAAA,EAAA2C,MAAArD,EAAAF,EAAAiE,YAAArD,EAAAH,MAAAP,EAAAgE,KAAAlE,EAAAmE,QAAA,WAAAjE,EAAAsD,SAAAtD,EAAAsD,OAAA,OAAAtD,EAAA2B,IAAA5B,GAAAC,EAAAuD,SAAA,KAAAtB,GAAAvB,GAAAV,EAAAsD,OAAA,QAAAtD,EAAA2B,IAAA,IAAAmC,UAAA,oCAAA9D,EAAAuD,SAAA,KAAAtB,EAAA,UAAAiC,EAAAnE,GAAA,IAAAD,EAAA,CAAAqE,OAAApE,EAAA,SAAAA,IAAAD,EAAAsE,SAAArE,EAAA,SAAAA,IAAAD,EAAAuE,WAAAtE,EAAA,GAAAD,EAAAwE,SAAAvE,EAAA,SAAAwE,WAAAC,KAAA1E,EAAA,UAAA2E,EAAA1E,GAAA,IAAAD,EAAAC,EAAA2E,YAAA,GAAA5E,EAAA4B,KAAA,gBAAA5B,EAAA6B,IAAA5B,EAAA2E,WAAA5E,CAAA,UAAAyB,EAAAxB,GAAA,KAAAwE,WAAA,EAAAJ,OAAA,SAAApE,EAAA4C,QAAAuB,EAAA,WAAAS,OAAA,YAAAnC,EAAA1C,GAAA,GAAAA,GAAA,KAAAA,EAAA,KAAAE,EAAAF,EAAAY,GAAA,GAAAV,EAAA,OAAAA,EAAA4B,KAAA9B,GAAA,sBAAAA,EAAAkE,KAAA,OAAAlE,EAAA,IAAA8E,MAAA9E,EAAA+E,QAAA,KAAAxE,GAAA,EAAAG,EAAA,SAAAwD,IAAA,OAAA3D,EAAAP,EAAA+E,QAAA,GAAA1E,EAAAyB,KAAA9B,EAAAO,GAAA,OAAA2D,EAAAzD,MAAAT,EAAAO,GAAA2D,EAAAX,MAAA,EAAAW,EAAA,OAAAA,EAAAzD,MAAAR,EAAAiE,EAAAX,MAAA,EAAAW,CAAA,SAAAxD,EAAAwD,KAAAxD,CAAA,YAAAsD,UAAAf,EAAAjD,GAAA,2BAAAoC,EAAAhC,UAAAiC,EAAA9B,EAAAoC,EAAA,eAAAlC,MAAA4B,EAAAjB,cAAA,IAAAb,EAAA8B,EAAA,eAAA5B,MAAA2B,EAAAhB,cAAA,IAAAgB,EAAA4C,YAAA9D,EAAAmB,EAAArB,EAAA,qBAAAhB,EAAAiF,oBAAA,SAAAhF,GAAA,IAAAD,EAAA,mBAAAC,GAAAA,EAAAiF,YAAA,QAAAlF,IAAAA,IAAAoC,GAAA,uBAAApC,EAAAgF,aAAAhF,EAAAmF,MAAA,EAAAnF,EAAAoF,KAAA,SAAAnF,GAAA,OAAAE,OAAAkF,eAAAlF,OAAAkF,eAAApF,EAAAoC,IAAApC,EAAAqF,UAAAjD,EAAAnB,EAAAjB,EAAAe,EAAA,sBAAAf,EAAAG,UAAAD,OAAAqB,OAAAmB,GAAA1C,CAAA,EAAAD,EAAAuF,MAAA,SAAAtF,GAAA,OAAAkD,QAAAlD,EAAA,EAAA2C,EAAAG,EAAA3C,WAAAc,EAAA6B,EAAA3C,UAAAU,GAAA,0BAAAd,EAAA+C,cAAAA,EAAA/C,EAAAwF,MAAA,SAAAvF,EAAAC,EAAAG,EAAAE,EAAAG,QAAA,IAAAA,IAAAA,EAAA+E,SAAA,IAAA7E,EAAA,IAAAmC,EAAAzB,EAAArB,EAAAC,EAAAG,EAAAE,GAAAG,GAAA,OAAAV,EAAAiF,oBAAA/E,GAAAU,EAAAA,EAAAsD,OAAAd,MAAA,SAAAnD,GAAA,OAAAA,EAAAsD,KAAAtD,EAAAQ,MAAAG,EAAAsD,MAAA,KAAAtB,EAAAD,GAAAzB,EAAAyB,EAAA3B,EAAA,aAAAE,EAAAyB,EAAA/B,GAAA,0BAAAM,EAAAyB,EAAA,qDAAA3C,EAAA0F,KAAA,SAAAzF,GAAA,IAAAD,EAAAG,OAAAF,GAAAC,EAAA,WAAAG,KAAAL,EAAAE,EAAAwE,KAAArE,GAAA,OAAAH,EAAAyF,UAAA,SAAAzB,IAAA,KAAAhE,EAAA6E,QAAA,KAAA9E,EAAAC,EAAA0F,MAAA,GAAA3F,KAAAD,EAAA,OAAAkE,EAAAzD,MAAAR,EAAAiE,EAAAX,MAAA,EAAAW,CAAA,QAAAA,EAAAX,MAAA,EAAAW,CAAA,GAAAlE,EAAA0C,OAAAA,EAAAjB,EAAArB,UAAA,CAAA8E,YAAAzD,EAAAoD,MAAA,SAAA7E,GAAA,QAAA6F,KAAA,OAAA3B,KAAA,OAAAP,KAAA,KAAAC,MAAA3D,EAAA,KAAAsD,MAAA,OAAAE,SAAA,UAAAD,OAAA,YAAA3B,IAAA5B,EAAA,KAAAwE,WAAA5B,QAAA8B,IAAA3E,EAAA,QAAAE,KAAA,WAAAA,EAAA4F,OAAA,IAAAzF,EAAAyB,KAAA,KAAA5B,KAAA4E,OAAA5E,EAAA6F,MAAA,WAAA7F,GAAAD,EAAA,EAAA+F,KAAA,gBAAAzC,MAAA,MAAAtD,EAAA,KAAAwE,WAAA,GAAAG,WAAA,aAAA3E,EAAA2B,KAAA,MAAA3B,EAAA4B,IAAA,YAAAoE,IAAA,EAAApC,kBAAA,SAAA7D,GAAA,QAAAuD,KAAA,MAAAvD,EAAA,IAAAE,EAAA,cAAAgG,EAAA7F,EAAAE,GAAA,OAAAK,EAAAgB,KAAA,QAAAhB,EAAAiB,IAAA7B,EAAAE,EAAAgE,KAAA7D,EAAAE,IAAAL,EAAAsD,OAAA,OAAAtD,EAAA2B,IAAA5B,KAAAM,CAAA,SAAAA,EAAA,KAAAkE,WAAAM,OAAA,EAAAxE,GAAA,IAAAA,EAAA,KAAAG,EAAA,KAAA+D,WAAAlE,GAAAK,EAAAF,EAAAkE,WAAA,YAAAlE,EAAA2D,OAAA,OAAA6B,EAAA,UAAAxF,EAAA2D,QAAA,KAAAwB,KAAA,KAAA/E,EAAAT,EAAAyB,KAAApB,EAAA,YAAAM,EAAAX,EAAAyB,KAAApB,EAAA,iBAAAI,GAAAE,EAAA,SAAA6E,KAAAnF,EAAA4D,SAAA,OAAA4B,EAAAxF,EAAA4D,UAAA,WAAAuB,KAAAnF,EAAA6D,WAAA,OAAA2B,EAAAxF,EAAA6D,WAAA,SAAAzD,GAAA,QAAA+E,KAAAnF,EAAA4D,SAAA,OAAA4B,EAAAxF,EAAA4D,UAAA,YAAAtD,EAAA,MAAAsC,MAAA,kDAAAuC,KAAAnF,EAAA6D,WAAA,OAAA2B,EAAAxF,EAAA6D,WAAA,KAAAT,OAAA,SAAA7D,EAAAD,GAAA,QAAAE,EAAA,KAAAuE,WAAAM,OAAA,EAAA7E,GAAA,IAAAA,EAAA,KAAAK,EAAA,KAAAkE,WAAAvE,GAAA,GAAAK,EAAA8D,QAAA,KAAAwB,MAAAxF,EAAAyB,KAAAvB,EAAA,oBAAAsF,KAAAtF,EAAAgE,WAAA,KAAA7D,EAAAH,EAAA,OAAAG,IAAA,UAAAT,GAAA,aAAAA,IAAAS,EAAA2D,QAAArE,GAAAA,GAAAU,EAAA6D,aAAA7D,EAAA,UAAAE,EAAAF,EAAAA,EAAAkE,WAAA,UAAAhE,EAAAgB,KAAA3B,EAAAW,EAAAiB,IAAA7B,EAAAU,GAAA,KAAA8C,OAAA,YAAAU,KAAAxD,EAAA6D,WAAApC,GAAA,KAAAgE,SAAAvF,EAAA,EAAAuF,SAAA,SAAAlG,EAAAD,GAAA,aAAAC,EAAA2B,KAAA,MAAA3B,EAAA4B,IAAA,gBAAA5B,EAAA2B,MAAA,aAAA3B,EAAA2B,KAAA,KAAAsC,KAAAjE,EAAA4B,IAAA,WAAA5B,EAAA2B,MAAA,KAAAqE,KAAA,KAAApE,IAAA5B,EAAA4B,IAAA,KAAA2B,OAAA,cAAAU,KAAA,kBAAAjE,EAAA2B,MAAA5B,IAAA,KAAAkE,KAAAlE,GAAAmC,CAAA,EAAAiE,OAAA,SAAAnG,GAAA,QAAAD,EAAA,KAAAyE,WAAAM,OAAA,EAAA/E,GAAA,IAAAA,EAAA,KAAAE,EAAA,KAAAuE,WAAAzE,GAAA,GAAAE,EAAAqE,aAAAtE,EAAA,YAAAkG,SAAAjG,EAAA0E,WAAA1E,EAAAsE,UAAAG,EAAAzE,GAAAiC,CAAA,GAAAkE,MAAA,SAAApG,GAAA,QAAAD,EAAA,KAAAyE,WAAAM,OAAA,EAAA/E,GAAA,IAAAA,EAAA,KAAAE,EAAA,KAAAuE,WAAAzE,GAAA,GAAAE,EAAAmE,SAAApE,EAAA,KAAAI,EAAAH,EAAA0E,WAAA,aAAAvE,EAAAuB,KAAA,KAAArB,EAAAF,EAAAwB,IAAA8C,EAAAzE,EAAA,QAAAK,CAAA,QAAA+C,MAAA,0BAAAgD,cAAA,SAAAtG,EAAAE,EAAAG,GAAA,YAAAoD,SAAA,CAAA5C,SAAA6B,EAAA1C,GAAAiE,WAAA/D,EAAAiE,QAAA9D,GAAA,cAAAmD,SAAA,KAAA3B,IAAA5B,GAAAkC,CAAA,GAAAnC,CAAA,UAAAuG,EAAAlG,EAAAJ,EAAAD,EAAAE,EAAAK,EAAAK,EAAAE,GAAA,QAAAJ,EAAAL,EAAAO,GAAAE,GAAAE,EAAAN,EAAAD,KAAA,OAAAJ,GAAA,YAAAL,EAAAK,EAAA,CAAAK,EAAA6C,KAAAtD,EAAAe,GAAAyE,QAAAvC,QAAAlC,GAAAoC,KAAAlD,EAAAK,EAAA,UAAAiG,EAAAnG,GAAA,sBAAAJ,EAAA,KAAAD,EAAAyG,UAAA,WAAAhB,SAAA,SAAAvF,EAAAK,GAAA,IAAAK,EAAAP,EAAAqG,MAAAzG,EAAAD,GAAA,SAAA2G,EAAAtG,GAAAkG,EAAA3F,EAAAV,EAAAK,EAAAoG,EAAAC,EAAA,OAAAvG,EAAA,UAAAuG,EAAAvG,GAAAkG,EAAA3F,EAAAV,EAAAK,EAAAoG,EAAAC,EAAA,QAAAvG,EAAA,CAAAsG,OAAA,OAOA,IAkBME,EACO,0tCAqJb,SAASC,IACP,IAAMC,EAAWC,SAASC,eAAe,qBACV,SAA3BF,EAASG,MAAMC,SACjBJ,EAASG,MAAMC,QAAU,QAEzBC,KAEAL,EAASG,MAAMC,QAAU,MAE7B,CAKA,SAASE,IAEP,IAAMC,EAAaC,aAAaC,QAAQ,UAAY,OAEpD,GAAmB,UAAfF,EACFN,SAASS,KAAKC,aAAa,aAAc,SACzCV,SAASS,KAAKE,UAAUC,OAAO,mBAC1B,GAAmB,SAAfN,EACTN,SAASS,KAAKC,aAAa,aAAc,QACzCV,SAASS,KAAKE,UAAUE,IAAI,mBAG5B,GAAIC,OAAOC,QAAQC,YAAa,CAC9B,IAAMC,EAAsBH,OAAOC,QAAQC,YAAYC,oBAEnDA,IAsBV,SAAqBC,GAEnB,IAAKA,GAA0B,iBAAVA,EACnB,OAAO,EAGT,IAEEA,EAAQA,EAAMC,QAAQ,IAAK,IAC3B,IAAMjI,EAAIkI,SAASF,EAAMG,OAAO,EAAG,GAAI,IACjC1F,EAAIyF,SAASF,EAAMG,OAAO,EAAG,GAAI,IACjCC,EAAIF,SAASF,EAAMG,OAAO,EAAG,GAAI,IAGvC,QAAIvD,MAAM5E,IAAM4E,MAAMnC,IAAMmC,MAAMwD,KAKd,KAAQpI,EAAI,KAAQyC,EAAI,KAAQ2F,EAGhC,GACtB,CAAE,MAAOC,GAEP,OADAC,QAAQD,MAAM,sCAAuCA,IAC9C,CACT,CACF,CAhDYE,CAAYR,IAIdjB,SAASS,KAAKC,aAAa,aAAc,SACzCV,SAASS,KAAKE,UAAUC,OAAO,gBAIjCZ,SAASS,KAAKC,aAAa,aAAc,QACzCV,SAASS,KAAKE,UAAUE,IAAI,cAEhC,CAEJ,CAuCA,SAASa,EAAkBC,GAEN,YADApB,aAAaC,QAAQ,UAAY,WAElDH,GAEJ,CAKA,SAASuB,EAAiBC,GAAwB,IAAfjH,EAAI6E,UAAA1B,OAAA,QAAA+D,IAAArC,UAAA,GAAAA,UAAA,GAAG,OAEpCsC,EAAe/B,SAASC,eAAe,gBACtC8B,KACHA,EAAe/B,SAASgC,cAAc,QACzBC,GAAK,eAClBjC,SAASS,KAAKyB,YAAYH,IAI5BA,EAAaI,UAAY,gBAAHC,OAAmBxH,GACzCmH,EAAaM,YAAcR,EAG3BE,EAAa7B,MAAMC,QAAU,QAG7BmC,YAAW,WACTP,EAAa7B,MAAMC,QAAU,MAC/B,GAAG,IACL,CAKA,SAASoC,IAEP,IAAIC,EAAW,CAAC,EAChB,IACE,IAAMC,EAAgBlC,aAAaC,QAAQ,0BACvCiC,IACFD,EAAWE,KAAKC,MAAMF,GAE1B,CAAE,MAAOlB,GACPC,QAAQD,MAAM,0BAA2BA,EAC3C,CAGA,IAAMqB,EAAS5C,SAASC,eAAe,oBAAoBxG,MACrDoJ,EAAQ7C,SAASC,eAAe,kBAAkBxG,MAClDqJ,EAAW9C,SAASC,eAAe,qBAAqBxG,MACxDsJ,EAAQ/C,SAASC,eAAe,kBAAkBxG,MAClDuJ,EAAWhD,SAASC,eAAe,sBAAsBxG,MACzDwJ,EAAWjD,SAASC,eAAe,sBAAsBxG,MACzDyJ,EAAYlD,SAASC,eAAe,uBAAuBxG,MAC3D0J,EAAanD,SAASC,eAAe,wBAAwBxG,MAC7D2J,EAAoBpD,SAASC,eAAe,+BAA+BxG,MAC3E4J,EAAoBrD,SAASC,eAAe,+BAA+BxG,MAC3E6J,EAA6BtD,SAASC,eAAe,yCAAyCxG,MAGpG+I,EAASI,OAASA,EAClBJ,EAASK,MAAQA,EACjBL,EAASe,gBAAkBT,EAC3BN,EAASO,MAAQA,EACjBP,EAASQ,SAAWA,EACpBR,EAASS,SAAWA,EACpBT,EAASU,UAAYA,EACrBV,EAASW,WAAaA,EAGjBX,EAASgB,YACZhB,EAASgB,UAAY,CAAC,GAGxBhB,EAASgB,UAAUC,UAAYL,EAC/BZ,EAASgB,UAAUE,UAAYL,EAC/Bb,EAASgB,UAAUG,mBAAqBL,EAGxC/C,aAAaqD,QAAQ,yBAA0BlB,KAAKmB,UAAUrB,IAG9DjC,aAAaqD,QAAQ,QAASb,GAC9B1C,IAGAyD,EAAcd,GAGde,EAA0C,SAAdb,GAE5BtB,EAAiB,mCAGjB9B,GACF,CAKA,SAASkE,IACPhE,SAASC,eAAe,+BAA+BxG,MAAQoG,EAC/DG,SAASC,eAAe,+BAA+BxG,MAxT5C,47DA0TPuG,SAASC,eAAe,2CAC1BD,SAASC,eAAe,yCAAyCxG,MA/R/C,4nCAiSpBmI,EAAiB,8BACnB,CAKA,SAASxB,IACP,IACE,IAAMqC,EAAgBlC,aAAaC,QAAQ,0BAE3C,GAAIiC,EAAe,CACjB,IAAMD,EAAWE,KAAKC,MAAMF,GAGxBD,EAASI,SAAQ5C,SAASC,eAAe,oBAAoBxG,MAAQ+I,EAASI,QAC9EJ,EAASK,QAAO7C,SAASC,eAAe,kBAAkBxG,MAAQ+I,EAASK,OAC3EL,EAASe,kBAAiBvD,SAASC,eAAe,qBAAqBxG,MAAQ+I,EAASe,iBACxFf,EAASO,QAAO/C,SAASC,eAAe,kBAAkBxG,MAAQ+I,EAASO,OAC3EP,EAASQ,WAAUhD,SAASC,eAAe,sBAAsBxG,MAAQ+I,EAASQ,UAClFR,EAASS,WAAUjD,SAASC,eAAe,sBAAsBxG,MAAQ+I,EAASS,UAClFT,EAASU,YAAWlD,SAASC,eAAe,uBAAuBxG,MAAQ+I,EAASU,WACpFV,EAASW,aAAYnD,SAASC,eAAe,wBAAwBxG,MAAQ+I,EAASW,YAGtFX,EAASQ,UACXc,EAActB,EAASQ,UAIrBR,EAASU,WACXa,EAAmD,SAAvBvB,EAASU,WAInCV,EAASgB,YACPhB,EAASgB,UAAUC,YACrBzD,SAASC,eAAe,+BAA+BxG,MAAQ+I,EAASgB,UAAUC,WAEhFjB,EAASgB,UAAUE,YACrB1D,SAASC,eAAe,+BAA+BxG,MAAQ+I,EAASgB,UAAUE,WAEhFlB,EAASgB,UAAUG,qBACrB3D,SAASC,eAAe,yCAAyCxG,MAAQ+I,EAASgB,UAAUG,oBAGlG,MAEEK,GAEJ,CAAE,MAAOzC,GACPC,QAAQD,MAAM,mCAAoCA,GAElDyC,GACF,CACF,CAMA,SAASF,EAAcG,GACrBjE,SAASkE,gBAAgBxD,aAAa,iBAAkBuD,GAAQ,SAClE,CAEA,SACeE,IAAe,OAAAC,EAAA1E,MAAC,KAADD,UAAA,CAY9B,SAAA2E,IAFC,OAEDA,EAAA5E,EAAAzG,IAAAqF,MAZA,SAAAiG,IAAA,OAAAtL,IAAAuB,MAAA,SAAAgK,GAAA,cAAAA,EAAAzF,KAAAyF,EAAApH,MAAA,cAAAoH,EAAAxH,OAAA,SACS,IAAI2B,SAAQ,SAACvC,EAASqI,GAC3BzD,OAAOC,QAAQyD,QAAQC,KAAKhE,KAAKiE,SAAS,QAAQ,SAACC,GAC7CA,EAAOC,SAAW9D,OAAO+D,kBAAkBC,UAC7C5I,EAAQyI,EAAOlL,OAEf8K,EAAO,IAAIjI,MAAM,+BAErB,GACF,KAAE,wBAAAgI,EAAAtF,OAAA,GAAAqF,EAAA,MACH3E,MAAA,KAAAD,UAAA,UAGcsF,EAAeC,EAAAC,GAAA,OAAAC,EAAAxF,MAAC,KAADD,UAAA,CAmE9B,SAAAyF,IAFC,OAEDA,EAAA1F,EAAAzG,IAAAqF,MAnEA,SAAA+G,EAA+BC,EAAQxC,GAAM,IAAAyC,EAAAxC,EAAAJ,EAAAD,EAAA8C,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAlG,UAAA,OAAA1G,IAAAuB,MAAA,SAAAsL,GAAA,cAAAA,EAAA/G,KAAA+G,EAAA1I,MAAA,OAIzC,GAFI2F,EAAQ,mBAF+BwC,EAAaM,EAAA5H,OAAA,QAAA+D,IAAA6D,EAAA,GAAAA,EAAA,GAAG,KAKvD9C,EAAQwC,OAER,KACU5C,EAAgBlC,aAAaC,QAAQ,6BAEjCgC,EAAWE,KAAKC,MAAMF,IACfI,QACTA,EAAQL,EAASK,MAG7B,CAAE,MAAOtB,GACLC,QAAQD,MAAM,qCAAsCA,EACxD,CAIyG,OAAvG+D,EAAS,2DAAHlD,OAA8DS,EAAK,yBAAAT,OAAwBQ,GAAMgD,EAAA/G,KAAA,EAAA+G,EAAA1I,KAAA,EAGlF2I,MAAMP,EAAQ,CACjC9I,OAAQ,OACRsJ,QAAS,CACL,eAAgB,oBAEpBrF,KAAMiC,KAAKmB,UAAU,CACjBkC,SAAU,CACN,CACIC,MAAO,CACH,CACIC,KAAMb,MAKtBc,iBAAkB,CACdC,YAAa,GACbC,KAAM,GACNC,KAAM,IACNC,gBAAiB,UAG3B,OAtBY,OAARf,EAAQK,EAAAjJ,KAAAiJ,EAAA1I,KAAG,GAwBEqI,EAASgB,OAAM,QAAxB,GAAJf,EAAII,EAAAjJ,KAEL4I,EAASiB,GAAI,CAAFZ,EAAA1I,KAAA,eACN,IAAIZ,OAAgB,QAAVmJ,EAAAD,EAAKjE,aAAK,IAAAkE,OAAA,EAAVA,EAAY5D,UAAW,4BAA2B,WAGjE2D,EAAKiB,YAAyC,IAA3BjB,EAAKiB,WAAW1I,OAAY,CAAA6H,EAAA1I,KAAA,eAC1C,IAAIZ,MAAM,wBAAuB,QAImB,OAAxDoJ,EAAgBF,EAAKiB,WAAW,GAAGC,QAAQV,MAAM,GAAGC,KAAIL,EAAA9I,OAAA,SACvD4I,GAAa,QAE8B,MAF9BE,EAAA/G,KAAA,GAAA+G,EAAAe,GAAAf,EAAA,SAEpBpE,QAAQD,MAAM,4BAA2BqE,EAAAe,IAASf,EAAAe,GAAA,yBAAAf,EAAA5G,OAAA,GAAAmG,EAAA,mBAGzDD,EAAAxF,MAAA,KAAAD,UAAA,CAiBD,SAASmH,IACP,OAAOrG,aAAaC,QAAQ,iBAC9B,CAmBA,SACeqG,IAAc,OAAAC,EAAApH,MAAC,KAADD,UAAA,CA4C7B,SAAAqH,IAFC,OAEDA,EAAAtH,EAAAzG,IAAAqF,MA5CA,SAAA2I,IAAA,IAAAnE,EAAAoE,EAAAC,EAAAC,EAAAzE,EAAAD,EAAA4C,EAAA,OAAArM,IAAAuB,MAAA,SAAA6M,GAAA,cAAAA,EAAAtI,KAAAsI,EAAAjK,MAAA,OAC4B,GAApB0F,EAASgE,IAEF,CAAFO,EAAAjK,KAAA,QAEiB,OAD1B0E,EAAiB,iDAAkD,SACnE9B,IAA0BqH,EAAArK,OAAA,iBAKQ,OAApCsK,EAAY,wBAAwBD,EAAAtI,KAAA,EAAAsI,EAAAjK,KAAA,EAGPiH,IAAiB,OAAtC6C,EAAYG,EAAAxK,KACZsK,EAAUnG,OAAOC,QAAQyD,QAAQC,KAAKwC,QAGxCC,EAAWrH,EACf,KACQ4C,EAAgBlC,aAAaC,QAAQ,6BAEnCgC,EAAWE,KAAKC,MAAMF,IACfe,WAAahB,EAASgB,UAAUC,YAC3CyD,EAAW1E,EAASgB,UAAUC,UAGpC,CAAE,MAAOlC,GACPC,QAAQD,MAAM,0BAA2BA,EAC3C,CAKqC,OAF/B6D,EAAS8B,EACZ/F,QAAQ,YAAa8F,GACrB9F,QAAQ,YAAa6F,GAAaG,EAAAjK,KAAA,GAEf6H,EAAgBK,EAAQxC,GAAO,QAGrDyE,EAHaF,EAAAxK,MAGQwK,EAAAjK,KAAA,iBAAAiK,EAAAtI,KAAA,GAAAsI,EAAAR,GAAAQ,EAAA,SAErBvF,EAAiB,UAADQ,OAAW+E,EAAAR,GAAM9E,SAAW,SAAS,yBAAAsF,EAAAnI,OAAA,GAAA+H,EAAA,oBAExDrH,MAAA,KAAAD,UAAA,CAgDD,SAAS6H,IAEP,IAAIC,EAAgB,GAGdC,EAAcxH,SAASC,eAAe,gBAAgBwH,UAGtDC,EAAc1H,SAASC,eAAe,kBAAkBwH,UAK9D,GAFgBD,EAAYG,SAAS,aAAeD,EAAYC,SAAS,YAE5D,CAEX,IAAIV,EAAU,GACVxG,EAAO,GAGLmH,EAAe,kCAAkCC,KAAKL,GACxDI,IACFX,EAAUW,EAAa,GAAGE,QAK1BrH,EADsE,SAApET,SAASC,eAAe,0BAA0BC,MAAMC,QACnDuH,EAGHE,EACYJ,EAAYO,MAAM,MACnBhJ,MAAM,GAAGiJ,KAAK,MAAMF,OAE1BN,EAKXD,EAAgB,YAAHnF,OAAe6E,EAAO,QAAA7E,OAAO3B,EAC5C,MAGI8G,EADsE,SAApEvH,SAASC,eAAe,0BAA0BC,MAAMC,QAC1CuH,EAEAF,EAIpBS,UAAUC,UAAUC,UAAUZ,GAAenL,MAAK,WAChD,IAAMgM,EAAapI,SAASC,eAAe,eAC3CmI,EAAW/F,YAAc,UACzBC,YAAW,WACT8F,EAAW/F,YAAc,EAC3B,GAAG,IACL,IAAGhD,OAAM,SAAAgJ,GACP7G,QAAQD,MAAM,wBAAyB8G,GACvCzG,EAAiB,8BAA+B,QAClD,GACF,CAGA,SAAS0G,EAAeC,GACtB,IAAKA,EAAU,MAAO,GAGtB,IAAIvF,EAAW,SACf,IACE,IAAMP,EAAgBlC,aAAaC,QAAQ,0BAC3C,GAAIiC,EAAe,CACjB,IAAMD,EAAWE,KAAKC,MAAMF,GACxBD,EAASQ,WACXA,EAAWR,EAASQ,SAExB,CACF,CAAE,MAAOzB,GACPC,QAAQD,MAAM,2BAA4BA,EAC5C,CAGA,IAAMiH,EAA6B,UAAbxF,EAAuB,OACV,UAAbA,EAAuB,OAAS,OAEhDyF,EAA+B,UAAbzF,EAAuB,MACT,UAAbA,EAAuB,MAAQ,MAElD0F,EAA4B,UAAb1F,EAAuB,OACT,UAAbA,EAAuB,OAAS,OAGhD2F,EAAU,6CAA6CC,KAAKL,GAgDlE,OA7CWA,EAERpH,QAAQ,iBAAiB,SAAS0H,EAAOC,GACxC,OAAIH,EACK,6BAAPvG,OAAoC0G,EAAE,SAE/B,OAAP1G,OAAc0G,EAAE,QAEpB,IAEC3H,QAAQ,kBAAmB,eAC3BA,QAAQ,iBAAkB,eAG1BA,QAAQ,mBAAoB,iDAC5BA,QAAQ,eAAgB,2CACxBA,QAAQ,qBAAsB,iDAC9BA,QAAQ,iBAAkB,2CAG1BA,QAAQ,mBAAoB,uCAC5BA,QAAQ,cAAe,eACvBA,QAAQ,sBAAuB,uCAC/BA,QAAQ,iBAAkB,eAG1BA,QAAQ,eAAgB,yJAGxBA,QAAQ,sBAAuB,gOAAkOuH,EAAe,sBAChRvH,QAAQ,eAAgB,4JAA+JuH,EAAe,kCAGtMvH,QAAQ,cAAe,gGAGvBA,QAAQ,6BAA8B,qHAGtCA,QAAQ,aAAc,6CAA+CqH,EAAgB,kBAAoBC,EAAkB,OAC3HtH,QAAQ,QAAS,QAGjBA,QAAQ,YAAa,yCAA2CqH,EAAgB,kBAAoBC,EAAkB,YAG3H,CAkDA,SAASrB,IAAoC,IAAxBvF,EAAOpC,UAAA1B,OAAA,QAAA+D,IAAArC,UAAA,GAAAA,UAAA,GAAG,aAEzBsJ,EAAmB/I,SAASC,eAAe,qBAC/C,IAAK8I,EAAkB,EACrBA,EAAmB/I,SAASgC,cAAc,QACzBC,GAAK,oBACtB8G,EAAiB5G,UAAY,oBAE7B,IAAM6G,EAAUhJ,SAASgC,cAAc,OACvCgH,EAAQ7G,UAAY,kBAEpB,IAAM8G,EAAcjJ,SAASgC,cAAc,OAC3CiH,EAAYhH,GAAK,kBACjBgH,EAAY9G,UAAY,kBAExB4G,EAAiB7G,YAAY8G,GAC7BD,EAAiB7G,YAAY+G,GAC7BjJ,SAASS,KAAKyB,YAAY6G,EAC5B,CAGA/I,SAASC,eAAe,mBAAmBoC,YAAcR,EAGzDkH,EAAiB7I,MAAMC,QAAU,MACnC,CAKA,SAAS+I,IACP,IAAMH,EAAmB/I,SAASC,eAAe,qBAC7C8I,IACFA,EAAiB7I,MAAMC,QAAU,OAErC,CAGA,SAASkH,EAAYX,GACjB1G,SAASC,eAAe,WAAWC,MAAMC,QAAU,OACnDH,SAASC,eAAe,kBAAkBC,MAAMC,QAAU,OAC1DH,SAASC,eAAe,kBAAkBC,MAAMC,QAAU,QAG1D,IAAI8C,GAAW,EACf,IACE,IAAMR,EAAgBlC,aAAaC,QAAQ,0BAC3C,GAAIiC,EAAe,CACjB,IAAMD,EAAWE,KAAKC,MAAMF,GACxBD,EAASS,WACXA,EAAiC,SAAtBT,EAASS,SAExB,CACF,CAAE,MAAO1B,GACPC,QAAQD,MAAM,mCAAoCA,EACpD,CAGA,IAAIiG,EAuNR,SAAqBd,GAEjB,IACMyC,EAAYzC,EAAQmC,MADR,gCAGlB,GAAIM,GAAaA,EAAU,GACvB,OAAOA,EAAU,GAIrB,IACMC,EAAe1C,EAAQmC,MADR,kCAGrB,GAAIO,GAAgBA,EAAa,GAC7B,OAAOA,EAAa,GAIxB,IAAMC,EAAiB3C,EAAQqB,MAAM,QAAQ,GAC7C,OAAIsB,GAAkBA,EAAetL,OAAS,IACnCsL,EACAA,EACAA,EAAeC,UAAU,EAAG,KAAO,MAIvC5C,EAAQ4C,UAAU,EAAG,KAAO,KACvC,CAlPsBC,CAAY7C,GAG9B1G,SAASC,eAAe,kBAAkBuJ,UAAYlB,EAAe5B,GACrE1G,SAASC,eAAe,gBAAgBuJ,UAAYlB,EAAed,GAG/DvE,GACFjD,SAASC,eAAe,0BAA0BC,MAAMC,QAAU,OAClEH,SAASC,eAAe,kBAAkBuJ,UAAY,2DAEtDxJ,SAASC,eAAe,0BAA0BC,MAAMC,QAAU,QAClEH,SAASC,eAAe,kBAAkBuJ,UAAY,0DAIxD,IACE,IAAM/G,EAAgBlC,aAAaC,QAAQ,0BAC3C,GAAIiC,EAAe,CACjB,IAAMD,EAAWE,KAAKC,MAAMF,GACxBD,EAASQ,UACXc,EAActB,EAASQ,UAGrBR,EAASU,WACXa,EAAmD,SAAvBvB,EAASU,UAEzC,CACF,CAAE,MAAO3B,GACPC,QAAQD,MAAM,4BAA6BA,EAC7C,CAGAvB,SAASC,eAAe,kBAAkBwJ,UAAY,EACtDzJ,SAASC,eAAe,gBAAgBwJ,UAAY,CACxD,CAYA,SAAS1F,EAA4B2F,GACnC,IAAMC,EAAc3J,SAASC,eAAe,yBACxC0J,IACFA,EAAYzJ,MAAMC,QAAUuJ,EAAO,eAAiB,OAExD,CAKA,SAASE,IACP,IAAMC,EAAuB7J,SAASC,eAAe,0BAC/C6J,EAAe9J,SAASC,eAAe,kBAEF,SAAvC4J,EAAqB3J,MAAMC,SAC7B0J,EAAqB3J,MAAMC,QAAU,QACrC2J,EAAaN,UAAY,2DAEzBK,EAAqB3J,MAAMC,QAAU,OACrC2J,EAAaN,UAAY,yDAE7B,CAGA,SAASO,EAAkBC,GAEzB,IAAI/C,EAAU,GACVxG,EAAO,GAGLwJ,EAAeD,EAAUnB,MAAM,2CACrC,GAAIoB,EACFhD,EAAUgD,EAAa,GAAGnC,OAG1BrH,EAAOuJ,EAAU7I,QAAQ,mCAAoC,IAAI2G,WAC5D,CAEL,IAAMoC,EAAQF,EAAUlC,OAAOC,MAAM,MACjCmC,EAAMnM,OAAS,GACjBkJ,EAAUiD,EAAM,GAAGpC,OACnBrH,EAAOyJ,EAAMnL,MAAM,GAAGiJ,KAAK,MAAMF,SAGjCb,EAAU,iBACVxG,EAAOuJ,EAAUlC,OAErB,CAYA,MAAO,CACLqC,KAVoB,4HAAH/H,OAG8B6E,EAAO,kDAAA7E,OAE1B3B,EAAI,0BAMhCwG,QAASA,EACTxG,KAAMA,EACN2J,IAAK,YAAFhI,OAAc6E,EAAO,QAAA7E,OAAO3B,GAEnC,CAEA,SACe4J,IAAa,OAAAC,EAAA5K,MAAC,KAADD,UAAA,CAqE5B,SAAA6K,IAFC,OAEDA,EAAA9K,EAAAzG,IAAAqF,MArEA,SAAAmM,IAAA,IAAA3H,EAAAO,EAAAV,EAAAD,EAAAwE,EAAAC,EAAA7B,EAAAT,EAAA6F,EAAA,OAAAzR,IAAAuB,MAAA,SAAAmQ,GAAA,cAAAA,EAAA5L,KAAA4L,EAAAvN,MAAA,OAC4B,GAApB0F,EAASgE,IAEF,CAAF6D,EAAAvN,KAAA,QAEiB,OAD1B0E,EAAiB,iDAAkD,SACnE9B,IAA0B2K,EAAA3N,OAAA,iBAK5BsK,EAAY,uBAAuBqD,EAAA5L,KAAA,EAI7BsE,EAAa,yBAEjB,KACQV,EAAgBlC,aAAaC,QAAQ,6BAEnCgC,EAAWE,KAAKC,MAAMF,IACfU,aACXA,EAAaX,EAASW,WAG5B,CAAE,MAAO5B,GACPC,QAAQD,MAAM,qCAAsCA,EACtD,CAAC,OAAAkJ,EAAAvN,KAAA,GAE0BiH,IAAiB,QAe9B,OAfR6C,EAAYyD,EAAA9N,KACZsK,EAAUnG,OAAOC,QAAQyD,QAAQC,KAAKwC,QAGtC7B,EAAS,6ZAAHhD,OASD6E,EAAO,YAAA7E,OAEhB4E,GAAYyD,EAAAvN,KAAA,GAEO6H,EAAgBK,EAAQxC,EAAQO,GAAW,QAA1DwB,EAAM8F,EAAA9N,KAGR6N,EAAiBT,EAAkBpF,GAGvC3E,SAASC,eAAe,gBAAgBuJ,UAAYgB,EAAeL,KACnEnK,SAASC,eAAe,kBAAkBuJ,UAAYgB,EAAeL,KAGrEnK,SAASC,eAAe,kBAAkBC,MAAMC,QAAU,QAG1DH,SAASC,eAAe,qBAAqBC,MAAMC,QAAU,eAC7DH,SAASC,eAAe,sBAAsBC,MAAMC,QAAU,OAG9D+I,IAAcuB,EAAAvN,KAAA,iBAAAuN,EAAA5L,KAAA,GAAA4L,EAAA9D,GAAA8D,EAAA,SAEdvB,IACAtH,EAAiB,UAADQ,OAAWqI,EAAA9D,GAAM9E,SAAW,SAAS,yBAAA4I,EAAAzL,OAAA,GAAAuL,EAAA,oBAExD7K,MAAA,KAAAD,UAAA,CAGD,SAASiL,IAEP,IAAMlD,EAAcxH,SAASC,eAAe,gBAAgBwH,UAGtDwC,EAAezC,EAAYqB,MAAM,6BACjC5B,EAAUgD,EAAeA,EAAa,GAAGnC,OAAS,GAGlD6C,EAAYnD,EAAYoD,QAAQ3D,GAAWA,EAAQlJ,OACnD0C,EAAO+G,EAAY8B,UAAUqB,GAAW7C,OAGxC+C,EAAe,YAAHzI,OAAe6E,EAAO,QAAA7E,OAAO3B,GAE/CwH,UAAUC,UAAUC,UAAU0C,GAAczO,MAAK,WAC/C,IAAMgM,EAAapI,SAASC,eAAe,qBAC3CmI,EAAW/F,YAAc,UACzBC,YAAW,WACT8F,EAAW/F,YAAc,EAC3B,GAAG,IACL,IAAGhD,OAAM,SAAAgJ,GACP7G,QAAQD,MAAM,yBAA0B8G,GACxCzG,EAAiB,uBAAwB,QAC3C,GACF,CA6DA,SAASkJ,IACP,IAAMC,EAAkB/K,SAASC,eAAe,oBACV,SAAlC8K,EAAgB7K,MAAMC,QACxB4K,EAAgB7K,MAAMC,QAAU,QAEhC4K,EAAgB7K,MAAMC,QAAU,MAEpC,CAKA,SAAS6K,IACP,IACMpI,EADc5C,SAASC,eAAe,iBACjBxG,MAAMqO,OAE7BlF,GACFrC,aAAaqD,QAAQ,iBAAkBhB,GACvChB,EAAiB,6BAA8B,WAC/C5B,SAASC,eAAe,oBAAoBC,MAAMC,QAAU,QAE5DyB,EAAiB,+BAAgC,QAErD,CAKA,SAASqJ,IACP,IAAMzI,EAAW,CAAC,EAGlBxC,SAASkL,iBAAiB,uCAAuCrP,SAAQ,SAAAsP,GACvE3I,EAAS2I,EAAOlJ,IAAMkJ,EAAO1R,KAC/B,IAGA8G,aAAaqD,QAAQ,yBAA0BlB,KAAKmB,UAAUrB,IAG1DA,EAASO,OACXqI,EAAS5I,EAASO,OAGhBP,EAAS6I,gBACXC,EAAY9I,EAAS6I,gBAGvBzJ,EAAiB,iBAAkB,UACrC,CA2BA,SAAS2J,EAAWC,GAClB,IACE,IAAM/I,EAAgBlC,aAAaC,QAAQ,0BAC3C,GAAIiC,EAEF,OADiBC,KAAKC,MAAMF,GACZ+I,EAEpB,CAAE,MAAOjK,GACPC,QAAQD,MAAM,yBAADa,OAA0BoJ,EAAG,KAAKjK,EACjD,CACA,OAAO,IACT,CAKA,SAAS6J,EAASrI,GAChB,IAAM0I,EAAOzL,SAASkE,gBAER,WAAVnB,EAEE2I,OAAOC,YAAcD,OAAOC,WAAW,gCAAgCC,QACzEH,EAAK/K,aAAa,aAAc,QAEhC+K,EAAK/K,aAAa,aAAc,SAIlC+K,EAAK/K,aAAa,aAAcqC,EAEpC,CAKA,SAASuI,EAAYrH,GACNjE,SAASkE,gBACjBhE,MAAM2L,YAAY,qBAMzB,SAA0B5H,GACxB,OAAQA,GACN,IAAK,QAAS,MAAO,WACrB,IAAK,SAEL,QAAS,MAAO,OADhB,IAAK,QAAS,MAAO,WAGzB,CAb+C6H,CAAiB7H,GAChE,CAjpCAnD,OAAOiL,SAAQ,SAACC,GACVA,EAAKC,OAASnL,OAAOoL,SAASC,UAChCnM,SAASC,eAAe,gBAAgBC,MAAMC,QAAU,OACxDH,SAASC,eAAe,YAAYC,MAAMC,QAAU,OAklCxD,WACE,IACE,IAAMsC,EAAgBlC,aAAaC,QAAQ,0BAC3C,GAAIiC,EAAe,CACjB,IAAMD,EAAWE,KAAKC,MAAMF,GAG5BtJ,OAAOuF,KAAK8D,GAAU3G,SAAQ,SAAA2P,GAC5B,IAAMY,EAAUpM,SAASC,eAAeuL,GACpCY,GAA+B,WAApBA,EAAQC,UACrBD,EAAQ3S,MAAQ+I,EAASgJ,GAE7B,GACF,CACF,CAAE,MAAOjK,GACPC,QAAQD,MAAM,0BAA2BA,EAC3C,CACF,CA7FE+K,GAGe1F,MAGb5G,SAASC,eAAe,oBAAoBC,MAAMC,QAAU,QAC5DyB,EAAiB,iDAAkD,SAKrEwJ,EADmBG,EAAW,UAAY,UAK1CD,EADsBC,EAAW,mBAAqB,UA/gCpDvL,SAASC,eAAe,oBAAoBsM,iBAAiB,QAAS1F,GACtE7G,SAASC,eAAe,mBAAmBsM,iBAAiB,QAASzB,GACrE9K,SAASC,eAAe,kBAAkBsM,iBAAiB,QAASzB,GACpE9K,SAASC,eAAe,gBAAgBsM,iBAAiB,QAASvB,GAClEhL,SAASC,eAAe,iBAAiBsM,iBAAiB,YAAY,SAACC,GACnD,UAAdA,EAAMhB,KACRR,GAEJ,IAGAhL,SAASkL,iBAAiB,uCAAuCrP,SAAQ,SAAAsP,GACvEA,EAAOoB,iBAAiB,SAAUtB,EACpC,IAGAjL,SAASC,eAAe,iBAAiBsM,iBAAiB,SAAS,WACjE,IAAM1C,EAAuB7J,SAASC,eAAe,0BAC/C6J,EAAe9J,SAASC,eAAe,iBAEF,SAAvC4J,EAAqB3J,MAAMC,SAC7B0J,EAAqB3J,MAAMC,QAAU,QACrC2J,EAAa2C,cAAc,oBAAoBpK,YAAc,aAE7DwH,EAAqB3J,MAAMC,QAAU,OACrC2J,EAAa2C,cAAc,oBAAoBpK,YAAc,SAEjE,IAGArC,SAASC,eAAe,sBAAsBsM,iBAAiB,QAASjF,GACxEtH,SAASC,eAAe,qBAAqBsM,iBAAiB,QAAS7B,GAGvE1K,SAASC,eAAe,yBAAyBsM,iBAAiB,QAASlC,GAG3ErK,SAASC,eAAe,0BAA0ByM,QAAUnK,EAC5DvC,SAASC,eAAe,2BAA2ByM,QAAU5M,EAC7DE,SAASC,eAAe,4BAA4ByM,QAAU1I,EAG9D5D,IAGAC,IAGIS,OAAOC,QAAQyD,QAAQmI,iBACzB7L,OAAOC,QAAQyD,QAAQmI,gBACrB7L,OAAO8L,UAAUC,gBACjBnL,GAKJgK,OAAO5L,uBAAyBA,EAGhCE,SAASC,eAAe,kBAAkBsM,iBAAiB,QAAS3C,GAExE","sources":["webpack:///./src/taskpane/taskpane.js?"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n * See LICENSE in the project root for license information.\n */\n\n/* global document, Office */\n\n// Safety settings for Gemini API\nconst safetySettings = [{\n  category: \"HARM_CATEGORY_HARASSMENT\",\n  threshold: \"BLOCK_NONE\"\n},\n{\n  category: \"HARM_CATEGORY_HATE_SPEECH\",\n  threshold: \"BLOCK_NONE\"\n},\n{\n  category: \"HARM_CATEGORY_SEXUALLY_EXPLICIT\",\n  threshold: \"BLOCK_NONE\"\n},\n{\n  category: \"HARM_CATEGORY_DANGEROUS_CONTENT\",\n  threshold: \"BLOCK_NONE\"\n}];\n\n// Default templates\nconst DEFAULT_TEMPLATES = {\n  summarize: `You are an expert researcher. Your task is to carefully review the provided research document and perform the following tasks:\n\n1. Summarize the Research Background:\nProvide a concise yet comprehensive summary of the research background, highlighting the context and motivation behind the study.\n\n2. Extract the Problem Statement:\nIdentify and articulate the central problem or challenge addressed by the research in clear and precise terms.\n\n3. Identify Strengths:\nList between three and five key strengths of the study. Focus on aspects such as methodology, innovation, robustness of results, or any other notable positive attributes.\n\n4. Identify Weaknesses:\nEnumerate between four and five significant weaknesses or limitations present in the research. Consider issues like methodological gaps, limited scope, or any areas lacking clarity.\n\n5. Propose Research Topics:\nBased on the weaknesses identified, suggest three potential research topics that could address these limitations or explore related areas further.\n\nEnsure your response is thorough and balanced, with academical depth and varied sentence structures that reflect both detailed insight and succinct clarity.\n\nSubject: {subject}\n\nContent:\n{content}`,\n  translate: `You are an expert translator and interpreter with extensive proficiency in various languages, specializing in translating texts into polished, academic Korean. Your task is to translate the provided text from the source language into Korean, ensuring that every nuance, stylistic detail, and analytical aspect is accurately and naturally conveyed. Please follow these guidelines:\n\nPreserve Nuance and Style:\n- Accurately reflect the original text's tone, emotional nuance, and stylistic characteristics in Korean.\n- Adapt idiomatic expressions, metaphors, and culturally specific references to ensure they resonate with Korean readers.\n\nMaintain Analytical Precision:\n- Carefully dissect complex sentences and ideas, ensuring that your translation maintains the original text's logical flow and depth of analysis.\n- Where necessary, integrate brief annotations or contextual clarifications to help convey any cultural or conceptual subtleties.\n\nEnsure Accuracy and Consistency:\n- Translate specialized vocabulary, technical terms, and academic language with precision and maintain consistency throughout the text.\n- Verify that the structure and argumentative progression of the source material are preserved in the Korean version.\n\nUphold Contextual Integrity:\n- Ensure that the overall message and intent of the original text are fully maintained in your translation.\n- Make sure that transitions between ideas and sections remain coherent and logically connected in Korean.\n\nReview and Refine:\n- Reassess your translation for any potential ambiguities or loss of nuance, refining as necessary to enhance clarity and precision.\n- Strive for a balanced outcome that honors the original text while ensuring the translation is engaging and accessible to a Korean audience.\n\nDeliver your final translation in refined, academic Korean that faithfully embodies the original text's analytical and stylistic essence.\n\nSubject: {subject}\n\nContent:\n{content}`,\n  translateSummarize: `You are an expert translator and summarizer with extensive proficiency in various languages, specializing in translating texts into polished, academic Korean. Your task is to translate the provided text from the source language into Korean AND create a concise summary of the main points. Please follow these guidelines:\n\nTranslation Aspects:\n- Accurately reflect the original text's tone, emotional nuance, and stylistic characteristics in Korean.\n- Adapt idiomatic expressions, metaphors, and culturally specific references to ensure they resonate with Korean readers.\n- Maintain analytical precision and logical flow in the Korean translation.\n\nSummarization Requirements:\n- Create a concise and focused summary of the key points in Korean.\n- Prioritize clarity and brevity while maintaining the essential meaning.\n- Ensure the summary captures the main ideas, arguments, and conclusions.\n- Limit the summary to approximately 30-40% of the original length.\n\nFinal Delivery Format:\n1. First provide a concise summary section (제목: 요약)\n2. Then provide the full translation (제목: 전체 번역)\n\nSubject: {subject}\n\nContent:\n{content}`\n};\n\nOffice.onReady((info) => {\n  if (info.host === Office.HostType.Outlook) {\n    document.getElementById(\"sideload-msg\").style.display = \"none\";\n    document.getElementById(\"app-body\").style.display = \"flex\";\n\n    // Initialize the application\n    initializeApp();\n\n    // Add event listeners for the application buttons\n    document.getElementById(\"summarize-button\").addEventListener(\"click\", summarizeEmail);\n    document.getElementById(\"settings-button\").addEventListener(\"click\", toggleSettings);\n    document.getElementById(\"close-settings\").addEventListener(\"click\", toggleSettings);\n    document.getElementById(\"save-api-key\").addEventListener(\"click\", saveApiKey);\n    document.getElementById(\"api-key-input\").addEventListener(\"keypress\", (event) => {\n      if (event.key === \"Enter\") {\n        saveApiKey();\n      }\n    });\n\n    // Settings selection change listeners\n    document.querySelectorAll(\".settings-dropdown-container select\").forEach(select => {\n      select.addEventListener(\"change\", saveSettings);\n    });\n\n    // Expand button listener\n    document.getElementById(\"expand-button\").addEventListener(\"click\", () => {\n      const fullContentContainer = document.getElementById(\"full-content-container\");\n      const expandButton = document.getElementById(\"expand-button\");\n\n      if (fullContentContainer.style.display === \"none\") {\n        fullContentContainer.style.display = \"block\";\n        expandButton.querySelector(\".ms-Button-label\").textContent = \"Collapse\";\n      } else {\n        fullContentContainer.style.display = \"none\";\n        expandButton.querySelector(\".ms-Button-label\").textContent = \"Expand\";\n      }\n    });\n\n    // Copy buttons listeners\n    document.getElementById(\"copy-result-button\").addEventListener(\"click\", copyResult);\n    document.getElementById(\"copy-reply-button\").addEventListener(\"click\", copyReply);\n\n    // Generate reply button listener\n    document.getElementById(\"generate-reply-button\").addEventListener(\"click\", generateReply);\n\n    // Initialize dropdown settings events\n    document.getElementById(\"dropdown-save-settings\").onclick = saveDropdownSettings;\n    document.getElementById(\"dropdown-close-settings\").onclick = toggleSettingsDropdown;\n    document.getElementById(\"dropdown-reset-templates\").onclick = resetTemplates;\n\n    // Load saved settings if any\n    loadDropdownSettings();\n\n    // Apply current theme\n    applyCurrentTheme();\n\n    // Register for theme change events\n    if (Office.context.mailbox.addHandlerAsync) {\n      Office.context.mailbox.addHandlerAsync(\n        Office.EventType.SettingsChanged,\n        onSettingsChanged\n      );\n    }\n\n    // Add function to window object so it can be called from onclick\n    window.toggleSettingsDropdown = toggleSettingsDropdown;\n\n    // TLDR expand button listener\n    document.getElementById(\"expand-content\").addEventListener(\"click\", expandContent);\n  }\n});\n\n/**\n * Toggle the visibility of the settings dropdown\n */\nfunction toggleSettingsDropdown() {\n  const dropdown = document.getElementById(\"settings-dropdown\");\n  if (dropdown.style.display === \"none\") {\n    dropdown.style.display = \"block\";\n    // Load latest settings when opening\n    loadDropdownSettings();\n  } else {\n    dropdown.style.display = \"none\";\n  }\n}\n\n/**\n * Apply the current theme based on user preference or Office theme\n */\nfunction applyCurrentTheme() {\n  // Default to dark theme instead of system\n  const savedTheme = localStorage.getItem('theme') || 'dark';\n\n  if (savedTheme === 'light') {\n    document.body.setAttribute('data-theme', 'light');\n    document.body.classList.remove('dark-theme');\n  } else if (savedTheme === 'dark') {\n    document.body.setAttribute('data-theme', 'dark');\n    document.body.classList.add('dark-theme');\n  } else {\n    // Use Office theme\n    if (Office.context.officeTheme) {\n      const bodyBackgroundColor = Office.context.officeTheme.bodyBackgroundColor;\n      // Only call isDarkTheme if bodyBackgroundColor exists\n      if (bodyBackgroundColor) {\n        if (isDarkTheme(bodyBackgroundColor)) {\n          document.body.setAttribute('data-theme', 'dark');\n          document.body.classList.add('dark-theme');\n        } else {\n          document.body.setAttribute('data-theme', 'light');\n          document.body.classList.remove('dark-theme');\n        }\n      } else {\n        // Default to dark theme if no color information\n        document.body.setAttribute('data-theme', 'dark');\n        document.body.classList.add('dark-theme');\n      }\n    }\n  }\n}\n\n/**\n * Determine if a color is dark by converting it to RGB and calculating perceived brightness\n * @param {string} color - Hex color code\n * @returns {boolean} - True if the color is dark\n */\nfunction isDarkTheme(color) {\n  // If color is undefined or not a string, default to light theme\n  if (!color || typeof color !== 'string') {\n    return false;\n  }\n\n  try {\n    // Convert hex to RGB\n    color = color.replace('#', '');\n    const r = parseInt(color.substr(0, 2), 16);\n    const g = parseInt(color.substr(2, 2), 16);\n    const b = parseInt(color.substr(4, 2), 16);\n\n    // Check if we got valid RGB values\n    if (isNaN(r) || isNaN(g) || isNaN(b)) {\n      return false;\n    }\n\n    // Calculate perceived brightness using the formula: (0.299*R + 0.587*G + 0.114*B)\n    const brightness = (0.299 * r + 0.587 * g + 0.114 * b);\n\n    // If brightness is less than 128, consider it dark\n    return brightness < 128;\n  } catch (error) {\n    console.error(\"Error calculating theme brightness:\", error);\n    return false;\n  }\n}\n\n/**\n * Handle Office theme change event\n */\nfunction onSettingsChanged(eventArgs) {\n  const savedTheme = localStorage.getItem('theme') || 'system';\n  if (savedTheme === 'system') {\n    applyCurrentTheme();\n  }\n}\n\n/**\n * Show notification message\n */\nfunction showNotification(message, type = \"info\") {\n  // Create notification element if it doesn't exist\n  let notification = document.getElementById(\"notification\");\n  if (!notification) {\n    notification = document.createElement(\"div\");\n    notification.id = \"notification\";\n    document.body.appendChild(notification);\n  }\n\n  // Set type class\n  notification.className = `notification ${type}`;\n  notification.textContent = message;\n\n  // Show notification\n  notification.style.display = \"block\";\n\n  // Hide after delay\n  setTimeout(() => {\n    notification.style.display = \"none\";\n  }, 3000);\n}\n\n/**\n * Save settings from the dropdown menu\n */\nfunction saveDropdownSettings() {\n  // Get existing settings\n  let settings = {};\n  try {\n    const savedSettings = localStorage.getItem('readmedarling_settings');\n    if (savedSettings) {\n      settings = JSON.parse(savedSettings);\n    }\n  } catch (error) {\n    console.error('Error parsing settings:', error);\n  }\n\n  // Update with values from dropdown form\n  const apiKey = document.getElementById('dropdown-api-key').value;\n  const model = document.getElementById('dropdown-model').value;\n  const language = document.getElementById('dropdown-language').value;\n  const theme = document.getElementById('dropdown-theme').value;\n  const fontSize = document.getElementById('dropdown-font-size').value;\n  const tldrMode = document.getElementById('dropdown-tldr-mode').value;\n  const showReply = document.getElementById('dropdown-show-reply').value;\n  const replyModel = document.getElementById('dropdown-reply-model').value;\n  const summarizeTemplate = document.getElementById('dropdown-summarize-template').value;\n  const translateTemplate = document.getElementById('dropdown-translate-template').value;\n  const translateSummarizeTemplate = document.getElementById('dropdown-translate-summarize-template').value;\n\n  // Update settings object\n  settings.apiKey = apiKey;\n  settings.model = model;\n  settings.defaultLanguage = language;\n  settings.theme = theme;\n  settings.fontSize = fontSize;\n  settings.tldrMode = tldrMode;\n  settings.showReply = showReply;\n  settings.replyModel = replyModel;\n\n  // Make sure templates object exists\n  if (!settings.templates) {\n    settings.templates = {};\n  }\n\n  settings.templates.summarize = summarizeTemplate;\n  settings.templates.translate = translateTemplate;\n  settings.templates.translateSummarize = translateSummarizeTemplate;\n\n  // Save settings\n  localStorage.setItem('readmedarling_settings', JSON.stringify(settings));\n\n  // Apply theme if changed\n  localStorage.setItem('theme', theme);\n  applyCurrentTheme();\n\n  // Apply font size\n  applyFontSize(fontSize);\n\n  // Update UI for reply button\n  updateReplyButtonVisibility(showReply === 'true');\n\n  showNotification('All settings saved successfully');\n\n  // Close the dropdown\n  toggleSettingsDropdown();\n}\n\n/**\n * Reset template fields to defaults\n */\nfunction resetTemplates() {\n  document.getElementById('dropdown-summarize-template').value = DEFAULT_TEMPLATES.summarize;\n  document.getElementById('dropdown-translate-template').value = DEFAULT_TEMPLATES.translate;\n  // Add the new translateSummarize template to the reset function\n  if (document.getElementById('dropdown-translate-summarize-template')) {\n    document.getElementById('dropdown-translate-summarize-template').value = DEFAULT_TEMPLATES.translateSummarize;\n  }\n  showNotification('Templates reset to defaults');\n}\n\n/**\n * Load saved settings to the dropdown form fields\n */\nfunction loadDropdownSettings() {\n  try {\n    const savedSettings = localStorage.getItem('readmedarling_settings');\n\n    if (savedSettings) {\n      const settings = JSON.parse(savedSettings);\n\n      // Set form values\n      if (settings.apiKey) document.getElementById('dropdown-api-key').value = settings.apiKey;\n      if (settings.model) document.getElementById('dropdown-model').value = settings.model;\n      if (settings.defaultLanguage) document.getElementById('dropdown-language').value = settings.defaultLanguage;\n      if (settings.theme) document.getElementById('dropdown-theme').value = settings.theme;\n      if (settings.fontSize) document.getElementById('dropdown-font-size').value = settings.fontSize;\n      if (settings.tldrMode) document.getElementById('dropdown-tldr-mode').value = settings.tldrMode;\n      if (settings.showReply) document.getElementById('dropdown-show-reply').value = settings.showReply;\n      if (settings.replyModel) document.getElementById('dropdown-reply-model').value = settings.replyModel;\n\n      // Apply font size if saved\n      if (settings.fontSize) {\n        applyFontSize(settings.fontSize);\n      }\n\n      // Update reply button visibility\n      if (settings.showReply) {\n        updateReplyButtonVisibility(settings.showReply === 'true');\n      }\n\n      // Set templates\n      if (settings.templates) {\n        if (settings.templates.summarize) {\n          document.getElementById('dropdown-summarize-template').value = settings.templates.summarize;\n        }\n        if (settings.templates.translate) {\n          document.getElementById('dropdown-translate-template').value = settings.templates.translate;\n        }\n        if (settings.templates.translateSummarize) {\n          document.getElementById('dropdown-translate-summarize-template').value = settings.templates.translateSummarize;\n        }\n      }\n    } else {\n      // No settings found, load default templates\n      resetTemplates();\n    }\n  } catch (error) {\n    console.error('Error loading dropdown settings:', error);\n    // If there's an error, reset to defaults\n    resetTemplates();\n  }\n}\n\n/**\n * Apply the selected font size to result content\n * @param {string} size - The font size to apply (small, medium, large)\n */\nfunction applyFontSize(size) {\n  document.documentElement.setAttribute('data-font-size', size || 'medium');\n}\n\n// Get email content\nasync function getEmailContent() {\n  return new Promise((resolve, reject) => {\n    Office.context.mailbox.item.body.getAsync(\"text\", (result) => {\n      if (result.status === Office.AsyncResultStatus.Succeeded) {\n        resolve(result.value);\n      } else {\n        reject(new Error(\"Failed to get email content\"));\n      }\n    });\n  });\n}\n\n// Generate content using Gemini API\nasync function generateContent(prompt, apiKey, modelOverride = null) {\n    // Get model from settings or use default\n    let model = \"gemini-1.5-flash\"; // Default model\n\n    if (modelOverride) {\n        model = modelOverride;\n    } else {\n        try {\n            const savedSettings = localStorage.getItem('readmedarling_settings');\n            if (savedSettings) {\n                const settings = JSON.parse(savedSettings);\n                if (settings.model) {\n                    model = settings.model;\n                }\n            }\n        } catch (error) {\n            console.error(\"Error getting model from settings:\", error);\n        }\n    }\n\n    // API URL with selected model\n    const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/${model}:generateContent?key=${apiKey}`;\n\n    try {\n        const response = await fetch(apiUrl, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n                contents: [\n                    {\n                        parts: [\n                            {\n                                text: prompt\n                            }\n                        ]\n                    }\n                ],\n                generationConfig: {\n                    temperature: 0.4,\n                    topK: 32,\n                    topP: 0.95,\n                    maxOutputTokens: 8192,\n                }\n            })\n        });\n\n        const data = await response.json();\n\n        if (!response.ok) {\n            throw new Error(data.error?.message || 'Error generating content');\n        }\n\n        if (!data.candidates || data.candidates.length === 0) {\n            throw new Error('No content generated');\n        }\n\n        // Extract the generated text\n        const generatedText = data.candidates[0].content.parts[0].text;\n        return generatedText;\n    } catch (error) {\n        console.error('Error generating content:', error);\n        throw error;\n    }\n}\n\n// Get language display text\nfunction getLanguageText(languageCode) {\n  switch (languageCode) {\n    case \"es\": return \"Spanish\";\n    case \"fr\": return \"French\";\n    case \"de\": return \"German\";\n    case \"it\": return \"Italian\";\n    case \"ja\": return \"Japanese\";\n    case \"ko\": return \"Korean\";\n    case \"zh_cn\": return \"Chinese\";\n    default: return \"English\";\n  }\n}\n\n// Get API key from settings\nfunction getApiKey() {\n  return localStorage.getItem(\"gemini_api_key\");\n}\n\n// Get language from settings\nfunction getLanguage() {\n  try {\n    const savedSettings = localStorage.getItem('readmedarling_settings');\n    if (savedSettings) {\n      const settings = JSON.parse(savedSettings);\n      if (settings.defaultLanguage) {\n        return settings.defaultLanguage;\n      }\n    }\n    return 'ko'; // Default to Korean\n  } catch (error) {\n    console.error('Error getting language:', error);\n    return 'ko';\n  }\n}\n\n// Summarize email\nasync function summarizeEmail() {\n  const apiKey = getApiKey();\n\n  if (!apiKey) {\n    showNotification(\"Please add your Gemini API key in the settings\", 'error');\n    toggleSettingsDropdown(); // Open settings dropdown to prompt for API key\n    return;\n  }\n\n  // Show loading UI\n  showLoading(\"Summarizing email...\");\n\n  try {\n    const emailContent = await getEmailContent();\n    const subject = Office.context.mailbox.item.subject;\n\n    // Get template from storage or use default\n    let template = DEFAULT_TEMPLATES.summarize;\n    try {\n      const savedSettings = localStorage.getItem('readmedarling_settings');\n      if (savedSettings) {\n        const settings = JSON.parse(savedSettings);\n        if (settings.templates && settings.templates.summarize) {\n          template = settings.templates.summarize;\n        }\n      }\n    } catch (error) {\n      console.error(\"Error getting template:\", error);\n    }\n\n    // Replace placeholders in template\n    const prompt = template\n      .replace('{subject}', subject)\n      .replace('{content}', emailContent);\n\n    const summary = await generateContent(prompt, apiKey);\n\n    // Display result with markdown rendering\n    showResults(summary);\n  } catch (error) {\n    showNotification(`Error: ${error.message}`, 'error');\n  }\n}\n\n// Translate email\nasync function translateEmail() {\n  const apiKey = getApiKey();\n\n  if (!apiKey) {\n    showNotification(\"Please add your Gemini API key in the settings\", 'error');\n    toggleSettingsDropdown(); // Open settings dropdown to prompt for API key\n    return;\n  }\n\n  // Show loading UI\n  showLoading(\"Translating to Korean...\");\n\n  try {\n    const emailContent = await getEmailContent();\n    const subject = Office.context.mailbox.item.subject;\n\n    // Get template from storage or use default\n    let template = DEFAULT_TEMPLATES.translate;\n    try {\n      const savedSettings = localStorage.getItem('readmedarling_settings');\n      if (savedSettings) {\n        const settings = JSON.parse(savedSettings);\n        if (settings.templates && settings.templates.translate) {\n          template = settings.templates.translate;\n        }\n      }\n    } catch (error) {\n      console.error(\"Error getting template:\", error);\n    }\n\n    // Replace placeholders in template\n    const prompt = template\n      .replace('{subject}', subject)\n      .replace('{content}', emailContent);\n\n    const translation = await generateContent(prompt, apiKey);\n\n    // Display result with markdown rendering\n    showResults(translation);\n  } catch (error) {\n    showNotification(`Error: ${error.message}`, 'error');\n  }\n}\n\n// Copy result to clipboard\nfunction copyResult() {\n  // Check if this is a reply (both TLDR and full content need to be combined)\n  let resultContent = \"\";\n\n  // Get the TLDR content (might contain the subject)\n  const tldrContent = document.getElementById(\"tldr-content\").innerText;\n\n  // Get the full content (might contain the body)\n  const fullContent = document.getElementById(\"result-content\").innerText;\n\n  // Check if this is a reply format\n  const isReply = tldrContent.includes(\"Subject:\") || fullContent.includes(\"Subject:\");\n\n  if (isReply) {\n    // If it's a reply, try to extract and format subject and body properly\n    let subject = \"\";\n    let body = \"\";\n\n    // Try to get subject from headings\n    const headingMatch = /^(?:Subject:\\s*)?(.+?)(?:\\n|$)/i.exec(tldrContent);\n    if (headingMatch) {\n      subject = headingMatch[1].trim();\n    }\n\n    // Get the body text (prioritize full content if visible, otherwise use TLDR minus subject)\n    if (document.getElementById(\"full-content-container\").style.display !== \"none\") {\n      body = fullContent;\n    } else {\n      // Attempt to remove subject line from TLDR if present\n      if (headingMatch) {\n        const lines = tldrContent.split(\"\\n\");\n        body = lines.slice(1).join(\"\\n\").trim();\n      } else {\n        body = tldrContent;\n      }\n    }\n\n    // Format as email reply\n    resultContent = `Subject: ${subject}\\n\\n${body}`;\n  } else {\n    // For normal content, get what's visible (either TLDR or full content)\n    if (document.getElementById(\"full-content-container\").style.display !== \"none\") {\n      resultContent = fullContent;\n    } else {\n      resultContent = tldrContent;\n    }\n  }\n\n  navigator.clipboard.writeText(resultContent).then(() => {\n    const copyStatus = document.getElementById(\"copy-status\");\n    copyStatus.textContent = \"Copied!\";\n    setTimeout(() => {\n      copyStatus.textContent = \"\";\n    }, 2000);\n  }).catch(err => {\n    console.error('Could not copy text: ', err);\n    showNotification(\"Failed to copy to clipboard\", \"error\");\n  });\n}\n\n// Convert markdown to HTML for rendering\nfunction markdownToHtml(markdown) {\n  if (!markdown) return '';\n\n  // Get the current font size from settings\n  let fontSize = 'medium';\n  try {\n    const savedSettings = localStorage.getItem('readmedarling_settings');\n    if (savedSettings) {\n      const settings = JSON.parse(savedSettings);\n      if (settings.fontSize) {\n        fontSize = settings.fontSize;\n      }\n    }\n  } catch (error) {\n    console.error('Error getting font size:', error);\n  }\n\n  // Get font size values\n  const fontSizeValue = fontSize === 'small' ? '13px' :\n                        fontSize === 'large' ? '18px' : '16px';\n\n  const lineHeightValue = fontSize === 'small' ? '1.5' :\n                           fontSize === 'large' ? '1.7' : '1.6';\n\n  const codeFontSize = fontSize === 'small' ? '13px' :\n                        fontSize === 'large' ? '17px' : '15px';\n\n  // Check if this is a reply format (starts with # Re: or similar)\n  const isReply = /^#\\s+(?:Re:|Subject:|\\[Reply\\]|Response:)/i.test(markdown);\n\n  // Simple markdown to HTML conversion\n  let html = markdown\n    // Handle reply format headings specially\n    .replace(/^#\\s+(.*$)/gim, function(match, p1) {\n      if (isReply) {\n        return `<h1 class=\"reply-heading\">${p1}</h1>`;\n      } else {\n        return `<h1>${p1}</h1>`;\n      }\n    })\n    // Other headings\n    .replace(/^###\\s+(.*$)/gim, '<h3>$1</h3>')\n    .replace(/^##\\s+(.*$)/gim, '<h2>$1</h2>')\n\n    // Convert bold and italic with stronger styling\n    .replace(/\\*\\*(.*?)\\*\\*/gim, '<strong style=\"font-weight: 700;\">$1</strong>')\n    .replace(/\\*(.*?)\\*/gim, '<em style=\"font-style: italic;\">$1</em>')\n    .replace(/\\_\\_([^_]+)\\_\\_/gim, '<strong style=\"font-weight: 700;\">$1</strong>')\n    .replace(/\\_([^_]+)\\_/gim, '<em style=\"font-style: italic;\">$1</em>')\n\n    // Convert lists - updated to remove indentation\n    .replace(/^\\s*\\n\\* (.*)/gim, '<ul class=\"no-indent\">\\n<li>$1</li>')\n    .replace(/^\\* (.*)/gim, '<li>$1</li>')\n    .replace(/^\\s*\\n\\d+\\. (.*)/gim, '<ol class=\"no-indent\">\\n<li>$1</li>')\n    .replace(/^\\d+\\. (.*)/gim, '<li>$1</li>')\n\n    // Convert blockquotes with improved styling\n    .replace(/^\\> (.*$)/gim, '<blockquote style=\"border-left: 4px solid var(--accent-color); padding-left: 1em; margin: 1em 0; background-color: rgba(0,0,0,0.03);\">$1</blockquote>')\n\n    // Convert code blocks with improved visibility\n    .replace(/```([\\s\\S]*?)```/gim, '<pre style=\"background-color: var(--code-background); padding: 12px; border-radius: 5px; overflow-x: auto; border: 1px solid var(--border-color);\"><code style=\"font-family: \\'Courier New\\', Courier, monospace; font-size: ' + codeFontSize + ';\">$1</code></pre>')\n    .replace(/`([^`]+)`/gim, '<code style=\"background-color: var(--code-background); padding: 3px 5px; border-radius: 3px; font-family: \\'Courier New\\', Courier, monospace; font-size: ' + codeFontSize + '; font-weight: 500;\">$1</code>')\n\n    // Convert horizontal rules\n    .replace(/^\\-\\-\\-$/gim, '<hr style=\"height: 2px; background-color: var(--border-color); border: 0; margin: 1.5em 0;\">')\n\n    // Convert links with better visibility\n    .replace(/\\[([^\\]]+)\\]\\(([^)]+)\\)/gim, '<a href=\"$2\" target=\"_blank\" style=\"color: var(--accent-color); text-decoration: none; font-weight: bold;\">$1</a>')\n\n    // Convert paragraphs - handle newlines\n    .replace(/\\n\\s*\\n/gim, '</p><p style=\"margin: 0.8em 0; font-size: ' + fontSizeValue + '; line-height: ' + lineHeightValue + ';\">')\n    .replace(/\\n/gim, '<br>')\n\n    // Wrap in paragraph if not already wrapped\n    .replace(/^(.+)$/gim, '<p style=\"margin: 0.8em 0; font-size: ' + fontSizeValue + '; line-height: ' + lineHeightValue + ';\">$1</p>');\n\n  return html;\n}\n\n// Translate and Summarize email\nasync function translateAndSummarizeEmail() {\n  const apiKey = getApiKey();\n\n  if (!apiKey) {\n    showNotification(\"Please add your Gemini API key in the settings\", 'error');\n    toggleSettingsDropdown(); // Open settings dropdown to prompt for API key\n    return;\n  }\n\n  // Show loading UI\n  showLoading(\"Translating and summarizing...\");\n\n  try {\n    const emailContent = await getEmailContent();\n    const subject = Office.context.mailbox.item.subject;\n\n    // Get template from storage or use default\n    let template = DEFAULT_TEMPLATES.translateSummarize;\n    try {\n      const savedSettings = localStorage.getItem('readmedarling_settings');\n      if (savedSettings) {\n        const settings = JSON.parse(savedSettings);\n        if (settings.templates && settings.templates.translateSummarize) {\n          template = settings.templates.translateSummarize;\n        }\n      }\n    } catch (error) {\n      console.error(\"Error getting template:\", error);\n    }\n\n    // Replace placeholders in template\n    const prompt = template\n      .replace('{subject}', subject)\n      .replace('{content}', emailContent);\n\n    const result = await generateContent(prompt, apiKey);\n\n    // Display result with markdown rendering\n    showResults(result);\n  } catch (error) {\n    showNotification(`Error: ${error.message}`, 'error');\n  }\n}\n\n/**\n * Show loading indicator with message\n */\nfunction showLoading(message = \"Loading...\") {\n  // Create or get loading container\n  let loadingContainer = document.getElementById(\"loading-container\");\n  if (!loadingContainer) {\n    loadingContainer = document.createElement(\"div\");\n    loadingContainer.id = \"loading-container\";\n    loadingContainer.className = \"loading-container\";\n\n    const spinner = document.createElement(\"div\");\n    spinner.className = \"loading-spinner\";\n\n    const messageElem = document.createElement(\"div\");\n    messageElem.id = \"loading-message\";\n    messageElem.className = \"loading-message\";\n\n    loadingContainer.appendChild(spinner);\n    loadingContainer.appendChild(messageElem);\n    document.body.appendChild(loadingContainer);\n  }\n\n  // Set message\n  document.getElementById(\"loading-message\").textContent = message;\n\n  // Show loading\n  loadingContainer.style.display = \"flex\";\n}\n\n/**\n * Hide loading indicator\n */\nfunction hideLoading() {\n  const loadingContainer = document.getElementById(\"loading-container\");\n  if (loadingContainer) {\n    loadingContainer.style.display = \"none\";\n  }\n}\n\n// Function to show the results\nfunction showResults(content) {\n    document.getElementById(\"loading\").style.display = \"none\";\n    document.getElementById(\"landing-screen\").style.display = \"none\";\n    document.getElementById(\"result-section\").style.display = \"block\";\n\n    // Check for TLDR mode\n    let tldrMode = true; // Default to TLDR mode on\n    try {\n      const savedSettings = localStorage.getItem('readmedarling_settings');\n      if (savedSettings) {\n        const settings = JSON.parse(savedSettings);\n        if (settings.tldrMode) {\n          tldrMode = settings.tldrMode === 'true';\n        }\n      }\n    } catch (error) {\n      console.error('Error getting TLDR mode setting:', error);\n    }\n\n    // Generate a TL;DR if none exists in the content\n    let tldrContent = extractTLDR(content);\n\n    // Use the existing markdownToHtml function\n    document.getElementById(\"result-content\").innerHTML = markdownToHtml(content);\n    document.getElementById(\"tldr-content\").innerHTML = markdownToHtml(tldrContent);\n\n    // Show/hide based on TLDR mode\n    if (tldrMode) {\n      document.getElementById(\"full-content-container\").style.display = \"none\";\n      document.getElementById(\"expand-content\").innerHTML = '<span class=\"ms-Button-label\">Show Full Content</span>';\n    } else {\n      document.getElementById(\"full-content-container\").style.display = \"block\";\n      document.getElementById(\"expand-content\").innerHTML = '<span class=\"ms-Button-label\">Hide Full Content</span>';\n    }\n\n    // Apply font size from settings\n    try {\n      const savedSettings = localStorage.getItem('readmedarling_settings');\n      if (savedSettings) {\n        const settings = JSON.parse(savedSettings);\n        if (settings.fontSize) {\n          applyFontSize(settings.fontSize);\n        }\n        // Update reply button visibility\n        if (settings.showReply) {\n          updateReplyButtonVisibility(settings.showReply === 'true');\n        }\n      }\n    } catch (error) {\n      console.error('Error applying font size:', error);\n    }\n\n    // Scroll to top of result content\n    document.getElementById(\"result-content\").scrollTop = 0;\n    document.getElementById(\"tldr-content\").scrollTop = 0;\n}\n\n// Function to reset the UI\nfunction resetUI() {\n    document.getElementById(\"loading\").style.display = \"none\";\n    document.getElementById(\"result-section\").style.display = \"none\";\n    document.getElementById(\"landing-screen\").style.display = \"block\";\n}\n\n/**\n * Update reply button visibility based on settings\n */\nfunction updateReplyButtonVisibility(show) {\n  const replyButton = document.getElementById('generate-reply-button');\n  if (replyButton) {\n    replyButton.style.display = show ? 'inline-block' : 'none';\n  }\n}\n\n/**\n * Expand the full content when the expand button is clicked\n */\nfunction expandContent() {\n  const fullContentContainer = document.getElementById('full-content-container');\n  const expandButton = document.getElementById('expand-content');\n\n  if (fullContentContainer.style.display === 'none') {\n    fullContentContainer.style.display = 'block';\n    expandButton.innerHTML = '<span class=\"ms-Button-label\">Hide Full Content</span>';\n  } else {\n    fullContentContainer.style.display = 'none';\n    expandButton.innerHTML = '<span class=\"ms-Button-label\">Show Full Content</span>';\n  }\n}\n\n// Format a reply with clear subject and body sections\nfunction formatReplyOutput(replyText) {\n  // Extract subject and body\n  let subject = \"\";\n  let body = \"\";\n\n  // Check for a SUBJECT: line first\n  const subjectMatch = replyText.match(/^(?:SUBJECT:|Subject:)\\s*(.+?)(?:\\n|$)/m);\n  if (subjectMatch) {\n    subject = subjectMatch[1].trim();\n\n    // Remove the subject line from the text to get the body\n    body = replyText.replace(/^(?:SUBJECT:|Subject:)\\s*.+?\\n+/m, '').trim();\n  } else {\n    // If no explicit subject marker, check for first line as subject\n    const lines = replyText.trim().split('\\n');\n    if (lines.length > 0) {\n      subject = lines[0].trim();\n      body = lines.slice(1).join('\\n').trim();\n    } else {\n      // Fallback if no clear structure\n      subject = \"Re: Your email\";\n      body = replyText.trim();\n    }\n  }\n\n  // Create formatted HTML\n  const formattedHtml = `\n    <div class=\"reply-container\">\n      <div class=\"reply-subject\">\n        <span class=\"reply-label\">Subject:</span>${subject}\n      </div>\n      <div class=\"reply-body\">${body}</div>\n    </div>\n  `;\n\n  return {\n    html: formattedHtml,\n    subject: subject,\n    body: body,\n    raw: `Subject: ${subject}\\n\\n${body}`\n  };\n}\n\n// Generate a reply based on the current content\nasync function generateReply() {\n  const apiKey = getApiKey();\n\n  if (!apiKey) {\n    showNotification(\"Please add your Gemini API key in the settings\", 'error');\n    toggleSettingsDropdown(); // Open settings dropdown to prompt for API key\n    return;\n  }\n\n  // Show loading UI\n  showLoading(\"Generating reply...\");\n\n  try {\n    // Get settings\n    let replyModel = \"gemini-2.0-flash-light\"; // Default model\n\n    try {\n      const savedSettings = localStorage.getItem('readmedarling_settings');\n      if (savedSettings) {\n        const settings = JSON.parse(savedSettings);\n        if (settings.replyModel) {\n          replyModel = settings.replyModel;\n        }\n      }\n    } catch (error) {\n      console.error(\"Error getting reply model setting:\", error);\n    }\n\n    const emailContent = await getEmailContent();\n    const subject = Office.context.mailbox.item.subject;\n\n    // Create prompt for reply generation with structured output\n    const prompt = `You are a professional email composer. Based on the following email content,\n    draft a concise, professional reply. The reply MUST include:\n\n    1. Start with \"SUBJECT: \" followed by an appropriate subject line, then a blank line\n    2. A professional, concise email body\n\n    Make the response clear, helpful, and to the point. Use a professional tone.\n\n    Email content to reply to:\n    Subject: ${subject}\n\n    ${emailContent}`;\n\n    const result = await generateContent(prompt, apiKey, replyModel);\n\n    // Format the result to display subject and body separately\n    let formattedReply = formatReplyOutput(result);\n\n    // Display in TLDR and full content sections\n    document.getElementById(\"tldr-content\").innerHTML = formattedReply.html;\n    document.getElementById(\"result-content\").innerHTML = formattedReply.html;\n\n    // Show the result section\n    document.getElementById(\"result-section\").style.display = \"block\";\n\n    // Show the copy reply button and hide the regular copy button\n    document.getElementById(\"copy-reply-button\").style.display = \"inline-block\";\n    document.getElementById(\"copy-result-button\").style.display = \"none\";\n\n    // Hide loading\n    hideLoading();\n  } catch (error) {\n    hideLoading();\n    showNotification(`Error: ${error.message}`, 'error');\n  }\n}\n\n// Copy the reply to clipboard\nfunction copyReply() {\n  // Get the formatted reply content\n  const tldrContent = document.getElementById(\"tldr-content\").innerText;\n\n  // Extract subject and body using regex\n  const subjectMatch = tldrContent.match(/Subject:\\s*(.+?)(?:\\n|$)/i);\n  const subject = subjectMatch ? subjectMatch[1].trim() : \"\";\n\n  // Get the body (everything after the subject)\n  const bodyStart = tldrContent.indexOf(subject) + subject.length;\n  const body = tldrContent.substring(bodyStart).trim();\n\n  // Format as email reply\n  const replyContent = `Subject: ${subject}\\n\\n${body}`;\n\n  navigator.clipboard.writeText(replyContent).then(() => {\n    const copyStatus = document.getElementById(\"copy-reply-status\");\n    copyStatus.textContent = \"Copied!\";\n    setTimeout(() => {\n      copyStatus.textContent = \"\";\n    }, 2000);\n  }).catch(err => {\n    console.error('Could not copy reply: ', err);\n    showNotification(\"Failed to copy reply\", \"error\");\n  });\n}\n\n/**\n * Extract TL;DR from content, or generate a brief summary\n */\nfunction extractTLDR(content) {\n    // Check if the content already contains a TL;DR section\n    const tldrRegex = /TL;DR:?\\s*(.*?)(?:\\n\\n|$)/is;\n    const tldrMatch = content.match(tldrRegex);\n\n    if (tldrMatch && tldrMatch[1]) {\n        return tldrMatch[1];\n    }\n\n    // Check for \"Summary:\" section\n    const summaryRegex = /Summary:?\\s*(.*?)(?:\\n\\n|$)/is;\n    const summaryMatch = content.match(summaryRegex);\n\n    if (summaryMatch && summaryMatch[1]) {\n        return summaryMatch[1];\n    }\n\n    // If no TL;DR or Summary found, use the first paragraph\n    const firstParagraph = content.split('\\n\\n')[0];\n    if (firstParagraph && firstParagraph.length < 300) {\n        return firstParagraph;\n    } else if (firstParagraph) {\n        return firstParagraph.substring(0, 250) + '...';\n    }\n\n    // Fallback\n    return content.substring(0, 200) + '...';\n}\n\n/**\n * Initialize the application\n */\nfunction initializeApp() {\n  // Load settings from local storage\n  loadSettings();\n\n  // Check if API key is set\n  const apiKey = getApiKey();\n  if (!apiKey) {\n    // Show settings panel if no API key\n    document.getElementById(\"settings-section\").style.display = \"block\";\n    showNotification(\"Please set your Gemini API key in the settings\", \"info\");\n  }\n\n  // Set theme based on saved settings\n  const savedTheme = getSetting(\"theme\") || \"system\";\n  setTheme(savedTheme);\n\n  // Set font size based on saved settings\n  const savedFontSize = getSetting(\"resultFontSize\") || \"medium\";\n  setFontSize(savedFontSize);\n}\n\n/**\n * Toggle settings panel visibility\n */\nfunction toggleSettings() {\n  const settingsSection = document.getElementById(\"settings-section\");\n  if (settingsSection.style.display === \"none\") {\n    settingsSection.style.display = \"block\";\n  } else {\n    settingsSection.style.display = \"none\";\n  }\n}\n\n/**\n * Save API key to local storage\n */\nfunction saveApiKey() {\n  const apiKeyInput = document.getElementById(\"api-key-input\");\n  const apiKey = apiKeyInput.value.trim();\n\n  if (apiKey) {\n    localStorage.setItem(\"gemini_api_key\", apiKey);\n    showNotification(\"API key saved successfully\", \"success\");\n    document.getElementById(\"settings-section\").style.display = \"none\";\n  } else {\n    showNotification(\"Please enter a valid API key\", \"error\");\n  }\n}\n\n/**\n * Save settings to local storage\n */\nfunction saveSettings() {\n  const settings = {};\n\n  // Get all dropdown settings\n  document.querySelectorAll(\".settings-dropdown-container select\").forEach(select => {\n    settings[select.id] = select.value;\n  });\n\n  // Save to local storage\n  localStorage.setItem(\"readmedarling_settings\", JSON.stringify(settings));\n\n  // Apply settings\n  if (settings.theme) {\n    setTheme(settings.theme);\n  }\n\n  if (settings.resultFontSize) {\n    setFontSize(settings.resultFontSize);\n  }\n\n  showNotification(\"Settings saved\", \"success\");\n}\n\n/**\n * Load settings from local storage\n */\nfunction loadSettings() {\n  try {\n    const savedSettings = localStorage.getItem(\"readmedarling_settings\");\n    if (savedSettings) {\n      const settings = JSON.parse(savedSettings);\n\n      // Apply to dropdown values\n      Object.keys(settings).forEach(key => {\n        const element = document.getElementById(key);\n        if (element && element.tagName === \"SELECT\") {\n          element.value = settings[key];\n        }\n      });\n    }\n  } catch (error) {\n    console.error(\"Error loading settings:\", error);\n  }\n}\n\n/**\n * Get a specific setting value\n */\nfunction getSetting(key) {\n  try {\n    const savedSettings = localStorage.getItem(\"readmedarling_settings\");\n    if (savedSettings) {\n      const settings = JSON.parse(savedSettings);\n      return settings[key];\n    }\n  } catch (error) {\n    console.error(`Error getting setting ${key}:`, error);\n  }\n  return null;\n}\n\n/**\n * Set theme based on selection\n */\nfunction setTheme(theme) {\n  const root = document.documentElement;\n\n  if (theme === \"system\") {\n    // Use system preference\n    if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {\n      root.setAttribute('data-theme', 'dark');\n    } else {\n      root.setAttribute('data-theme', 'light');\n    }\n  } else {\n    // Use explicit theme\n    root.setAttribute('data-theme', theme);\n  }\n}\n\n/**\n * Set font size for results\n */\nfunction setFontSize(size) {\n  const root = document.documentElement;\n  root.style.setProperty('--result-font-size', getFontSizeValue(size));\n}\n\n/**\n * Get font size value based on size name\n */\nfunction getFontSizeValue(size) {\n  switch (size) {\n    case \"small\": return \"0.875rem\";\n    case \"medium\": return \"1rem\";\n    case \"large\": return \"1.125rem\";\n    default: return \"1rem\";\n  }\n}\n"],"names":["_regeneratorRuntime","e","t","r","Object","prototype","n","hasOwnProperty","o","defineProperty","value","i","Symbol","a","iterator","c","asyncIterator","u","toStringTag","define","enumerable","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","type","arg","call","h","l","f","s","y","GeneratorFunction","GeneratorFunctionPrototype","p","d","getPrototypeOf","v","values","g","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","_typeof","resolve","__await","then","callInvokeWithMethodAndArg","Error","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","return","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","isNaN","length","displayName","isGeneratorFunction","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","reverse","pop","prev","charAt","slice","stop","rval","handle","complete","finish","catch","delegateYield","asyncGeneratorStep","_asyncToGenerator","arguments","apply","_next","_throw","DEFAULT_TEMPLATES","toggleSettingsDropdown","dropdown","document","getElementById","style","display","loadDropdownSettings","applyCurrentTheme","savedTheme","localStorage","getItem","body","setAttribute","classList","remove","add","Office","context","officeTheme","bodyBackgroundColor","color","replace","parseInt","substr","b","error","console","isDarkTheme","onSettingsChanged","eventArgs","showNotification","message","undefined","notification","createElement","id","appendChild","className","concat","textContent","setTimeout","saveDropdownSettings","settings","savedSettings","JSON","parse","apiKey","model","language","theme","fontSize","tldrMode","showReply","replyModel","summarizeTemplate","translateTemplate","translateSummarizeTemplate","defaultLanguage","templates","summarize","translate","translateSummarize","setItem","stringify","applyFontSize","updateReplyButtonVisibility","resetTemplates","size","documentElement","getEmailContent","_getEmailContent","_callee","_context","reject","mailbox","item","getAsync","result","status","AsyncResultStatus","Succeeded","generateContent","_x","_x2","_generateContent","_callee2","prompt","modelOverride","apiUrl","response","data","_data$error","generatedText","_args2","_context2","fetch","headers","contents","parts","text","generationConfig","temperature","topK","topP","maxOutputTokens","json","ok","candidates","content","t0","getApiKey","summarizeEmail","_summarizeEmail","_callee3","emailContent","subject","template","_context3","showLoading","showResults","copyResult","resultContent","tldrContent","innerText","fullContent","includes","headingMatch","exec","trim","split","join","navigator","clipboard","writeText","copyStatus","err","markdownToHtml","markdown","fontSizeValue","lineHeightValue","codeFontSize","isReply","test","match","p1","loadingContainer","spinner","messageElem","hideLoading","tldrMatch","summaryMatch","firstParagraph","substring","extractTLDR","innerHTML","scrollTop","show","replyButton","expandContent","fullContentContainer","expandButton","formatReplyOutput","replyText","subjectMatch","lines","html","raw","generateReply","_generateReply","_callee6","formattedReply","_context6","copyReply","bodyStart","indexOf","replyContent","toggleSettings","settingsSection","saveApiKey","saveSettings","querySelectorAll","select","setTheme","resultFontSize","setFontSize","getSetting","key","root","window","matchMedia","matches","setProperty","getFontSizeValue","onReady","info","host","HostType","Outlook","element","tagName","loadSettings","addEventListener","event","querySelector","onclick","addHandlerAsync","EventType","SettingsChanged"],"sourceRoot":""}