{"version":3,"file":"taskpane.js","mappings":"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","sources":["webpack:///./node_modules/marked/lib/marked.esm.js?","webpack:///./src/taskpane/taskpane.js?"],"sourcesContent":["/**\n * marked v15.0.7 - a markdown parser\n * Copyright (c) 2011-2025, Christopher Jeffrey. (MIT Licensed)\n * https://github.com/markedjs/marked\n */\n\n/**\n * DO NOT EDIT THIS FILE\n * The code in this file is generated from files in ./src/\n */\n\n/**\n * Gets the original marked default options.\n */\nfunction _getDefaults() {\n    return {\n        async: false,\n        breaks: false,\n        extensions: null,\n        gfm: true,\n        hooks: null,\n        pedantic: false,\n        renderer: null,\n        silent: false,\n        tokenizer: null,\n        walkTokens: null,\n    };\n}\nlet _defaults = _getDefaults();\nfunction changeDefaults(newDefaults) {\n    _defaults = newDefaults;\n}\n\nconst noopTest = { exec: () => null };\nfunction edit(regex, opt = '') {\n    let source = typeof regex === 'string' ? regex : regex.source;\n    const obj = {\n        replace: (name, val) => {\n            let valSource = typeof val === 'string' ? val : val.source;\n            valSource = valSource.replace(other.caret, '$1');\n            source = source.replace(name, valSource);\n            return obj;\n        },\n        getRegex: () => {\n            return new RegExp(source, opt);\n        },\n    };\n    return obj;\n}\nconst other = {\n    codeRemoveIndent: /^(?: {1,4}| {0,3}\\t)/gm,\n    outputLinkReplace: /\\\\([\\[\\]])/g,\n    indentCodeCompensation: /^(\\s+)(?:```)/,\n    beginningSpace: /^\\s+/,\n    endingHash: /#$/,\n    startingSpaceChar: /^ /,\n    endingSpaceChar: / $/,\n    nonSpaceChar: /[^ ]/,\n    newLineCharGlobal: /\\n/g,\n    tabCharGlobal: /\\t/g,\n    multipleSpaceGlobal: /\\s+/g,\n    blankLine: /^[ \\t]*$/,\n    doubleBlankLine: /\\n[ \\t]*\\n[ \\t]*$/,\n    blockquoteStart: /^ {0,3}>/,\n    blockquoteSetextReplace: /\\n {0,3}((?:=+|-+) *)(?=\\n|$)/g,\n    blockquoteSetextReplace2: /^ {0,3}>[ \\t]?/gm,\n    listReplaceTabs: /^\\t+/,\n    listReplaceNesting: /^ {1,4}(?=( {4})*[^ ])/g,\n    listIsTask: /^\\[[ xX]\\] /,\n    listReplaceTask: /^\\[[ xX]\\] +/,\n    anyLine: /\\n.*\\n/,\n    hrefBrackets: /^<(.*)>$/,\n    tableDelimiter: /[:|]/,\n    tableAlignChars: /^\\||\\| *$/g,\n    tableRowBlankLine: /\\n[ \\t]*$/,\n    tableAlignRight: /^ *-+: *$/,\n    tableAlignCenter: /^ *:-+: *$/,\n    tableAlignLeft: /^ *:-+ *$/,\n    startATag: /^<a /i,\n    endATag: /^<\\/a>/i,\n    startPreScriptTag: /^<(pre|code|kbd|script)(\\s|>)/i,\n    endPreScriptTag: /^<\\/(pre|code|kbd|script)(\\s|>)/i,\n    startAngleBracket: /^</,\n    endAngleBracket: />$/,\n    pedanticHrefTitle: /^([^'\"]*[^\\s])\\s+(['\"])(.*)\\2/,\n    unicodeAlphaNumeric: /[\\p{L}\\p{N}]/u,\n    escapeTest: /[&<>\"']/,\n    escapeReplace: /[&<>\"']/g,\n    escapeTestNoEncode: /[<>\"']|&(?!(#\\d{1,7}|#[Xx][a-fA-F0-9]{1,6}|\\w+);)/,\n    escapeReplaceNoEncode: /[<>\"']|&(?!(#\\d{1,7}|#[Xx][a-fA-F0-9]{1,6}|\\w+);)/g,\n    unescapeTest: /&(#(?:\\d+)|(?:#x[0-9A-Fa-f]+)|(?:\\w+));?/ig,\n    caret: /(^|[^\\[])\\^/g,\n    percentDecode: /%25/g,\n    findPipe: /\\|/g,\n    splitPipe: / \\|/,\n    slashPipe: /\\\\\\|/g,\n    carriageReturn: /\\r\\n|\\r/g,\n    spaceLine: /^ +$/gm,\n    notSpaceStart: /^\\S*/,\n    endingNewline: /\\n$/,\n    listItemRegex: (bull) => new RegExp(`^( {0,3}${bull})((?:[\\t ][^\\\\n]*)?(?:\\\\n|$))`),\n    nextBulletRegex: (indent) => new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:[*+-]|\\\\d{1,9}[.)])((?:[ \\t][^\\\\n]*)?(?:\\\\n|$))`),\n    hrRegex: (indent) => new RegExp(`^ {0,${Math.min(3, indent - 1)}}((?:- *){3,}|(?:_ *){3,}|(?:\\\\* *){3,})(?:\\\\n+|$)`),\n    fencesBeginRegex: (indent) => new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:\\`\\`\\`|~~~)`),\n    headingBeginRegex: (indent) => new RegExp(`^ {0,${Math.min(3, indent - 1)}}#`),\n    htmlBeginRegex: (indent) => new RegExp(`^ {0,${Math.min(3, indent - 1)}}<(?:[a-z].*>|!--)`, 'i'),\n};\n/**\n * Block-Level Grammar\n */\nconst newline = /^(?:[ \\t]*(?:\\n|$))+/;\nconst blockCode = /^((?: {4}| {0,3}\\t)[^\\n]+(?:\\n(?:[ \\t]*(?:\\n|$))*)?)+/;\nconst fences = /^ {0,3}(`{3,}(?=[^`\\n]*(?:\\n|$))|~{3,})([^\\n]*)(?:\\n|$)(?:|([\\s\\S]*?)(?:\\n|$))(?: {0,3}\\1[~`]* *(?=\\n|$)|$)/;\nconst hr = /^ {0,3}((?:-[\\t ]*){3,}|(?:_[ \\t]*){3,}|(?:\\*[ \\t]*){3,})(?:\\n+|$)/;\nconst heading = /^ {0,3}(#{1,6})(?=\\s|$)(.*)(?:\\n+|$)/;\nconst bullet = /(?:[*+-]|\\d{1,9}[.)])/;\nconst lheadingCore = /^(?!bull |blockCode|fences|blockquote|heading|html|table)((?:.|\\n(?!\\s*?\\n|bull |blockCode|fences|blockquote|heading|html|table))+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/;\nconst lheading = edit(lheadingCore)\n    .replace(/bull/g, bullet) // lists can interrupt\n    .replace(/blockCode/g, /(?: {4}| {0,3}\\t)/) // indented code blocks can interrupt\n    .replace(/fences/g, / {0,3}(?:`{3,}|~{3,})/) // fenced code blocks can interrupt\n    .replace(/blockquote/g, / {0,3}>/) // blockquote can interrupt\n    .replace(/heading/g, / {0,3}#{1,6}/) // ATX heading can interrupt\n    .replace(/html/g, / {0,3}<[^\\n>]+>\\n/) // block html can interrupt\n    .replace(/\\|table/g, '') // table not in commonmark\n    .getRegex();\nconst lheadingGfm = edit(lheadingCore)\n    .replace(/bull/g, bullet) // lists can interrupt\n    .replace(/blockCode/g, /(?: {4}| {0,3}\\t)/) // indented code blocks can interrupt\n    .replace(/fences/g, / {0,3}(?:`{3,}|~{3,})/) // fenced code blocks can interrupt\n    .replace(/blockquote/g, / {0,3}>/) // blockquote can interrupt\n    .replace(/heading/g, / {0,3}#{1,6}/) // ATX heading can interrupt\n    .replace(/html/g, / {0,3}<[^\\n>]+>\\n/) // block html can interrupt\n    .replace(/table/g, / {0,3}\\|?(?:[:\\- ]*\\|)+[\\:\\- ]*\\n/) // table can interrupt\n    .getRegex();\nconst _paragraph = /^([^\\n]+(?:\\n(?!hr|heading|lheading|blockquote|fences|list|html|table| +\\n)[^\\n]+)*)/;\nconst blockText = /^[^\\n]+/;\nconst _blockLabel = /(?!\\s*\\])(?:\\\\.|[^\\[\\]\\\\])+/;\nconst def = edit(/^ {0,3}\\[(label)\\]: *(?:\\n[ \\t]*)?([^<\\s][^\\s]*|<.*?>)(?:(?: +(?:\\n[ \\t]*)?| *\\n[ \\t]*)(title))? *(?:\\n+|$)/)\n    .replace('label', _blockLabel)\n    .replace('title', /(?:\"(?:\\\\\"?|[^\"\\\\])*\"|'[^'\\n]*(?:\\n[^'\\n]+)*\\n?'|\\([^()]*\\))/)\n    .getRegex();\nconst list = edit(/^( {0,3}bull)([ \\t][^\\n]+?)?(?:\\n|$)/)\n    .replace(/bull/g, bullet)\n    .getRegex();\nconst _tag = 'address|article|aside|base|basefont|blockquote|body|caption'\n    + '|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption'\n    + '|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe'\n    + '|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option'\n    + '|p|param|search|section|summary|table|tbody|td|tfoot|th|thead|title'\n    + '|tr|track|ul';\nconst _comment = /<!--(?:-?>|[\\s\\S]*?(?:-->|$))/;\nconst html = edit('^ {0,3}(?:' // optional indentation\n    + '<(script|pre|style|textarea)[\\\\s>][\\\\s\\\\S]*?(?:</\\\\1>[^\\\\n]*\\\\n+|$)' // (1)\n    + '|comment[^\\\\n]*(\\\\n+|$)' // (2)\n    + '|<\\\\?[\\\\s\\\\S]*?(?:\\\\?>\\\\n*|$)' // (3)\n    + '|<![A-Z][\\\\s\\\\S]*?(?:>\\\\n*|$)' // (4)\n    + '|<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?(?:\\\\]\\\\]>\\\\n*|$)' // (5)\n    + '|</?(tag)(?: +|\\\\n|/?>)[\\\\s\\\\S]*?(?:(?:\\\\n[ \\t]*)+\\\\n|$)' // (6)\n    + '|<(?!script|pre|style|textarea)([a-z][\\\\w-]*)(?:attribute)*? */?>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n[ \\t]*)+\\\\n|$)' // (7) open tag\n    + '|</(?!script|pre|style|textarea)[a-z][\\\\w-]*\\\\s*>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n[ \\t]*)+\\\\n|$)' // (7) closing tag\n    + ')', 'i')\n    .replace('comment', _comment)\n    .replace('tag', _tag)\n    .replace('attribute', / +[a-zA-Z:_][\\w.:-]*(?: *= *\"[^\"\\n]*\"| *= *'[^'\\n]*'| *= *[^\\s\"'=<>`]+)?/)\n    .getRegex();\nconst paragraph = edit(_paragraph)\n    .replace('hr', hr)\n    .replace('heading', ' {0,3}#{1,6}(?:\\\\s|$)')\n    .replace('|lheading', '') // setext headings don't interrupt commonmark paragraphs\n    .replace('|table', '')\n    .replace('blockquote', ' {0,3}>')\n    .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n    .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n    .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n    .replace('tag', _tag) // pars can be interrupted by type (6) html blocks\n    .getRegex();\nconst blockquote = edit(/^( {0,3}> ?(paragraph|[^\\n]*)(?:\\n|$))+/)\n    .replace('paragraph', paragraph)\n    .getRegex();\n/**\n * Normal Block Grammar\n */\nconst blockNormal = {\n    blockquote,\n    code: blockCode,\n    def,\n    fences,\n    heading,\n    hr,\n    html,\n    lheading,\n    list,\n    newline,\n    paragraph,\n    table: noopTest,\n    text: blockText,\n};\n/**\n * GFM Block Grammar\n */\nconst gfmTable = edit('^ *([^\\\\n ].*)\\\\n' // Header\n    + ' {0,3}((?:\\\\| *)?:?-+:? *(?:\\\\| *:?-+:? *)*(?:\\\\| *)?)' // Align\n    + '(?:\\\\n((?:(?! *\\\\n|hr|heading|blockquote|code|fences|list|html).*(?:\\\\n|$))*)\\\\n*|$)') // Cells\n    .replace('hr', hr)\n    .replace('heading', ' {0,3}#{1,6}(?:\\\\s|$)')\n    .replace('blockquote', ' {0,3}>')\n    .replace('code', '(?: {4}| {0,3}\\t)[^\\\\n]')\n    .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n    .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n    .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n    .replace('tag', _tag) // tables can be interrupted by type (6) html blocks\n    .getRegex();\nconst blockGfm = {\n    ...blockNormal,\n    lheading: lheadingGfm,\n    table: gfmTable,\n    paragraph: edit(_paragraph)\n        .replace('hr', hr)\n        .replace('heading', ' {0,3}#{1,6}(?:\\\\s|$)')\n        .replace('|lheading', '') // setext headings don't interrupt commonmark paragraphs\n        .replace('table', gfmTable) // interrupt paragraphs with table\n        .replace('blockquote', ' {0,3}>')\n        .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n        .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n        .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n        .replace('tag', _tag) // pars can be interrupted by type (6) html blocks\n        .getRegex(),\n};\n/**\n * Pedantic grammar (original John Gruber's loose markdown specification)\n */\nconst blockPedantic = {\n    ...blockNormal,\n    html: edit('^ *(?:comment *(?:\\\\n|\\\\s*$)'\n        + '|<(tag)[\\\\s\\\\S]+?</\\\\1> *(?:\\\\n{2,}|\\\\s*$)' // closed tag\n        + '|<tag(?:\"[^\"]*\"|\\'[^\\']*\\'|\\\\s[^\\'\"/>\\\\s]*)*?/?> *(?:\\\\n{2,}|\\\\s*$))')\n        .replace('comment', _comment)\n        .replace(/tag/g, '(?!(?:'\n        + 'a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub'\n        + '|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)'\n        + '\\\\b)\\\\w+(?!:|[^\\\\w\\\\s@]*@)\\\\b')\n        .getRegex(),\n    def: /^ *\\[([^\\]]+)\\]: *<?([^\\s>]+)>?(?: +([\"(][^\\n]+[\")]))? *(?:\\n+|$)/,\n    heading: /^(#{1,6})(.*)(?:\\n+|$)/,\n    fences: noopTest, // fences not supported\n    lheading: /^(.+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/,\n    paragraph: edit(_paragraph)\n        .replace('hr', hr)\n        .replace('heading', ' *#{1,6} *[^\\n]')\n        .replace('lheading', lheading)\n        .replace('|table', '')\n        .replace('blockquote', ' {0,3}>')\n        .replace('|fences', '')\n        .replace('|list', '')\n        .replace('|html', '')\n        .replace('|tag', '')\n        .getRegex(),\n};\n/**\n * Inline-Level Grammar\n */\nconst escape$1 = /^\\\\([!\"#$%&'()*+,\\-./:;<=>?@\\[\\]\\\\^_`{|}~])/;\nconst inlineCode = /^(`+)([^`]|[^`][\\s\\S]*?[^`])\\1(?!`)/;\nconst br = /^( {2,}|\\\\)\\n(?!\\s*$)/;\nconst inlineText = /^(`+|[^`])(?:(?= {2,}\\n)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*_]|\\b_|$)|[^ ](?= {2,}\\n)))/;\n// list of unicode punctuation marks, plus any missing characters from CommonMark spec\nconst _punctuation = /[\\p{P}\\p{S}]/u;\nconst _punctuationOrSpace = /[\\s\\p{P}\\p{S}]/u;\nconst _notPunctuationOrSpace = /[^\\s\\p{P}\\p{S}]/u;\nconst punctuation = edit(/^((?![*_])punctSpace)/, 'u')\n    .replace(/punctSpace/g, _punctuationOrSpace).getRegex();\n// GFM allows ~ inside strong and em for strikethrough\nconst _punctuationGfmStrongEm = /(?!~)[\\p{P}\\p{S}]/u;\nconst _punctuationOrSpaceGfmStrongEm = /(?!~)[\\s\\p{P}\\p{S}]/u;\nconst _notPunctuationOrSpaceGfmStrongEm = /(?:[^\\s\\p{P}\\p{S}]|~)/u;\n// sequences em should skip over [title](link), `code`, <html>\nconst blockSkip = /\\[[^[\\]]*?\\]\\((?:\\\\.|[^\\\\\\(\\)]|\\((?:\\\\.|[^\\\\\\(\\)])*\\))*\\)|`[^`]*?`|<[^<>]*?>/g;\nconst emStrongLDelimCore = /^(?:\\*+(?:((?!\\*)punct)|[^\\s*]))|^_+(?:((?!_)punct)|([^\\s_]))/;\nconst emStrongLDelim = edit(emStrongLDelimCore, 'u')\n    .replace(/punct/g, _punctuation)\n    .getRegex();\nconst emStrongLDelimGfm = edit(emStrongLDelimCore, 'u')\n    .replace(/punct/g, _punctuationGfmStrongEm)\n    .getRegex();\nconst emStrongRDelimAstCore = '^[^_*]*?__[^_*]*?\\\\*[^_*]*?(?=__)' // Skip orphan inside strong\n    + '|[^*]+(?=[^*])' // Consume to delim\n    + '|(?!\\\\*)punct(\\\\*+)(?=[\\\\s]|$)' // (1) #*** can only be a Right Delimiter\n    + '|notPunctSpace(\\\\*+)(?!\\\\*)(?=punctSpace|$)' // (2) a***#, a*** can only be a Right Delimiter\n    + '|(?!\\\\*)punctSpace(\\\\*+)(?=notPunctSpace)' // (3) #***a, ***a can only be Left Delimiter\n    + '|[\\\\s](\\\\*+)(?!\\\\*)(?=punct)' // (4) ***# can only be Left Delimiter\n    + '|(?!\\\\*)punct(\\\\*+)(?!\\\\*)(?=punct)' // (5) #***# can be either Left or Right Delimiter\n    + '|notPunctSpace(\\\\*+)(?=notPunctSpace)'; // (6) a***a can be either Left or Right Delimiter\nconst emStrongRDelimAst = edit(emStrongRDelimAstCore, 'gu')\n    .replace(/notPunctSpace/g, _notPunctuationOrSpace)\n    .replace(/punctSpace/g, _punctuationOrSpace)\n    .replace(/punct/g, _punctuation)\n    .getRegex();\nconst emStrongRDelimAstGfm = edit(emStrongRDelimAstCore, 'gu')\n    .replace(/notPunctSpace/g, _notPunctuationOrSpaceGfmStrongEm)\n    .replace(/punctSpace/g, _punctuationOrSpaceGfmStrongEm)\n    .replace(/punct/g, _punctuationGfmStrongEm)\n    .getRegex();\n// (6) Not allowed for _\nconst emStrongRDelimUnd = edit('^[^_*]*?\\\\*\\\\*[^_*]*?_[^_*]*?(?=\\\\*\\\\*)' // Skip orphan inside strong\n    + '|[^_]+(?=[^_])' // Consume to delim\n    + '|(?!_)punct(_+)(?=[\\\\s]|$)' // (1) #___ can only be a Right Delimiter\n    + '|notPunctSpace(_+)(?!_)(?=punctSpace|$)' // (2) a___#, a___ can only be a Right Delimiter\n    + '|(?!_)punctSpace(_+)(?=notPunctSpace)' // (3) #___a, ___a can only be Left Delimiter\n    + '|[\\\\s](_+)(?!_)(?=punct)' // (4) ___# can only be Left Delimiter\n    + '|(?!_)punct(_+)(?!_)(?=punct)', 'gu') // (5) #___# can be either Left or Right Delimiter\n    .replace(/notPunctSpace/g, _notPunctuationOrSpace)\n    .replace(/punctSpace/g, _punctuationOrSpace)\n    .replace(/punct/g, _punctuation)\n    .getRegex();\nconst anyPunctuation = edit(/\\\\(punct)/, 'gu')\n    .replace(/punct/g, _punctuation)\n    .getRegex();\nconst autolink = edit(/^<(scheme:[^\\s\\x00-\\x1f<>]*|email)>/)\n    .replace('scheme', /[a-zA-Z][a-zA-Z0-9+.-]{1,31}/)\n    .replace('email', /[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/)\n    .getRegex();\nconst _inlineComment = edit(_comment).replace('(?:-->|$)', '-->').getRegex();\nconst tag = edit('^comment'\n    + '|^</[a-zA-Z][\\\\w:-]*\\\\s*>' // self-closing tag\n    + '|^<[a-zA-Z][\\\\w-]*(?:attribute)*?\\\\s*/?>' // open tag\n    + '|^<\\\\?[\\\\s\\\\S]*?\\\\?>' // processing instruction, e.g. <?php ?>\n    + '|^<![a-zA-Z]+\\\\s[\\\\s\\\\S]*?>' // declaration, e.g. <!DOCTYPE html>\n    + '|^<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>') // CDATA section\n    .replace('comment', _inlineComment)\n    .replace('attribute', /\\s+[a-zA-Z:_][\\w.:-]*(?:\\s*=\\s*\"[^\"]*\"|\\s*=\\s*'[^']*'|\\s*=\\s*[^\\s\"'=<>`]+)?/)\n    .getRegex();\nconst _inlineLabel = /(?:\\[(?:\\\\.|[^\\[\\]\\\\])*\\]|\\\\.|`[^`]*`|[^\\[\\]\\\\`])*?/;\nconst link = edit(/^!?\\[(label)\\]\\(\\s*(href)(?:\\s+(title))?\\s*\\)/)\n    .replace('label', _inlineLabel)\n    .replace('href', /<(?:\\\\.|[^\\n<>\\\\])+>|[^\\s\\x00-\\x1f]*/)\n    .replace('title', /\"(?:\\\\\"?|[^\"\\\\])*\"|'(?:\\\\'?|[^'\\\\])*'|\\((?:\\\\\\)?|[^)\\\\])*\\)/)\n    .getRegex();\nconst reflink = edit(/^!?\\[(label)\\]\\[(ref)\\]/)\n    .replace('label', _inlineLabel)\n    .replace('ref', _blockLabel)\n    .getRegex();\nconst nolink = edit(/^!?\\[(ref)\\](?:\\[\\])?/)\n    .replace('ref', _blockLabel)\n    .getRegex();\nconst reflinkSearch = edit('reflink|nolink(?!\\\\()', 'g')\n    .replace('reflink', reflink)\n    .replace('nolink', nolink)\n    .getRegex();\n/**\n * Normal Inline Grammar\n */\nconst inlineNormal = {\n    _backpedal: noopTest, // only used for GFM url\n    anyPunctuation,\n    autolink,\n    blockSkip,\n    br,\n    code: inlineCode,\n    del: noopTest,\n    emStrongLDelim,\n    emStrongRDelimAst,\n    emStrongRDelimUnd,\n    escape: escape$1,\n    link,\n    nolink,\n    punctuation,\n    reflink,\n    reflinkSearch,\n    tag,\n    text: inlineText,\n    url: noopTest,\n};\n/**\n * Pedantic Inline Grammar\n */\nconst inlinePedantic = {\n    ...inlineNormal,\n    link: edit(/^!?\\[(label)\\]\\((.*?)\\)/)\n        .replace('label', _inlineLabel)\n        .getRegex(),\n    reflink: edit(/^!?\\[(label)\\]\\s*\\[([^\\]]*)\\]/)\n        .replace('label', _inlineLabel)\n        .getRegex(),\n};\n/**\n * GFM Inline Grammar\n */\nconst inlineGfm = {\n    ...inlineNormal,\n    emStrongRDelimAst: emStrongRDelimAstGfm,\n    emStrongLDelim: emStrongLDelimGfm,\n    url: edit(/^((?:ftp|https?):\\/\\/|www\\.)(?:[a-zA-Z0-9\\-]+\\.?)+[^\\s<]*|^email/, 'i')\n        .replace('email', /[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/)\n        .getRegex(),\n    _backpedal: /(?:[^?!.,:;*_'\"~()&]+|\\([^)]*\\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_'\"~)]+(?!$))+/,\n    del: /^(~~?)(?=[^\\s~])((?:\\\\.|[^\\\\])*?(?:\\\\.|[^\\s~\\\\]))\\1(?=[^~]|$)/,\n    text: /^([`~]+|[^`~])(?:(?= {2,}\\n)|(?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*~_]|\\b_|https?:\\/\\/|ftp:\\/\\/|www\\.|$)|[^ ](?= {2,}\\n)|[^a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-](?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)))/,\n};\n/**\n * GFM + Line Breaks Inline Grammar\n */\nconst inlineBreaks = {\n    ...inlineGfm,\n    br: edit(br).replace('{2,}', '*').getRegex(),\n    text: edit(inlineGfm.text)\n        .replace('\\\\b_', '\\\\b_| {2,}\\\\n')\n        .replace(/\\{2,\\}/g, '*')\n        .getRegex(),\n};\n/**\n * exports\n */\nconst block = {\n    normal: blockNormal,\n    gfm: blockGfm,\n    pedantic: blockPedantic,\n};\nconst inline = {\n    normal: inlineNormal,\n    gfm: inlineGfm,\n    breaks: inlineBreaks,\n    pedantic: inlinePedantic,\n};\n\n/**\n * Helpers\n */\nconst escapeReplacements = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&#39;',\n};\nconst getEscapeReplacement = (ch) => escapeReplacements[ch];\nfunction escape(html, encode) {\n    if (encode) {\n        if (other.escapeTest.test(html)) {\n            return html.replace(other.escapeReplace, getEscapeReplacement);\n        }\n    }\n    else {\n        if (other.escapeTestNoEncode.test(html)) {\n            return html.replace(other.escapeReplaceNoEncode, getEscapeReplacement);\n        }\n    }\n    return html;\n}\nfunction cleanUrl(href) {\n    try {\n        href = encodeURI(href).replace(other.percentDecode, '%');\n    }\n    catch {\n        return null;\n    }\n    return href;\n}\nfunction splitCells(tableRow, count) {\n    // ensure that every cell-delimiting pipe has a space\n    // before it to distinguish it from an escaped pipe\n    const row = tableRow.replace(other.findPipe, (match, offset, str) => {\n        let escaped = false;\n        let curr = offset;\n        while (--curr >= 0 && str[curr] === '\\\\')\n            escaped = !escaped;\n        if (escaped) {\n            // odd number of slashes means | is escaped\n            // so we leave it alone\n            return '|';\n        }\n        else {\n            // add space before unescaped |\n            return ' |';\n        }\n    }), cells = row.split(other.splitPipe);\n    let i = 0;\n    // First/last cell in a row cannot be empty if it has no leading/trailing pipe\n    if (!cells[0].trim()) {\n        cells.shift();\n    }\n    if (cells.length > 0 && !cells.at(-1)?.trim()) {\n        cells.pop();\n    }\n    if (count) {\n        if (cells.length > count) {\n            cells.splice(count);\n        }\n        else {\n            while (cells.length < count)\n                cells.push('');\n        }\n    }\n    for (; i < cells.length; i++) {\n        // leading or trailing whitespace is ignored per the gfm spec\n        cells[i] = cells[i].trim().replace(other.slashPipe, '|');\n    }\n    return cells;\n}\n/**\n * Remove trailing 'c's. Equivalent to str.replace(/c*$/, '').\n * /c*$/ is vulnerable to REDOS.\n *\n * @param str\n * @param c\n * @param invert Remove suffix of non-c chars instead. Default falsey.\n */\nfunction rtrim(str, c, invert) {\n    const l = str.length;\n    if (l === 0) {\n        return '';\n    }\n    // Length of suffix matching the invert condition.\n    let suffLen = 0;\n    // Step left until we fail to match the invert condition.\n    while (suffLen < l) {\n        const currChar = str.charAt(l - suffLen - 1);\n        if (currChar === c && true) {\n            suffLen++;\n        }\n        else {\n            break;\n        }\n    }\n    return str.slice(0, l - suffLen);\n}\nfunction findClosingBracket(str, b) {\n    if (str.indexOf(b[1]) === -1) {\n        return -1;\n    }\n    let level = 0;\n    for (let i = 0; i < str.length; i++) {\n        if (str[i] === '\\\\') {\n            i++;\n        }\n        else if (str[i] === b[0]) {\n            level++;\n        }\n        else if (str[i] === b[1]) {\n            level--;\n            if (level < 0) {\n                return i;\n            }\n        }\n    }\n    return -1;\n}\n\nfunction outputLink(cap, link, raw, lexer, rules) {\n    const href = link.href;\n    const title = link.title || null;\n    const text = cap[1].replace(rules.other.outputLinkReplace, '$1');\n    if (cap[0].charAt(0) !== '!') {\n        lexer.state.inLink = true;\n        const token = {\n            type: 'link',\n            raw,\n            href,\n            title,\n            text,\n            tokens: lexer.inlineTokens(text),\n        };\n        lexer.state.inLink = false;\n        return token;\n    }\n    return {\n        type: 'image',\n        raw,\n        href,\n        title,\n        text,\n    };\n}\nfunction indentCodeCompensation(raw, text, rules) {\n    const matchIndentToCode = raw.match(rules.other.indentCodeCompensation);\n    if (matchIndentToCode === null) {\n        return text;\n    }\n    const indentToCode = matchIndentToCode[1];\n    return text\n        .split('\\n')\n        .map(node => {\n        const matchIndentInNode = node.match(rules.other.beginningSpace);\n        if (matchIndentInNode === null) {\n            return node;\n        }\n        const [indentInNode] = matchIndentInNode;\n        if (indentInNode.length >= indentToCode.length) {\n            return node.slice(indentToCode.length);\n        }\n        return node;\n    })\n        .join('\\n');\n}\n/**\n * Tokenizer\n */\nclass _Tokenizer {\n    options;\n    rules; // set by the lexer\n    lexer; // set by the lexer\n    constructor(options) {\n        this.options = options || _defaults;\n    }\n    space(src) {\n        const cap = this.rules.block.newline.exec(src);\n        if (cap && cap[0].length > 0) {\n            return {\n                type: 'space',\n                raw: cap[0],\n            };\n        }\n    }\n    code(src) {\n        const cap = this.rules.block.code.exec(src);\n        if (cap) {\n            const text = cap[0].replace(this.rules.other.codeRemoveIndent, '');\n            return {\n                type: 'code',\n                raw: cap[0],\n                codeBlockStyle: 'indented',\n                text: !this.options.pedantic\n                    ? rtrim(text, '\\n')\n                    : text,\n            };\n        }\n    }\n    fences(src) {\n        const cap = this.rules.block.fences.exec(src);\n        if (cap) {\n            const raw = cap[0];\n            const text = indentCodeCompensation(raw, cap[3] || '', this.rules);\n            return {\n                type: 'code',\n                raw,\n                lang: cap[2] ? cap[2].trim().replace(this.rules.inline.anyPunctuation, '$1') : cap[2],\n                text,\n            };\n        }\n    }\n    heading(src) {\n        const cap = this.rules.block.heading.exec(src);\n        if (cap) {\n            let text = cap[2].trim();\n            // remove trailing #s\n            if (this.rules.other.endingHash.test(text)) {\n                const trimmed = rtrim(text, '#');\n                if (this.options.pedantic) {\n                    text = trimmed.trim();\n                }\n                else if (!trimmed || this.rules.other.endingSpaceChar.test(trimmed)) {\n                    // CommonMark requires space before trailing #s\n                    text = trimmed.trim();\n                }\n            }\n            return {\n                type: 'heading',\n                raw: cap[0],\n                depth: cap[1].length,\n                text,\n                tokens: this.lexer.inline(text),\n            };\n        }\n    }\n    hr(src) {\n        const cap = this.rules.block.hr.exec(src);\n        if (cap) {\n            return {\n                type: 'hr',\n                raw: rtrim(cap[0], '\\n'),\n            };\n        }\n    }\n    blockquote(src) {\n        const cap = this.rules.block.blockquote.exec(src);\n        if (cap) {\n            let lines = rtrim(cap[0], '\\n').split('\\n');\n            let raw = '';\n            let text = '';\n            const tokens = [];\n            while (lines.length > 0) {\n                let inBlockquote = false;\n                const currentLines = [];\n                let i;\n                for (i = 0; i < lines.length; i++) {\n                    // get lines up to a continuation\n                    if (this.rules.other.blockquoteStart.test(lines[i])) {\n                        currentLines.push(lines[i]);\n                        inBlockquote = true;\n                    }\n                    else if (!inBlockquote) {\n                        currentLines.push(lines[i]);\n                    }\n                    else {\n                        break;\n                    }\n                }\n                lines = lines.slice(i);\n                const currentRaw = currentLines.join('\\n');\n                const currentText = currentRaw\n                    // precede setext continuation with 4 spaces so it isn't a setext\n                    .replace(this.rules.other.blockquoteSetextReplace, '\\n    $1')\n                    .replace(this.rules.other.blockquoteSetextReplace2, '');\n                raw = raw ? `${raw}\\n${currentRaw}` : currentRaw;\n                text = text ? `${text}\\n${currentText}` : currentText;\n                // parse blockquote lines as top level tokens\n                // merge paragraphs if this is a continuation\n                const top = this.lexer.state.top;\n                this.lexer.state.top = true;\n                this.lexer.blockTokens(currentText, tokens, true);\n                this.lexer.state.top = top;\n                // if there is no continuation then we are done\n                if (lines.length === 0) {\n                    break;\n                }\n                const lastToken = tokens.at(-1);\n                if (lastToken?.type === 'code') {\n                    // blockquote continuation cannot be preceded by a code block\n                    break;\n                }\n                else if (lastToken?.type === 'blockquote') {\n                    // include continuation in nested blockquote\n                    const oldToken = lastToken;\n                    const newText = oldToken.raw + '\\n' + lines.join('\\n');\n                    const newToken = this.blockquote(newText);\n                    tokens[tokens.length - 1] = newToken;\n                    raw = raw.substring(0, raw.length - oldToken.raw.length) + newToken.raw;\n                    text = text.substring(0, text.length - oldToken.text.length) + newToken.text;\n                    break;\n                }\n                else if (lastToken?.type === 'list') {\n                    // include continuation in nested list\n                    const oldToken = lastToken;\n                    const newText = oldToken.raw + '\\n' + lines.join('\\n');\n                    const newToken = this.list(newText);\n                    tokens[tokens.length - 1] = newToken;\n                    raw = raw.substring(0, raw.length - lastToken.raw.length) + newToken.raw;\n                    text = text.substring(0, text.length - oldToken.raw.length) + newToken.raw;\n                    lines = newText.substring(tokens.at(-1).raw.length).split('\\n');\n                    continue;\n                }\n            }\n            return {\n                type: 'blockquote',\n                raw,\n                tokens,\n                text,\n            };\n        }\n    }\n    list(src) {\n        let cap = this.rules.block.list.exec(src);\n        if (cap) {\n            let bull = cap[1].trim();\n            const isordered = bull.length > 1;\n            const list = {\n                type: 'list',\n                raw: '',\n                ordered: isordered,\n                start: isordered ? +bull.slice(0, -1) : '',\n                loose: false,\n                items: [],\n            };\n            bull = isordered ? `\\\\d{1,9}\\\\${bull.slice(-1)}` : `\\\\${bull}`;\n            if (this.options.pedantic) {\n                bull = isordered ? bull : '[*+-]';\n            }\n            // Get next list item\n            const itemRegex = this.rules.other.listItemRegex(bull);\n            let endsWithBlankLine = false;\n            // Check if current bullet point can start a new List Item\n            while (src) {\n                let endEarly = false;\n                let raw = '';\n                let itemContents = '';\n                if (!(cap = itemRegex.exec(src))) {\n                    break;\n                }\n                if (this.rules.block.hr.test(src)) { // End list if bullet was actually HR (possibly move into itemRegex?)\n                    break;\n                }\n                raw = cap[0];\n                src = src.substring(raw.length);\n                let line = cap[2].split('\\n', 1)[0].replace(this.rules.other.listReplaceTabs, (t) => ' '.repeat(3 * t.length));\n                let nextLine = src.split('\\n', 1)[0];\n                let blankLine = !line.trim();\n                let indent = 0;\n                if (this.options.pedantic) {\n                    indent = 2;\n                    itemContents = line.trimStart();\n                }\n                else if (blankLine) {\n                    indent = cap[1].length + 1;\n                }\n                else {\n                    indent = cap[2].search(this.rules.other.nonSpaceChar); // Find first non-space char\n                    indent = indent > 4 ? 1 : indent; // Treat indented code blocks (> 4 spaces) as having only 1 indent\n                    itemContents = line.slice(indent);\n                    indent += cap[1].length;\n                }\n                if (blankLine && this.rules.other.blankLine.test(nextLine)) { // Items begin with at most one blank line\n                    raw += nextLine + '\\n';\n                    src = src.substring(nextLine.length + 1);\n                    endEarly = true;\n                }\n                if (!endEarly) {\n                    const nextBulletRegex = this.rules.other.nextBulletRegex(indent);\n                    const hrRegex = this.rules.other.hrRegex(indent);\n                    const fencesBeginRegex = this.rules.other.fencesBeginRegex(indent);\n                    const headingBeginRegex = this.rules.other.headingBeginRegex(indent);\n                    const htmlBeginRegex = this.rules.other.htmlBeginRegex(indent);\n                    // Check if following lines should be included in List Item\n                    while (src) {\n                        const rawLine = src.split('\\n', 1)[0];\n                        let nextLineWithoutTabs;\n                        nextLine = rawLine;\n                        // Re-align to follow commonmark nesting rules\n                        if (this.options.pedantic) {\n                            nextLine = nextLine.replace(this.rules.other.listReplaceNesting, '  ');\n                            nextLineWithoutTabs = nextLine;\n                        }\n                        else {\n                            nextLineWithoutTabs = nextLine.replace(this.rules.other.tabCharGlobal, '    ');\n                        }\n                        // End list item if found code fences\n                        if (fencesBeginRegex.test(nextLine)) {\n                            break;\n                        }\n                        // End list item if found start of new heading\n                        if (headingBeginRegex.test(nextLine)) {\n                            break;\n                        }\n                        // End list item if found start of html block\n                        if (htmlBeginRegex.test(nextLine)) {\n                            break;\n                        }\n                        // End list item if found start of new bullet\n                        if (nextBulletRegex.test(nextLine)) {\n                            break;\n                        }\n                        // Horizontal rule found\n                        if (hrRegex.test(nextLine)) {\n                            break;\n                        }\n                        if (nextLineWithoutTabs.search(this.rules.other.nonSpaceChar) >= indent || !nextLine.trim()) { // Dedent if possible\n                            itemContents += '\\n' + nextLineWithoutTabs.slice(indent);\n                        }\n                        else {\n                            // not enough indentation\n                            if (blankLine) {\n                                break;\n                            }\n                            // paragraph continuation unless last line was a different block level element\n                            if (line.replace(this.rules.other.tabCharGlobal, '    ').search(this.rules.other.nonSpaceChar) >= 4) { // indented code block\n                                break;\n                            }\n                            if (fencesBeginRegex.test(line)) {\n                                break;\n                            }\n                            if (headingBeginRegex.test(line)) {\n                                break;\n                            }\n                            if (hrRegex.test(line)) {\n                                break;\n                            }\n                            itemContents += '\\n' + nextLine;\n                        }\n                        if (!blankLine && !nextLine.trim()) { // Check if current line is blank\n                            blankLine = true;\n                        }\n                        raw += rawLine + '\\n';\n                        src = src.substring(rawLine.length + 1);\n                        line = nextLineWithoutTabs.slice(indent);\n                    }\n                }\n                if (!list.loose) {\n                    // If the previous item ended with a blank line, the list is loose\n                    if (endsWithBlankLine) {\n                        list.loose = true;\n                    }\n                    else if (this.rules.other.doubleBlankLine.test(raw)) {\n                        endsWithBlankLine = true;\n                    }\n                }\n                let istask = null;\n                let ischecked;\n                // Check for task list items\n                if (this.options.gfm) {\n                    istask = this.rules.other.listIsTask.exec(itemContents);\n                    if (istask) {\n                        ischecked = istask[0] !== '[ ] ';\n                        itemContents = itemContents.replace(this.rules.other.listReplaceTask, '');\n                    }\n                }\n                list.items.push({\n                    type: 'list_item',\n                    raw,\n                    task: !!istask,\n                    checked: ischecked,\n                    loose: false,\n                    text: itemContents,\n                    tokens: [],\n                });\n                list.raw += raw;\n            }\n            // Do not consume newlines at end of final item. Alternatively, make itemRegex *start* with any newlines to simplify/speed up endsWithBlankLine logic\n            const lastItem = list.items.at(-1);\n            if (lastItem) {\n                lastItem.raw = lastItem.raw.trimEnd();\n                lastItem.text = lastItem.text.trimEnd();\n            }\n            else {\n                // not a list since there were no items\n                return;\n            }\n            list.raw = list.raw.trimEnd();\n            // Item child tokens handled here at end because we needed to have the final item to trim it first\n            for (let i = 0; i < list.items.length; i++) {\n                this.lexer.state.top = false;\n                list.items[i].tokens = this.lexer.blockTokens(list.items[i].text, []);\n                if (!list.loose) {\n                    // Check if list should be loose\n                    const spacers = list.items[i].tokens.filter(t => t.type === 'space');\n                    const hasMultipleLineBreaks = spacers.length > 0 && spacers.some(t => this.rules.other.anyLine.test(t.raw));\n                    list.loose = hasMultipleLineBreaks;\n                }\n            }\n            // Set all items to loose if list is loose\n            if (list.loose) {\n                for (let i = 0; i < list.items.length; i++) {\n                    list.items[i].loose = true;\n                }\n            }\n            return list;\n        }\n    }\n    html(src) {\n        const cap = this.rules.block.html.exec(src);\n        if (cap) {\n            const token = {\n                type: 'html',\n                block: true,\n                raw: cap[0],\n                pre: cap[1] === 'pre' || cap[1] === 'script' || cap[1] === 'style',\n                text: cap[0],\n            };\n            return token;\n        }\n    }\n    def(src) {\n        const cap = this.rules.block.def.exec(src);\n        if (cap) {\n            const tag = cap[1].toLowerCase().replace(this.rules.other.multipleSpaceGlobal, ' ');\n            const href = cap[2] ? cap[2].replace(this.rules.other.hrefBrackets, '$1').replace(this.rules.inline.anyPunctuation, '$1') : '';\n            const title = cap[3] ? cap[3].substring(1, cap[3].length - 1).replace(this.rules.inline.anyPunctuation, '$1') : cap[3];\n            return {\n                type: 'def',\n                tag,\n                raw: cap[0],\n                href,\n                title,\n            };\n        }\n    }\n    table(src) {\n        const cap = this.rules.block.table.exec(src);\n        if (!cap) {\n            return;\n        }\n        if (!this.rules.other.tableDelimiter.test(cap[2])) {\n            // delimiter row must have a pipe (|) or colon (:) otherwise it is a setext heading\n            return;\n        }\n        const headers = splitCells(cap[1]);\n        const aligns = cap[2].replace(this.rules.other.tableAlignChars, '').split('|');\n        const rows = cap[3]?.trim() ? cap[3].replace(this.rules.other.tableRowBlankLine, '').split('\\n') : [];\n        const item = {\n            type: 'table',\n            raw: cap[0],\n            header: [],\n            align: [],\n            rows: [],\n        };\n        if (headers.length !== aligns.length) {\n            // header and align columns must be equal, rows can be different.\n            return;\n        }\n        for (const align of aligns) {\n            if (this.rules.other.tableAlignRight.test(align)) {\n                item.align.push('right');\n            }\n            else if (this.rules.other.tableAlignCenter.test(align)) {\n                item.align.push('center');\n            }\n            else if (this.rules.other.tableAlignLeft.test(align)) {\n                item.align.push('left');\n            }\n            else {\n                item.align.push(null);\n            }\n        }\n        for (let i = 0; i < headers.length; i++) {\n            item.header.push({\n                text: headers[i],\n                tokens: this.lexer.inline(headers[i]),\n                header: true,\n                align: item.align[i],\n            });\n        }\n        for (const row of rows) {\n            item.rows.push(splitCells(row, item.header.length).map((cell, i) => {\n                return {\n                    text: cell,\n                    tokens: this.lexer.inline(cell),\n                    header: false,\n                    align: item.align[i],\n                };\n            }));\n        }\n        return item;\n    }\n    lheading(src) {\n        const cap = this.rules.block.lheading.exec(src);\n        if (cap) {\n            return {\n                type: 'heading',\n                raw: cap[0],\n                depth: cap[2].charAt(0) === '=' ? 1 : 2,\n                text: cap[1],\n                tokens: this.lexer.inline(cap[1]),\n            };\n        }\n    }\n    paragraph(src) {\n        const cap = this.rules.block.paragraph.exec(src);\n        if (cap) {\n            const text = cap[1].charAt(cap[1].length - 1) === '\\n'\n                ? cap[1].slice(0, -1)\n                : cap[1];\n            return {\n                type: 'paragraph',\n                raw: cap[0],\n                text,\n                tokens: this.lexer.inline(text),\n            };\n        }\n    }\n    text(src) {\n        const cap = this.rules.block.text.exec(src);\n        if (cap) {\n            return {\n                type: 'text',\n                raw: cap[0],\n                text: cap[0],\n                tokens: this.lexer.inline(cap[0]),\n            };\n        }\n    }\n    escape(src) {\n        const cap = this.rules.inline.escape.exec(src);\n        if (cap) {\n            return {\n                type: 'escape',\n                raw: cap[0],\n                text: cap[1],\n            };\n        }\n    }\n    tag(src) {\n        const cap = this.rules.inline.tag.exec(src);\n        if (cap) {\n            if (!this.lexer.state.inLink && this.rules.other.startATag.test(cap[0])) {\n                this.lexer.state.inLink = true;\n            }\n            else if (this.lexer.state.inLink && this.rules.other.endATag.test(cap[0])) {\n                this.lexer.state.inLink = false;\n            }\n            if (!this.lexer.state.inRawBlock && this.rules.other.startPreScriptTag.test(cap[0])) {\n                this.lexer.state.inRawBlock = true;\n            }\n            else if (this.lexer.state.inRawBlock && this.rules.other.endPreScriptTag.test(cap[0])) {\n                this.lexer.state.inRawBlock = false;\n            }\n            return {\n                type: 'html',\n                raw: cap[0],\n                inLink: this.lexer.state.inLink,\n                inRawBlock: this.lexer.state.inRawBlock,\n                block: false,\n                text: cap[0],\n            };\n        }\n    }\n    link(src) {\n        const cap = this.rules.inline.link.exec(src);\n        if (cap) {\n            const trimmedUrl = cap[2].trim();\n            if (!this.options.pedantic && this.rules.other.startAngleBracket.test(trimmedUrl)) {\n                // commonmark requires matching angle brackets\n                if (!(this.rules.other.endAngleBracket.test(trimmedUrl))) {\n                    return;\n                }\n                // ending angle bracket cannot be escaped\n                const rtrimSlash = rtrim(trimmedUrl.slice(0, -1), '\\\\');\n                if ((trimmedUrl.length - rtrimSlash.length) % 2 === 0) {\n                    return;\n                }\n            }\n            else {\n                // find closing parenthesis\n                const lastParenIndex = findClosingBracket(cap[2], '()');\n                if (lastParenIndex > -1) {\n                    const start = cap[0].indexOf('!') === 0 ? 5 : 4;\n                    const linkLen = start + cap[1].length + lastParenIndex;\n                    cap[2] = cap[2].substring(0, lastParenIndex);\n                    cap[0] = cap[0].substring(0, linkLen).trim();\n                    cap[3] = '';\n                }\n            }\n            let href = cap[2];\n            let title = '';\n            if (this.options.pedantic) {\n                // split pedantic href and title\n                const link = this.rules.other.pedanticHrefTitle.exec(href);\n                if (link) {\n                    href = link[1];\n                    title = link[3];\n                }\n            }\n            else {\n                title = cap[3] ? cap[3].slice(1, -1) : '';\n            }\n            href = href.trim();\n            if (this.rules.other.startAngleBracket.test(href)) {\n                if (this.options.pedantic && !(this.rules.other.endAngleBracket.test(trimmedUrl))) {\n                    // pedantic allows starting angle bracket without ending angle bracket\n                    href = href.slice(1);\n                }\n                else {\n                    href = href.slice(1, -1);\n                }\n            }\n            return outputLink(cap, {\n                href: href ? href.replace(this.rules.inline.anyPunctuation, '$1') : href,\n                title: title ? title.replace(this.rules.inline.anyPunctuation, '$1') : title,\n            }, cap[0], this.lexer, this.rules);\n        }\n    }\n    reflink(src, links) {\n        let cap;\n        if ((cap = this.rules.inline.reflink.exec(src))\n            || (cap = this.rules.inline.nolink.exec(src))) {\n            const linkString = (cap[2] || cap[1]).replace(this.rules.other.multipleSpaceGlobal, ' ');\n            const link = links[linkString.toLowerCase()];\n            if (!link) {\n                const text = cap[0].charAt(0);\n                return {\n                    type: 'text',\n                    raw: text,\n                    text,\n                };\n            }\n            return outputLink(cap, link, cap[0], this.lexer, this.rules);\n        }\n    }\n    emStrong(src, maskedSrc, prevChar = '') {\n        let match = this.rules.inline.emStrongLDelim.exec(src);\n        if (!match)\n            return;\n        // _ can't be between two alphanumerics. \\p{L}\\p{N} includes non-english alphabet/numbers as well\n        if (match[3] && prevChar.match(this.rules.other.unicodeAlphaNumeric))\n            return;\n        const nextChar = match[1] || match[2] || '';\n        if (!nextChar || !prevChar || this.rules.inline.punctuation.exec(prevChar)) {\n            // unicode Regex counts emoji as 1 char; spread into array for proper count (used multiple times below)\n            const lLength = [...match[0]].length - 1;\n            let rDelim, rLength, delimTotal = lLength, midDelimTotal = 0;\n            const endReg = match[0][0] === '*' ? this.rules.inline.emStrongRDelimAst : this.rules.inline.emStrongRDelimUnd;\n            endReg.lastIndex = 0;\n            // Clip maskedSrc to same section of string as src (move to lexer?)\n            maskedSrc = maskedSrc.slice(-1 * src.length + lLength);\n            while ((match = endReg.exec(maskedSrc)) != null) {\n                rDelim = match[1] || match[2] || match[3] || match[4] || match[5] || match[6];\n                if (!rDelim)\n                    continue; // skip single * in __abc*abc__\n                rLength = [...rDelim].length;\n                if (match[3] || match[4]) { // found another Left Delim\n                    delimTotal += rLength;\n                    continue;\n                }\n                else if (match[5] || match[6]) { // either Left or Right Delim\n                    if (lLength % 3 && !((lLength + rLength) % 3)) {\n                        midDelimTotal += rLength;\n                        continue; // CommonMark Emphasis Rules 9-10\n                    }\n                }\n                delimTotal -= rLength;\n                if (delimTotal > 0)\n                    continue; // Haven't found enough closing delimiters\n                // Remove extra characters. *a*** -> *a*\n                rLength = Math.min(rLength, rLength + delimTotal + midDelimTotal);\n                // char length can be >1 for unicode characters;\n                const lastCharLength = [...match[0]][0].length;\n                const raw = src.slice(0, lLength + match.index + lastCharLength + rLength);\n                // Create `em` if smallest delimiter has odd char count. *a***\n                if (Math.min(lLength, rLength) % 2) {\n                    const text = raw.slice(1, -1);\n                    return {\n                        type: 'em',\n                        raw,\n                        text,\n                        tokens: this.lexer.inlineTokens(text),\n                    };\n                }\n                // Create 'strong' if smallest delimiter has even char count. **a***\n                const text = raw.slice(2, -2);\n                return {\n                    type: 'strong',\n                    raw,\n                    text,\n                    tokens: this.lexer.inlineTokens(text),\n                };\n            }\n        }\n    }\n    codespan(src) {\n        const cap = this.rules.inline.code.exec(src);\n        if (cap) {\n            let text = cap[2].replace(this.rules.other.newLineCharGlobal, ' ');\n            const hasNonSpaceChars = this.rules.other.nonSpaceChar.test(text);\n            const hasSpaceCharsOnBothEnds = this.rules.other.startingSpaceChar.test(text) && this.rules.other.endingSpaceChar.test(text);\n            if (hasNonSpaceChars && hasSpaceCharsOnBothEnds) {\n                text = text.substring(1, text.length - 1);\n            }\n            return {\n                type: 'codespan',\n                raw: cap[0],\n                text,\n            };\n        }\n    }\n    br(src) {\n        const cap = this.rules.inline.br.exec(src);\n        if (cap) {\n            return {\n                type: 'br',\n                raw: cap[0],\n            };\n        }\n    }\n    del(src) {\n        const cap = this.rules.inline.del.exec(src);\n        if (cap) {\n            return {\n                type: 'del',\n                raw: cap[0],\n                text: cap[2],\n                tokens: this.lexer.inlineTokens(cap[2]),\n            };\n        }\n    }\n    autolink(src) {\n        const cap = this.rules.inline.autolink.exec(src);\n        if (cap) {\n            let text, href;\n            if (cap[2] === '@') {\n                text = cap[1];\n                href = 'mailto:' + text;\n            }\n            else {\n                text = cap[1];\n                href = text;\n            }\n            return {\n                type: 'link',\n                raw: cap[0],\n                text,\n                href,\n                tokens: [\n                    {\n                        type: 'text',\n                        raw: text,\n                        text,\n                    },\n                ],\n            };\n        }\n    }\n    url(src) {\n        let cap;\n        if (cap = this.rules.inline.url.exec(src)) {\n            let text, href;\n            if (cap[2] === '@') {\n                text = cap[0];\n                href = 'mailto:' + text;\n            }\n            else {\n                // do extended autolink path validation\n                let prevCapZero;\n                do {\n                    prevCapZero = cap[0];\n                    cap[0] = this.rules.inline._backpedal.exec(cap[0])?.[0] ?? '';\n                } while (prevCapZero !== cap[0]);\n                text = cap[0];\n                if (cap[1] === 'www.') {\n                    href = 'http://' + cap[0];\n                }\n                else {\n                    href = cap[0];\n                }\n            }\n            return {\n                type: 'link',\n                raw: cap[0],\n                text,\n                href,\n                tokens: [\n                    {\n                        type: 'text',\n                        raw: text,\n                        text,\n                    },\n                ],\n            };\n        }\n    }\n    inlineText(src) {\n        const cap = this.rules.inline.text.exec(src);\n        if (cap) {\n            const escaped = this.lexer.state.inRawBlock;\n            return {\n                type: 'text',\n                raw: cap[0],\n                text: cap[0],\n                escaped,\n            };\n        }\n    }\n}\n\n/**\n * Block Lexer\n */\nclass _Lexer {\n    tokens;\n    options;\n    state;\n    tokenizer;\n    inlineQueue;\n    constructor(options) {\n        // TokenList cannot be created in one go\n        this.tokens = [];\n        this.tokens.links = Object.create(null);\n        this.options = options || _defaults;\n        this.options.tokenizer = this.options.tokenizer || new _Tokenizer();\n        this.tokenizer = this.options.tokenizer;\n        this.tokenizer.options = this.options;\n        this.tokenizer.lexer = this;\n        this.inlineQueue = [];\n        this.state = {\n            inLink: false,\n            inRawBlock: false,\n            top: true,\n        };\n        const rules = {\n            other,\n            block: block.normal,\n            inline: inline.normal,\n        };\n        if (this.options.pedantic) {\n            rules.block = block.pedantic;\n            rules.inline = inline.pedantic;\n        }\n        else if (this.options.gfm) {\n            rules.block = block.gfm;\n            if (this.options.breaks) {\n                rules.inline = inline.breaks;\n            }\n            else {\n                rules.inline = inline.gfm;\n            }\n        }\n        this.tokenizer.rules = rules;\n    }\n    /**\n     * Expose Rules\n     */\n    static get rules() {\n        return {\n            block,\n            inline,\n        };\n    }\n    /**\n     * Static Lex Method\n     */\n    static lex(src, options) {\n        const lexer = new _Lexer(options);\n        return lexer.lex(src);\n    }\n    /**\n     * Static Lex Inline Method\n     */\n    static lexInline(src, options) {\n        const lexer = new _Lexer(options);\n        return lexer.inlineTokens(src);\n    }\n    /**\n     * Preprocessing\n     */\n    lex(src) {\n        src = src.replace(other.carriageReturn, '\\n');\n        this.blockTokens(src, this.tokens);\n        for (let i = 0; i < this.inlineQueue.length; i++) {\n            const next = this.inlineQueue[i];\n            this.inlineTokens(next.src, next.tokens);\n        }\n        this.inlineQueue = [];\n        return this.tokens;\n    }\n    blockTokens(src, tokens = [], lastParagraphClipped = false) {\n        if (this.options.pedantic) {\n            src = src.replace(other.tabCharGlobal, '    ').replace(other.spaceLine, '');\n        }\n        while (src) {\n            let token;\n            if (this.options.extensions?.block?.some((extTokenizer) => {\n                if (token = extTokenizer.call({ lexer: this }, src, tokens)) {\n                    src = src.substring(token.raw.length);\n                    tokens.push(token);\n                    return true;\n                }\n                return false;\n            })) {\n                continue;\n            }\n            // newline\n            if (token = this.tokenizer.space(src)) {\n                src = src.substring(token.raw.length);\n                const lastToken = tokens.at(-1);\n                if (token.raw.length === 1 && lastToken !== undefined) {\n                    // if there's a single \\n as a spacer, it's terminating the last line,\n                    // so move it there so that we don't get unnecessary paragraph tags\n                    lastToken.raw += '\\n';\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            // code\n            if (token = this.tokenizer.code(src)) {\n                src = src.substring(token.raw.length);\n                const lastToken = tokens.at(-1);\n                // An indented code block cannot interrupt a paragraph.\n                if (lastToken?.type === 'paragraph' || lastToken?.type === 'text') {\n                    lastToken.raw += '\\n' + token.raw;\n                    lastToken.text += '\\n' + token.text;\n                    this.inlineQueue.at(-1).src = lastToken.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            // fences\n            if (token = this.tokenizer.fences(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // heading\n            if (token = this.tokenizer.heading(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // hr\n            if (token = this.tokenizer.hr(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // blockquote\n            if (token = this.tokenizer.blockquote(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // list\n            if (token = this.tokenizer.list(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // html\n            if (token = this.tokenizer.html(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // def\n            if (token = this.tokenizer.def(src)) {\n                src = src.substring(token.raw.length);\n                const lastToken = tokens.at(-1);\n                if (lastToken?.type === 'paragraph' || lastToken?.type === 'text') {\n                    lastToken.raw += '\\n' + token.raw;\n                    lastToken.text += '\\n' + token.raw;\n                    this.inlineQueue.at(-1).src = lastToken.text;\n                }\n                else if (!this.tokens.links[token.tag]) {\n                    this.tokens.links[token.tag] = {\n                        href: token.href,\n                        title: token.title,\n                    };\n                }\n                continue;\n            }\n            // table (gfm)\n            if (token = this.tokenizer.table(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // lheading\n            if (token = this.tokenizer.lheading(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // top-level paragraph\n            // prevent paragraph consuming extensions by clipping 'src' to extension start\n            let cutSrc = src;\n            if (this.options.extensions?.startBlock) {\n                let startIndex = Infinity;\n                const tempSrc = src.slice(1);\n                let tempStart;\n                this.options.extensions.startBlock.forEach((getStartIndex) => {\n                    tempStart = getStartIndex.call({ lexer: this }, tempSrc);\n                    if (typeof tempStart === 'number' && tempStart >= 0) {\n                        startIndex = Math.min(startIndex, tempStart);\n                    }\n                });\n                if (startIndex < Infinity && startIndex >= 0) {\n                    cutSrc = src.substring(0, startIndex + 1);\n                }\n            }\n            if (this.state.top && (token = this.tokenizer.paragraph(cutSrc))) {\n                const lastToken = tokens.at(-1);\n                if (lastParagraphClipped && lastToken?.type === 'paragraph') {\n                    lastToken.raw += '\\n' + token.raw;\n                    lastToken.text += '\\n' + token.text;\n                    this.inlineQueue.pop();\n                    this.inlineQueue.at(-1).src = lastToken.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                lastParagraphClipped = cutSrc.length !== src.length;\n                src = src.substring(token.raw.length);\n                continue;\n            }\n            // text\n            if (token = this.tokenizer.text(src)) {\n                src = src.substring(token.raw.length);\n                const lastToken = tokens.at(-1);\n                if (lastToken?.type === 'text') {\n                    lastToken.raw += '\\n' + token.raw;\n                    lastToken.text += '\\n' + token.text;\n                    this.inlineQueue.pop();\n                    this.inlineQueue.at(-1).src = lastToken.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            if (src) {\n                const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n                if (this.options.silent) {\n                    console.error(errMsg);\n                    break;\n                }\n                else {\n                    throw new Error(errMsg);\n                }\n            }\n        }\n        this.state.top = true;\n        return tokens;\n    }\n    inline(src, tokens = []) {\n        this.inlineQueue.push({ src, tokens });\n        return tokens;\n    }\n    /**\n     * Lexing/Compiling\n     */\n    inlineTokens(src, tokens = []) {\n        // String with links masked to avoid interference with em and strong\n        let maskedSrc = src;\n        let match = null;\n        // Mask out reflinks\n        if (this.tokens.links) {\n            const links = Object.keys(this.tokens.links);\n            if (links.length > 0) {\n                while ((match = this.tokenizer.rules.inline.reflinkSearch.exec(maskedSrc)) != null) {\n                    if (links.includes(match[0].slice(match[0].lastIndexOf('[') + 1, -1))) {\n                        maskedSrc = maskedSrc.slice(0, match.index)\n                            + '[' + 'a'.repeat(match[0].length - 2) + ']'\n                            + maskedSrc.slice(this.tokenizer.rules.inline.reflinkSearch.lastIndex);\n                    }\n                }\n            }\n        }\n        // Mask out other blocks\n        while ((match = this.tokenizer.rules.inline.blockSkip.exec(maskedSrc)) != null) {\n            maskedSrc = maskedSrc.slice(0, match.index) + '[' + 'a'.repeat(match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.blockSkip.lastIndex);\n        }\n        // Mask out escaped characters\n        while ((match = this.tokenizer.rules.inline.anyPunctuation.exec(maskedSrc)) != null) {\n            maskedSrc = maskedSrc.slice(0, match.index) + '++' + maskedSrc.slice(this.tokenizer.rules.inline.anyPunctuation.lastIndex);\n        }\n        let keepPrevChar = false;\n        let prevChar = '';\n        while (src) {\n            if (!keepPrevChar) {\n                prevChar = '';\n            }\n            keepPrevChar = false;\n            let token;\n            // extensions\n            if (this.options.extensions?.inline?.some((extTokenizer) => {\n                if (token = extTokenizer.call({ lexer: this }, src, tokens)) {\n                    src = src.substring(token.raw.length);\n                    tokens.push(token);\n                    return true;\n                }\n                return false;\n            })) {\n                continue;\n            }\n            // escape\n            if (token = this.tokenizer.escape(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // tag\n            if (token = this.tokenizer.tag(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // link\n            if (token = this.tokenizer.link(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // reflink, nolink\n            if (token = this.tokenizer.reflink(src, this.tokens.links)) {\n                src = src.substring(token.raw.length);\n                const lastToken = tokens.at(-1);\n                if (token.type === 'text' && lastToken?.type === 'text') {\n                    lastToken.raw += token.raw;\n                    lastToken.text += token.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            // em & strong\n            if (token = this.tokenizer.emStrong(src, maskedSrc, prevChar)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // code\n            if (token = this.tokenizer.codespan(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // br\n            if (token = this.tokenizer.br(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // del (gfm)\n            if (token = this.tokenizer.del(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // autolink\n            if (token = this.tokenizer.autolink(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // url (gfm)\n            if (!this.state.inLink && (token = this.tokenizer.url(src))) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // text\n            // prevent inlineText consuming extensions by clipping 'src' to extension start\n            let cutSrc = src;\n            if (this.options.extensions?.startInline) {\n                let startIndex = Infinity;\n                const tempSrc = src.slice(1);\n                let tempStart;\n                this.options.extensions.startInline.forEach((getStartIndex) => {\n                    tempStart = getStartIndex.call({ lexer: this }, tempSrc);\n                    if (typeof tempStart === 'number' && tempStart >= 0) {\n                        startIndex = Math.min(startIndex, tempStart);\n                    }\n                });\n                if (startIndex < Infinity && startIndex >= 0) {\n                    cutSrc = src.substring(0, startIndex + 1);\n                }\n            }\n            if (token = this.tokenizer.inlineText(cutSrc)) {\n                src = src.substring(token.raw.length);\n                if (token.raw.slice(-1) !== '_') { // Track prevChar before string of ____ started\n                    prevChar = token.raw.slice(-1);\n                }\n                keepPrevChar = true;\n                const lastToken = tokens.at(-1);\n                if (lastToken?.type === 'text') {\n                    lastToken.raw += token.raw;\n                    lastToken.text += token.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            if (src) {\n                const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n                if (this.options.silent) {\n                    console.error(errMsg);\n                    break;\n                }\n                else {\n                    throw new Error(errMsg);\n                }\n            }\n        }\n        return tokens;\n    }\n}\n\n/**\n * Renderer\n */\nclass _Renderer {\n    options;\n    parser; // set by the parser\n    constructor(options) {\n        this.options = options || _defaults;\n    }\n    space(token) {\n        return '';\n    }\n    code({ text, lang, escaped }) {\n        const langString = (lang || '').match(other.notSpaceStart)?.[0];\n        const code = text.replace(other.endingNewline, '') + '\\n';\n        if (!langString) {\n            return '<pre><code>'\n                + (escaped ? code : escape(code, true))\n                + '</code></pre>\\n';\n        }\n        return '<pre><code class=\"language-'\n            + escape(langString)\n            + '\">'\n            + (escaped ? code : escape(code, true))\n            + '</code></pre>\\n';\n    }\n    blockquote({ tokens }) {\n        const body = this.parser.parse(tokens);\n        return `<blockquote>\\n${body}</blockquote>\\n`;\n    }\n    html({ text }) {\n        return text;\n    }\n    heading({ tokens, depth }) {\n        return `<h${depth}>${this.parser.parseInline(tokens)}</h${depth}>\\n`;\n    }\n    hr(token) {\n        return '<hr>\\n';\n    }\n    list(token) {\n        const ordered = token.ordered;\n        const start = token.start;\n        let body = '';\n        for (let j = 0; j < token.items.length; j++) {\n            const item = token.items[j];\n            body += this.listitem(item);\n        }\n        const type = ordered ? 'ol' : 'ul';\n        const startAttr = (ordered && start !== 1) ? (' start=\"' + start + '\"') : '';\n        return '<' + type + startAttr + '>\\n' + body + '</' + type + '>\\n';\n    }\n    listitem(item) {\n        let itemBody = '';\n        if (item.task) {\n            const checkbox = this.checkbox({ checked: !!item.checked });\n            if (item.loose) {\n                if (item.tokens[0]?.type === 'paragraph') {\n                    item.tokens[0].text = checkbox + ' ' + item.tokens[0].text;\n                    if (item.tokens[0].tokens && item.tokens[0].tokens.length > 0 && item.tokens[0].tokens[0].type === 'text') {\n                        item.tokens[0].tokens[0].text = checkbox + ' ' + escape(item.tokens[0].tokens[0].text);\n                        item.tokens[0].tokens[0].escaped = true;\n                    }\n                }\n                else {\n                    item.tokens.unshift({\n                        type: 'text',\n                        raw: checkbox + ' ',\n                        text: checkbox + ' ',\n                        escaped: true,\n                    });\n                }\n            }\n            else {\n                itemBody += checkbox + ' ';\n            }\n        }\n        itemBody += this.parser.parse(item.tokens, !!item.loose);\n        return `<li>${itemBody}</li>\\n`;\n    }\n    checkbox({ checked }) {\n        return '<input '\n            + (checked ? 'checked=\"\" ' : '')\n            + 'disabled=\"\" type=\"checkbox\">';\n    }\n    paragraph({ tokens }) {\n        return `<p>${this.parser.parseInline(tokens)}</p>\\n`;\n    }\n    table(token) {\n        let header = '';\n        // header\n        let cell = '';\n        for (let j = 0; j < token.header.length; j++) {\n            cell += this.tablecell(token.header[j]);\n        }\n        header += this.tablerow({ text: cell });\n        let body = '';\n        for (let j = 0; j < token.rows.length; j++) {\n            const row = token.rows[j];\n            cell = '';\n            for (let k = 0; k < row.length; k++) {\n                cell += this.tablecell(row[k]);\n            }\n            body += this.tablerow({ text: cell });\n        }\n        if (body)\n            body = `<tbody>${body}</tbody>`;\n        return '<table>\\n'\n            + '<thead>\\n'\n            + header\n            + '</thead>\\n'\n            + body\n            + '</table>\\n';\n    }\n    tablerow({ text }) {\n        return `<tr>\\n${text}</tr>\\n`;\n    }\n    tablecell(token) {\n        const content = this.parser.parseInline(token.tokens);\n        const type = token.header ? 'th' : 'td';\n        const tag = token.align\n            ? `<${type} align=\"${token.align}\">`\n            : `<${type}>`;\n        return tag + content + `</${type}>\\n`;\n    }\n    /**\n     * span level renderer\n     */\n    strong({ tokens }) {\n        return `<strong>${this.parser.parseInline(tokens)}</strong>`;\n    }\n    em({ tokens }) {\n        return `<em>${this.parser.parseInline(tokens)}</em>`;\n    }\n    codespan({ text }) {\n        return `<code>${escape(text, true)}</code>`;\n    }\n    br(token) {\n        return '<br>';\n    }\n    del({ tokens }) {\n        return `<del>${this.parser.parseInline(tokens)}</del>`;\n    }\n    link({ href, title, tokens }) {\n        const text = this.parser.parseInline(tokens);\n        const cleanHref = cleanUrl(href);\n        if (cleanHref === null) {\n            return text;\n        }\n        href = cleanHref;\n        let out = '<a href=\"' + href + '\"';\n        if (title) {\n            out += ' title=\"' + (escape(title)) + '\"';\n        }\n        out += '>' + text + '</a>';\n        return out;\n    }\n    image({ href, title, text }) {\n        const cleanHref = cleanUrl(href);\n        if (cleanHref === null) {\n            return escape(text);\n        }\n        href = cleanHref;\n        let out = `<img src=\"${href}\" alt=\"${text}\"`;\n        if (title) {\n            out += ` title=\"${escape(title)}\"`;\n        }\n        out += '>';\n        return out;\n    }\n    text(token) {\n        return 'tokens' in token && token.tokens\n            ? this.parser.parseInline(token.tokens)\n            : ('escaped' in token && token.escaped ? token.text : escape(token.text));\n    }\n}\n\n/**\n * TextRenderer\n * returns only the textual part of the token\n */\nclass _TextRenderer {\n    // no need for block level renderers\n    strong({ text }) {\n        return text;\n    }\n    em({ text }) {\n        return text;\n    }\n    codespan({ text }) {\n        return text;\n    }\n    del({ text }) {\n        return text;\n    }\n    html({ text }) {\n        return text;\n    }\n    text({ text }) {\n        return text;\n    }\n    link({ text }) {\n        return '' + text;\n    }\n    image({ text }) {\n        return '' + text;\n    }\n    br() {\n        return '';\n    }\n}\n\n/**\n * Parsing & Compiling\n */\nclass _Parser {\n    options;\n    renderer;\n    textRenderer;\n    constructor(options) {\n        this.options = options || _defaults;\n        this.options.renderer = this.options.renderer || new _Renderer();\n        this.renderer = this.options.renderer;\n        this.renderer.options = this.options;\n        this.renderer.parser = this;\n        this.textRenderer = new _TextRenderer();\n    }\n    /**\n     * Static Parse Method\n     */\n    static parse(tokens, options) {\n        const parser = new _Parser(options);\n        return parser.parse(tokens);\n    }\n    /**\n     * Static Parse Inline Method\n     */\n    static parseInline(tokens, options) {\n        const parser = new _Parser(options);\n        return parser.parseInline(tokens);\n    }\n    /**\n     * Parse Loop\n     */\n    parse(tokens, top = true) {\n        let out = '';\n        for (let i = 0; i < tokens.length; i++) {\n            const anyToken = tokens[i];\n            // Run any renderer extensions\n            if (this.options.extensions?.renderers?.[anyToken.type]) {\n                const genericToken = anyToken;\n                const ret = this.options.extensions.renderers[genericToken.type].call({ parser: this }, genericToken);\n                if (ret !== false || !['space', 'hr', 'heading', 'code', 'table', 'blockquote', 'list', 'html', 'paragraph', 'text'].includes(genericToken.type)) {\n                    out += ret || '';\n                    continue;\n                }\n            }\n            const token = anyToken;\n            switch (token.type) {\n                case 'space': {\n                    out += this.renderer.space(token);\n                    continue;\n                }\n                case 'hr': {\n                    out += this.renderer.hr(token);\n                    continue;\n                }\n                case 'heading': {\n                    out += this.renderer.heading(token);\n                    continue;\n                }\n                case 'code': {\n                    out += this.renderer.code(token);\n                    continue;\n                }\n                case 'table': {\n                    out += this.renderer.table(token);\n                    continue;\n                }\n                case 'blockquote': {\n                    out += this.renderer.blockquote(token);\n                    continue;\n                }\n                case 'list': {\n                    out += this.renderer.list(token);\n                    continue;\n                }\n                case 'html': {\n                    out += this.renderer.html(token);\n                    continue;\n                }\n                case 'paragraph': {\n                    out += this.renderer.paragraph(token);\n                    continue;\n                }\n                case 'text': {\n                    let textToken = token;\n                    let body = this.renderer.text(textToken);\n                    while (i + 1 < tokens.length && tokens[i + 1].type === 'text') {\n                        textToken = tokens[++i];\n                        body += '\\n' + this.renderer.text(textToken);\n                    }\n                    if (top) {\n                        out += this.renderer.paragraph({\n                            type: 'paragraph',\n                            raw: body,\n                            text: body,\n                            tokens: [{ type: 'text', raw: body, text: body, escaped: true }],\n                        });\n                    }\n                    else {\n                        out += body;\n                    }\n                    continue;\n                }\n                default: {\n                    const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n                    if (this.options.silent) {\n                        console.error(errMsg);\n                        return '';\n                    }\n                    else {\n                        throw new Error(errMsg);\n                    }\n                }\n            }\n        }\n        return out;\n    }\n    /**\n     * Parse Inline Tokens\n     */\n    parseInline(tokens, renderer = this.renderer) {\n        let out = '';\n        for (let i = 0; i < tokens.length; i++) {\n            const anyToken = tokens[i];\n            // Run any renderer extensions\n            if (this.options.extensions?.renderers?.[anyToken.type]) {\n                const ret = this.options.extensions.renderers[anyToken.type].call({ parser: this }, anyToken);\n                if (ret !== false || !['escape', 'html', 'link', 'image', 'strong', 'em', 'codespan', 'br', 'del', 'text'].includes(anyToken.type)) {\n                    out += ret || '';\n                    continue;\n                }\n            }\n            const token = anyToken;\n            switch (token.type) {\n                case 'escape': {\n                    out += renderer.text(token);\n                    break;\n                }\n                case 'html': {\n                    out += renderer.html(token);\n                    break;\n                }\n                case 'link': {\n                    out += renderer.link(token);\n                    break;\n                }\n                case 'image': {\n                    out += renderer.image(token);\n                    break;\n                }\n                case 'strong': {\n                    out += renderer.strong(token);\n                    break;\n                }\n                case 'em': {\n                    out += renderer.em(token);\n                    break;\n                }\n                case 'codespan': {\n                    out += renderer.codespan(token);\n                    break;\n                }\n                case 'br': {\n                    out += renderer.br(token);\n                    break;\n                }\n                case 'del': {\n                    out += renderer.del(token);\n                    break;\n                }\n                case 'text': {\n                    out += renderer.text(token);\n                    break;\n                }\n                default: {\n                    const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n                    if (this.options.silent) {\n                        console.error(errMsg);\n                        return '';\n                    }\n                    else {\n                        throw new Error(errMsg);\n                    }\n                }\n            }\n        }\n        return out;\n    }\n}\n\nclass _Hooks {\n    options;\n    block;\n    constructor(options) {\n        this.options = options || _defaults;\n    }\n    static passThroughHooks = new Set([\n        'preprocess',\n        'postprocess',\n        'processAllTokens',\n    ]);\n    /**\n     * Process markdown before marked\n     */\n    preprocess(markdown) {\n        return markdown;\n    }\n    /**\n     * Process HTML after marked is finished\n     */\n    postprocess(html) {\n        return html;\n    }\n    /**\n     * Process all tokens before walk tokens\n     */\n    processAllTokens(tokens) {\n        return tokens;\n    }\n    /**\n     * Provide function to tokenize markdown\n     */\n    provideLexer() {\n        return this.block ? _Lexer.lex : _Lexer.lexInline;\n    }\n    /**\n     * Provide function to parse tokens\n     */\n    provideParser() {\n        return this.block ? _Parser.parse : _Parser.parseInline;\n    }\n}\n\nclass Marked {\n    defaults = _getDefaults();\n    options = this.setOptions;\n    parse = this.parseMarkdown(true);\n    parseInline = this.parseMarkdown(false);\n    Parser = _Parser;\n    Renderer = _Renderer;\n    TextRenderer = _TextRenderer;\n    Lexer = _Lexer;\n    Tokenizer = _Tokenizer;\n    Hooks = _Hooks;\n    constructor(...args) {\n        this.use(...args);\n    }\n    /**\n     * Run callback for every token\n     */\n    walkTokens(tokens, callback) {\n        let values = [];\n        for (const token of tokens) {\n            values = values.concat(callback.call(this, token));\n            switch (token.type) {\n                case 'table': {\n                    const tableToken = token;\n                    for (const cell of tableToken.header) {\n                        values = values.concat(this.walkTokens(cell.tokens, callback));\n                    }\n                    for (const row of tableToken.rows) {\n                        for (const cell of row) {\n                            values = values.concat(this.walkTokens(cell.tokens, callback));\n                        }\n                    }\n                    break;\n                }\n                case 'list': {\n                    const listToken = token;\n                    values = values.concat(this.walkTokens(listToken.items, callback));\n                    break;\n                }\n                default: {\n                    const genericToken = token;\n                    if (this.defaults.extensions?.childTokens?.[genericToken.type]) {\n                        this.defaults.extensions.childTokens[genericToken.type].forEach((childTokens) => {\n                            const tokens = genericToken[childTokens].flat(Infinity);\n                            values = values.concat(this.walkTokens(tokens, callback));\n                        });\n                    }\n                    else if (genericToken.tokens) {\n                        values = values.concat(this.walkTokens(genericToken.tokens, callback));\n                    }\n                }\n            }\n        }\n        return values;\n    }\n    use(...args) {\n        const extensions = this.defaults.extensions || { renderers: {}, childTokens: {} };\n        args.forEach((pack) => {\n            // copy options to new object\n            const opts = { ...pack };\n            // set async to true if it was set to true before\n            opts.async = this.defaults.async || opts.async || false;\n            // ==-- Parse \"addon\" extensions --== //\n            if (pack.extensions) {\n                pack.extensions.forEach((ext) => {\n                    if (!ext.name) {\n                        throw new Error('extension name required');\n                    }\n                    if ('renderer' in ext) { // Renderer extensions\n                        const prevRenderer = extensions.renderers[ext.name];\n                        if (prevRenderer) {\n                            // Replace extension with func to run new extension but fall back if false\n                            extensions.renderers[ext.name] = function (...args) {\n                                let ret = ext.renderer.apply(this, args);\n                                if (ret === false) {\n                                    ret = prevRenderer.apply(this, args);\n                                }\n                                return ret;\n                            };\n                        }\n                        else {\n                            extensions.renderers[ext.name] = ext.renderer;\n                        }\n                    }\n                    if ('tokenizer' in ext) { // Tokenizer Extensions\n                        if (!ext.level || (ext.level !== 'block' && ext.level !== 'inline')) {\n                            throw new Error(\"extension level must be 'block' or 'inline'\");\n                        }\n                        const extLevel = extensions[ext.level];\n                        if (extLevel) {\n                            extLevel.unshift(ext.tokenizer);\n                        }\n                        else {\n                            extensions[ext.level] = [ext.tokenizer];\n                        }\n                        if (ext.start) { // Function to check for start of token\n                            if (ext.level === 'block') {\n                                if (extensions.startBlock) {\n                                    extensions.startBlock.push(ext.start);\n                                }\n                                else {\n                                    extensions.startBlock = [ext.start];\n                                }\n                            }\n                            else if (ext.level === 'inline') {\n                                if (extensions.startInline) {\n                                    extensions.startInline.push(ext.start);\n                                }\n                                else {\n                                    extensions.startInline = [ext.start];\n                                }\n                            }\n                        }\n                    }\n                    if ('childTokens' in ext && ext.childTokens) { // Child tokens to be visited by walkTokens\n                        extensions.childTokens[ext.name] = ext.childTokens;\n                    }\n                });\n                opts.extensions = extensions;\n            }\n            // ==-- Parse \"overwrite\" extensions --== //\n            if (pack.renderer) {\n                const renderer = this.defaults.renderer || new _Renderer(this.defaults);\n                for (const prop in pack.renderer) {\n                    if (!(prop in renderer)) {\n                        throw new Error(`renderer '${prop}' does not exist`);\n                    }\n                    if (['options', 'parser'].includes(prop)) {\n                        // ignore options property\n                        continue;\n                    }\n                    const rendererProp = prop;\n                    const rendererFunc = pack.renderer[rendererProp];\n                    const prevRenderer = renderer[rendererProp];\n                    // Replace renderer with func to run extension, but fall back if false\n                    renderer[rendererProp] = (...args) => {\n                        let ret = rendererFunc.apply(renderer, args);\n                        if (ret === false) {\n                            ret = prevRenderer.apply(renderer, args);\n                        }\n                        return ret || '';\n                    };\n                }\n                opts.renderer = renderer;\n            }\n            if (pack.tokenizer) {\n                const tokenizer = this.defaults.tokenizer || new _Tokenizer(this.defaults);\n                for (const prop in pack.tokenizer) {\n                    if (!(prop in tokenizer)) {\n                        throw new Error(`tokenizer '${prop}' does not exist`);\n                    }\n                    if (['options', 'rules', 'lexer'].includes(prop)) {\n                        // ignore options, rules, and lexer properties\n                        continue;\n                    }\n                    const tokenizerProp = prop;\n                    const tokenizerFunc = pack.tokenizer[tokenizerProp];\n                    const prevTokenizer = tokenizer[tokenizerProp];\n                    // Replace tokenizer with func to run extension, but fall back if false\n                    // @ts-expect-error cannot type tokenizer function dynamically\n                    tokenizer[tokenizerProp] = (...args) => {\n                        let ret = tokenizerFunc.apply(tokenizer, args);\n                        if (ret === false) {\n                            ret = prevTokenizer.apply(tokenizer, args);\n                        }\n                        return ret;\n                    };\n                }\n                opts.tokenizer = tokenizer;\n            }\n            // ==-- Parse Hooks extensions --== //\n            if (pack.hooks) {\n                const hooks = this.defaults.hooks || new _Hooks();\n                for (const prop in pack.hooks) {\n                    if (!(prop in hooks)) {\n                        throw new Error(`hook '${prop}' does not exist`);\n                    }\n                    if (['options', 'block'].includes(prop)) {\n                        // ignore options and block properties\n                        continue;\n                    }\n                    const hooksProp = prop;\n                    const hooksFunc = pack.hooks[hooksProp];\n                    const prevHook = hooks[hooksProp];\n                    if (_Hooks.passThroughHooks.has(prop)) {\n                        // @ts-expect-error cannot type hook function dynamically\n                        hooks[hooksProp] = (arg) => {\n                            if (this.defaults.async) {\n                                return Promise.resolve(hooksFunc.call(hooks, arg)).then(ret => {\n                                    return prevHook.call(hooks, ret);\n                                });\n                            }\n                            const ret = hooksFunc.call(hooks, arg);\n                            return prevHook.call(hooks, ret);\n                        };\n                    }\n                    else {\n                        // @ts-expect-error cannot type hook function dynamically\n                        hooks[hooksProp] = (...args) => {\n                            let ret = hooksFunc.apply(hooks, args);\n                            if (ret === false) {\n                                ret = prevHook.apply(hooks, args);\n                            }\n                            return ret;\n                        };\n                    }\n                }\n                opts.hooks = hooks;\n            }\n            // ==-- Parse WalkTokens extensions --== //\n            if (pack.walkTokens) {\n                const walkTokens = this.defaults.walkTokens;\n                const packWalktokens = pack.walkTokens;\n                opts.walkTokens = function (token) {\n                    let values = [];\n                    values.push(packWalktokens.call(this, token));\n                    if (walkTokens) {\n                        values = values.concat(walkTokens.call(this, token));\n                    }\n                    return values;\n                };\n            }\n            this.defaults = { ...this.defaults, ...opts };\n        });\n        return this;\n    }\n    setOptions(opt) {\n        this.defaults = { ...this.defaults, ...opt };\n        return this;\n    }\n    lexer(src, options) {\n        return _Lexer.lex(src, options ?? this.defaults);\n    }\n    parser(tokens, options) {\n        return _Parser.parse(tokens, options ?? this.defaults);\n    }\n    parseMarkdown(blockType) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const parse = (src, options) => {\n            const origOpt = { ...options };\n            const opt = { ...this.defaults, ...origOpt };\n            const throwError = this.onError(!!opt.silent, !!opt.async);\n            // throw error if an extension set async to true but parse was called with async: false\n            if (this.defaults.async === true && origOpt.async === false) {\n                return throwError(new Error('marked(): The async option was set to true by an extension. Remove async: false from the parse options object to return a Promise.'));\n            }\n            // throw error in case of non string input\n            if (typeof src === 'undefined' || src === null) {\n                return throwError(new Error('marked(): input parameter is undefined or null'));\n            }\n            if (typeof src !== 'string') {\n                return throwError(new Error('marked(): input parameter is of type '\n                    + Object.prototype.toString.call(src) + ', string expected'));\n            }\n            if (opt.hooks) {\n                opt.hooks.options = opt;\n                opt.hooks.block = blockType;\n            }\n            const lexer = opt.hooks ? opt.hooks.provideLexer() : (blockType ? _Lexer.lex : _Lexer.lexInline);\n            const parser = opt.hooks ? opt.hooks.provideParser() : (blockType ? _Parser.parse : _Parser.parseInline);\n            if (opt.async) {\n                return Promise.resolve(opt.hooks ? opt.hooks.preprocess(src) : src)\n                    .then(src => lexer(src, opt))\n                    .then(tokens => opt.hooks ? opt.hooks.processAllTokens(tokens) : tokens)\n                    .then(tokens => opt.walkTokens ? Promise.all(this.walkTokens(tokens, opt.walkTokens)).then(() => tokens) : tokens)\n                    .then(tokens => parser(tokens, opt))\n                    .then(html => opt.hooks ? opt.hooks.postprocess(html) : html)\n                    .catch(throwError);\n            }\n            try {\n                if (opt.hooks) {\n                    src = opt.hooks.preprocess(src);\n                }\n                let tokens = lexer(src, opt);\n                if (opt.hooks) {\n                    tokens = opt.hooks.processAllTokens(tokens);\n                }\n                if (opt.walkTokens) {\n                    this.walkTokens(tokens, opt.walkTokens);\n                }\n                let html = parser(tokens, opt);\n                if (opt.hooks) {\n                    html = opt.hooks.postprocess(html);\n                }\n                return html;\n            }\n            catch (e) {\n                return throwError(e);\n            }\n        };\n        return parse;\n    }\n    onError(silent, async) {\n        return (e) => {\n            e.message += '\\nPlease report this to https://github.com/markedjs/marked.';\n            if (silent) {\n                const msg = '<p>An error occurred:</p><pre>'\n                    + escape(e.message + '', true)\n                    + '</pre>';\n                if (async) {\n                    return Promise.resolve(msg);\n                }\n                return msg;\n            }\n            if (async) {\n                return Promise.reject(e);\n            }\n            throw e;\n        };\n    }\n}\n\nconst markedInstance = new Marked();\nfunction marked(src, opt) {\n    return markedInstance.parse(src, opt);\n}\n/**\n * Sets the default options.\n *\n * @param options Hash of options\n */\nmarked.options =\n    marked.setOptions = function (options) {\n        markedInstance.setOptions(options);\n        marked.defaults = markedInstance.defaults;\n        changeDefaults(marked.defaults);\n        return marked;\n    };\n/**\n * Gets the original marked default options.\n */\nmarked.getDefaults = _getDefaults;\nmarked.defaults = _defaults;\n/**\n * Use Extension\n */\nmarked.use = function (...args) {\n    markedInstance.use(...args);\n    marked.defaults = markedInstance.defaults;\n    changeDefaults(marked.defaults);\n    return marked;\n};\n/**\n * Run callback for every token\n */\nmarked.walkTokens = function (tokens, callback) {\n    return markedInstance.walkTokens(tokens, callback);\n};\n/**\n * Compiles markdown to HTML without enclosing `p` tag.\n *\n * @param src String of markdown source to be compiled\n * @param options Hash of options\n * @return String of compiled HTML\n */\nmarked.parseInline = markedInstance.parseInline;\n/**\n * Expose\n */\nmarked.Parser = _Parser;\nmarked.parser = _Parser.parse;\nmarked.Renderer = _Renderer;\nmarked.TextRenderer = _TextRenderer;\nmarked.Lexer = _Lexer;\nmarked.lexer = _Lexer.lex;\nmarked.Tokenizer = _Tokenizer;\nmarked.Hooks = _Hooks;\nmarked.parse = marked;\nconst options = marked.options;\nconst setOptions = marked.setOptions;\nconst use = marked.use;\nconst walkTokens = marked.walkTokens;\nconst parseInline = marked.parseInline;\nconst parse = marked;\nconst parser = _Parser.parse;\nconst lexer = _Lexer.lex;\n\nexport { _Hooks as Hooks, _Lexer as Lexer, Marked, _Parser as Parser, _Renderer as Renderer, _TextRenderer as TextRenderer, _Tokenizer as Tokenizer, _defaults as defaults, _getDefaults as getDefaults, lexer, marked, options, parse, parseInline, parser, setOptions, use, walkTokens };\n//# sourceMappingURL=marked.esm.js.map\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n * See LICENSE in the project root for license information.\n */\n\n/* global document, Office */\nimport { marked } from 'marked';\n\n// Safety settings for Gemini API\nconst safetySettings = [{\n  category: \"HARM_CATEGORY_HARASSMENT\",\n  threshold: \"BLOCK_NONE\"\n},\n{\n  category: \"HARM_CATEGORY_HATE_SPEECH\",\n  threshold: \"BLOCK_NONE\"\n},\n{\n  category: \"HARM_CATEGORY_SEXUALLY_EXPLICIT\",\n  threshold: \"BLOCK_NONE\"\n},\n{\n  category: \"HARM_CATEGORY_DANGEROUS_CONTENT\",\n  threshold: \"BLOCK_NONE\"\n}];\n\nconst TYPES = {\n  SUMMARIZE: 0,\n  TRANSLATE: 1,\n  TRANSLATE_SUMMARIZE: 2,\n  REPLY: 3,\n  CALENDAR: 4\n};\n\n// Default templates\nconst DEFAULT_TEMPLATES = {\n  summarize: `You are an expert researcher. Your task is to review the provided research document and complete the following tasks with academic depth and varied sentence structures:\n\n1. Summarize the Research Background:\n   - Provide a concise yet comprehensive summary of the study's background, including its context and motivation.\n\n2. Extract the Problem Statement:\n   - Clearly identify and articulate the central problem or challenge addressed by the research.\n\n3. Identify Strengths:\n   - List 3–5 key strengths of the study, focusing on aspects such as methodology, innovation, robustness of results, or any other notable positive attributes.\n\n4. Identify Weaknesses:\n   - Enumerate 4–5 significant weaknesses or limitations present in the research, considering issues like methodological gaps, limited scope, or areas lacking clarity.\n\n5. Propose Research Topics:\n   - Based on the weaknesses identified, suggest three potential research topics that could address these limitations or explore related areas further.\n\n6. Include a \"tl;dr\" Section:\n   - At the very top of your response, provide a succinct \"tl;dr\" summary without any syntax highlighting that encapsulates the main points and any necessary takeaways.\n\nDo not include any extraneous messages, introductions, or commentary. Your final output should strictly adhere to these instructions.\n\nSubject: {subject}\nContent:\n{content}`,\n  translate: `You are an expert translator and interpreter with extensive proficiency in various languages, specializing in translating texts into polished, academic Korean. Your task is to translate the provided text from the source language into Korean, ensuring that every nuance, stylistic detail, and analytical aspect is accurately and naturally conveyed. Please follow these guidelines:\n\nPreserve Nuance and Style:\n- Accurately reflect the original text's tone, emotional nuance, and stylistic characteristics in Korean.\n- Adapt idiomatic expressions, metaphors, and culturally specific references to ensure they resonate with Korean readers.\n\nMaintain Analytical Precision:\n- Carefully dissect complex sentences and ideas, ensuring that your translation maintains the original text's logical flow and depth of analysis.\n- Where necessary, integrate brief annotations or contextual clarifications to help convey any cultural or conceptual subtleties.\n\nEnsure Accuracy and Consistency:\n- Translate specialized vocabulary, technical terms, and academic language with precision and maintain consistency throughout the text.\n- Verify that the structure and argumentative progression of the source material are preserved in the Korean version.\n\nUphold Contextual Integrity:\n- Ensure that the overall message and intent of the original text are fully maintained in your translation.\n- Make sure that transitions between ideas and sections remain coherent and logically connected in Korean.\n\nReview and Refine:\n- Reassess your translation for any potential ambiguities or loss of nuance, refining as necessary to enhance clarity and precision.\n- Strive for a balanced outcome that honors the original text while ensuring the translation is engaging and accessible to a Korean audience.\n\nProvide tl;dr at the top:\nWrite a tl;dr section at the top of your response that summarizes the main points and todos if needed.\n\nDeliver your final translation in refined, academic Korean that faithfully embodies the original text's analytical and stylistic essence.\n\nSubject: {subject}\n\nContent:\n{content}`,\n  translateSummarize: `You are an expert translator and summarizer with extensive proficiency in various languages, specializing in translating texts into polished, academic Korean. Your task is to translate the provided text from the source language into Korean AND create a concise summary of the main points. Please follow these guidelines:\n\nTranslation Aspects:\n- Accurately reflect the original text's tone, emotional nuance, and stylistic characteristics in Korean.\n- Adapt idiomatic expressions, metaphors, and culturally specific references to ensure they resonate with Korean readers.\n- Maintain analytical precision and logical flow in the Korean translation.\n\nSummarization Requirements:\n- Create a concise and focused summary of the key points in Korean.\n- Prioritize clarity and brevity while maintaining the essential meaning.\n- Ensure the summary captures the main ideas, arguments, and conclusions.\n- Limit the summary to approximately 30-40% of the original length.\n\nFinal Delivery Format:\n1. First provide tl;dr at the top:\nWrite a tl;dr section at the top of your response that summarizes the main points and todos if needed.\n2. Then provide a concise summary section (제목: 요약)\n3. Then provide the full translation (제목: 전체 번역)\n\nSubject: {subject}\n\nContent:\n{content}`,\n  reply: `You are an expert assistant that can help me with my email. I will provide you with the email content and you will help me with the following tasks:\n\n  Write a reply to the email.\n\n  Subject: {subject}\n\n  Content:\n  {content}\n  in {language}`,\n  tldrPrompt: `Please provide a very concise summary in {language} of the following content. Focus on the main points and key takeaways. Do not include any extraneous messages, introductions, or commentary. Your final output should strictly adhere to these instructions.\n\n  Subject: {subject}\n\n  Content:\n  {content}`\n};\n\nOffice.onReady((info) => {\n    if (info.host === Office.HostType.Outlook) {\n        document.getElementById(\"sideload-msg\").style.display = \"none\";\n        document.getElementById(\"app-body\").style.display = \"flex\";\n\n        // Initialize the application\n        initializeApp();\n\n        // Check if autorun is enabled and get the selected option\n        let autorunEnabled = false;\n        let selectedOption = null;\n        try {\n            const savedSettings = localStorage.getItem('my_sidekick_michael_settings');\n            if (savedSettings) {\n                const settings = JSON.parse(savedSettings);\n                autorunEnabled = settings.autorun === 'true';\n                selectedOption = settings.autorunOption;\n            }\n        } catch (error) {\n            console.error('Error getting autorun settings:', error);\n        }\n\n        // If autorun is enabled and an option is selected, execute it\n        if (autorunEnabled && selectedOption) {\n            switch (selectedOption) {\n                case 'summarize':\n                    summarizeEmail();\n                    break;\n                case 'translate':\n                    translateEmail();\n                    break;\n                case 'translateAndSummarize':\n                    translateAndSummarizeEmail();\n                    break;\n                case 'reply':\n                    generateReply();\n                    break;\n            }\n        }\n\n        // Add event listeners for the application buttons\n        document.getElementById(\"summarize\").addEventListener(\"click\", summarizeEmail);\n        document.getElementById(\"translate\").addEventListener(\"click\", translateEmail);\n        document.getElementById(\"translate-summarize\").addEventListener(\"click\", translateAndSummarizeEmail);\n        document.getElementById(\"calendar-event\").addEventListener(\"click\", handleCalendarEvent);\n        document.getElementById(\"settings-toggle\").addEventListener(\"click\", toggleSettingsDropdown);\n        document.getElementById(\"dropdown-close-settings\").addEventListener(\"click\", toggleSettingsDropdown);\n        document.getElementById(\"dropdown-save-settings\").addEventListener(\"click\", saveDropdownSettings);\n        document.getElementById(\"dropdown-reset-all\").addEventListener(\"click\", resetAllSettings);\n        document.getElementById(\"dropdown-export-markdown\").addEventListener(\"click\", exportTemplatesAsMarkdown);\n        document.getElementById(\"dropdown-api-key\").addEventListener(\"keypress\", (event) => {\n            if (event.key === \"Enter\") {\n                saveDropdownSettings();\n            }\n        });\n\n        // Add dev mode toggle listener\n        document.getElementById(\"dropdown-dev-mode\").addEventListener(\"change\", function() {\n            const devServerGroup = document.getElementById(\"dev-server-group\");\n            devServerGroup.style.display = this.value === \"true\" ? \"block\" : \"none\";\n        });\n\n        // Settings selection change listeners\n        document.querySelectorAll(\".settings-dropdown-container select\").forEach(select => {\n            select.addEventListener(\"change\", saveDropdownSettings);\n        });\n\n        // Expand button listener\n        document.getElementById(\"expand-content\").addEventListener(\"click\", expandContent);\n\n        // Copy buttons listeners\n        document.getElementById(\"copy-result\").addEventListener(\"click\", copyResult);\n        document.getElementById(\"generate-reply\").addEventListener(\"click\", generateReply);\n\n        // Load saved settings if any\n        loadDropdownSettings();\n\n        // Apply current theme\n        applyCurrentTheme();\n\n        // Register for theme change events\n        if (Office.context.mailbox.addHandlerAsync) {\n            Office.context.mailbox.addHandlerAsync(\n                Office.EventType.SettingsChanged,\n                onSettingsChanged\n            );\n        }\n\n        // Add event handler for email selection\n        Office.context.mailbox.addHandlerAsync(\n            Office.EventType.ItemChanged,\n            function (args) {\n                // Check if autorun is enabled and get the selected option\n                let autorunEnabled = false;\n                let selectedOption = null;\n                try {\n                    const savedSettings = localStorage.getItem('my_sidekick_michael_settings');\n                    if (savedSettings) {\n                        const settings = JSON.parse(savedSettings);\n                        autorunEnabled = settings.autorun === 'true';\n                        selectedOption = settings.autorunOption;\n                    }\n                } catch (error) {\n                    console.error('Error getting autorun settings:', error);\n                }\n\n                // If autorun is enabled and an option is selected, execute it\n                if (autorunEnabled && selectedOption) {\n                    switch (selectedOption) {\n                        case 'summarize':\n                            summarizeEmail();\n                            break;\n                        case 'translate':\n                            translateEmail();\n                            break;\n                        case 'translateAndSummarize':\n                            translateAndSummarizeEmail();\n                            break;\n                        case 'reply':\n                            generateReply();\n                            break;\n                    }\n                }\n            },\n            function (result) {\n                if (result.status === Office.AsyncResultStatus.Succeeded) {\n                    result.value.addHandlerAsync(\n                        Office.EventType.ItemChanged,\n                        function (args) {\n                            // Check if autorun is enabled and get the selected option\n                            let autorunEnabled = false;\n                            let selectedOption = null;\n                            try {\n                                const savedSettings = localStorage.getItem('my_sidekick_michael_settings');\n                                if (savedSettings) {\n                                    const settings = JSON.parse(savedSettings);\n                                    autorunEnabled = settings.autorun === 'true';\n                                    selectedOption = settings.autorunOption;\n                                }\n                            } catch (error) {\n                                console.error('Error getting autorun settings:', error);\n                            }\n\n                            // If autorun is enabled and an option is selected, execute it\n                            if (autorunEnabled && selectedOption) {\n                                switch (selectedOption) {\n                                    case 'summarize':\n                                        summarizeEmail();\n                                        break;\n                                    case 'translate':\n                                        translateEmail();\n                                        break;\n                                    case 'translateAndSummarize':\n                                        translateAndSummarizeEmail();\n                                        break;\n                                    case 'reply':\n                                        generateReply();\n                                        break;\n                                }\n                            }\n                        },\n                        function (result) {\n                            if (result.status === Office.AsyncResultStatus.Succeeded) {\n                                result.value.register();\n                            }\n                        }\n                    );\n                }\n            }\n        );\n\n        // Update calendar button state when email changes\n        Office.context.mailbox.addHandlerAsync(\n            Office.EventType.ItemChanged,\n            function (args) {\n                updateCalendarButtonState();\n            },\n            function (result) {\n                if (result.status === Office.AsyncResultStatus.Succeeded) {\n                    result.value.addHandlerAsync(\n                        Office.EventType.ItemChanged,\n                        function (args) {\n                            updateCalendarButtonState();\n                        }\n                    );\n                }\n            }\n        );\n\n        // Initial calendar button state update\n        updateCalendarButtonState();\n    }\n});\n\n/**\n * Toggle the visibility of the settings dropdown\n */\nfunction toggleSettingsDropdown() {\n  const dropdown = document.getElementById(\"settings-dropdown\");\n  if (dropdown) {\n    const isVisible = dropdown.style.display === \"block\";\n    dropdown.style.display = isVisible ? \"none\" : \"block\";\n  }\n}\n\n// Make the function available globally\nwindow.toggleSettingsDropdown = toggleSettingsDropdown;\n\n/**\n * Apply the current theme based on user preference or Office theme\n */\nfunction applyCurrentTheme() {\n  // Default to dark theme instead of system\n  const savedTheme = localStorage.getItem('theme') || 'dark';\n\n  if (savedTheme === 'light') {\n    document.body.setAttribute('data-theme', 'light');\n    document.body.classList.remove('dark-theme');\n  } else if (savedTheme === 'dark') {\n    document.body.setAttribute('data-theme', 'dark');\n    document.body.classList.add('dark-theme');\n  } else {\n    // Use Office theme\n    if (Office.context.officeTheme) {\n      const bodyBackgroundColor = Office.context.officeTheme.bodyBackgroundColor;\n      // Only call isDarkTheme if bodyBackgroundColor exists\n      if (bodyBackgroundColor) {\n        if (isDarkTheme(bodyBackgroundColor)) {\n          document.body.setAttribute('data-theme', 'dark');\n          document.body.classList.add('dark-theme');\n        } else {\n          document.body.setAttribute('data-theme', 'light');\n          document.body.classList.remove('dark-theme');\n        }\n      } else {\n        // Default to dark theme if no color information\n        document.body.setAttribute('data-theme', 'dark');\n        document.body.classList.add('dark-theme');\n      }\n    }\n  }\n}\n\n/**\n * Determine if a color is dark by converting it to RGB and calculating perceived brightness\n * @param {string} color - Hex color code\n * @returns {boolean} - True if the color is dark\n */\nfunction isDarkTheme(color) {\n  // If color is undefined or not a string, default to light theme\n  if (!color || typeof color !== 'string') {\n    return false;\n  }\n\n  try {\n    // Convert hex to RGB\n    color = color.replace('#', '');\n    const r = parseInt(color.substr(0, 2), 16);\n    const g = parseInt(color.substr(2, 2), 16);\n    const b = parseInt(color.substr(4, 2), 16);\n\n    // Check if we got valid RGB values\n    if (isNaN(r) || isNaN(g) || isNaN(b)) {\n      return false;\n    }\n\n    // Calculate perceived brightness using the formula: (0.299*R + 0.587*G + 0.114*B)\n    const brightness = (0.299 * r + 0.587 * g + 0.114 * b);\n\n    // If brightness is less than 128, consider it dark\n    return brightness < 128;\n  } catch (error) {\n    console.error(\"Error calculating theme brightness:\", error);\n    return false;\n  }\n}\n\n/**\n * Handle Office theme change event\n */\nfunction onSettingsChanged(eventArgs) {\n  const savedTheme = localStorage.getItem('theme') || 'system';\n  if (savedTheme === 'system') {\n    applyCurrentTheme();\n  }\n}\n\n/**\n * Show notification message\n */\nfunction showNotification(message, type = \"info\") {\n  // Remove any existing notification\n  const existingNotification = document.getElementById(\"notification\");\n  if (existingNotification) {\n    existingNotification.remove();\n  }\n\n  // Create new notification element\n  const notification = document.createElement(\"div\");\n  notification.id = \"notification\";\n  notification.className = `notification ${type}`;\n  notification.textContent = message;\n\n  // Add to document\n  document.body.appendChild(notification);\n\n  // Force reflow to ensure animation plays\n  notification.offsetHeight;\n\n  // Add slide-in animation\n  notification.style.animation = \"slideInFromTop 0.3s ease-out\";\n\n  // Set timeout to remove notification\n  setTimeout(() => {\n    // Add slide-out animation\n    notification.style.animation = \"slideOutToTop 0.3s ease-out\";\n\n    // Remove element after animation\n    setTimeout(() => {\n      notification.remove();\n    }, 300);\n  }, 3000);\n}\n\n/**\n * Save settings from the dropdown menu\n */\nfunction saveDropdownSettings() {\n  // Get existing settings\n  let settings = {};\n  try {\n    const savedSettings = localStorage.getItem('my_sidekick_michael_settings');\n    if (savedSettings) {\n      settings = JSON.parse(savedSettings);\n    }\n  } catch (error) {\n    console.error('Error parsing settings:', error);\n  }\n\n  // Update with values from dropdown form\n  const apiKey = document.getElementById('dropdown-api-key').value;\n  const model = document.getElementById('dropdown-model').value;\n  const language = document.getElementById('dropdown-language').value;\n  const eventTitleLanguage = document.getElementById('dropdown-event-title-language').value;\n  const theme = document.getElementById('dropdown-theme').value;\n  const fontSize = document.getElementById('dropdown-font-size').value;\n  const tldrMode = document.getElementById('dropdown-tldr-mode').value;\n  const showReply = document.getElementById('dropdown-show-reply').value;\n  const replyModel = document.getElementById('dropdown-reply-model').value;\n  const autorun = document.getElementById('dropdown-autorun').value;\n  const autorunOption = document.getElementById('dropdown-autorun-option').value;\n  const devMode = document.getElementById('dropdown-dev-mode').value;\n  const devServer = document.getElementById('dropdown-dev-server').value;\n  const summarizeTemplate = document.getElementById('dropdown-summarize-template').value;\n  const translateTemplate = document.getElementById('dropdown-translate-template').value;\n  const translateSummarizeTemplate = document.getElementById('dropdown-translate-summarize-template').value;\n\n  // Update settings object\n  settings.apiKey = apiKey;\n  settings.model = model;\n  settings.defaultLanguage = language;\n  settings.eventTitleLanguage = eventTitleLanguage;\n  settings.theme = theme;\n  settings.fontSize = fontSize;\n  settings.tldrMode = tldrMode;\n  settings.showReply = showReply;\n  settings.replyModel = replyModel;\n  settings.autorun = autorun;\n  settings.autorunOption = autorunOption;\n  settings.devMode = devMode;\n  settings.devServer = devServer;\n\n  // Make sure templates object exists\n  if (!settings.templates) {\n    settings.templates = {};\n  }\n\n  settings.templates.summarize = summarizeTemplate;\n  settings.templates.translate = translateTemplate;\n  settings.templates.translateSummarize = translateSummarizeTemplate;\n\n  // Save settings\n  localStorage.setItem('my_sidekick_michael_settings', JSON.stringify(settings));\n\n  // Save API key separately\n  if (apiKey) {\n    localStorage.setItem(\"my_sidekick_michael_api_key\", apiKey);\n  } else {\n    localStorage.removeItem(\"my_sidekick_michael_api_key\"); // Remove if empty\n  }\n\n  // Apply theme if changed\n  localStorage.setItem('theme', theme);\n  applyCurrentTheme();\n\n  // Apply font size\n  applyFontSize(fontSize);\n\n  // Update UI for reply button\n  updateReplyButtonVisibility(showReply === 'true');\n\n  // Update dev badges visibility\n  updateDevBadges(devMode === 'true');\n\n  showNotification('All settings saved successfully');\n\n  // Close the dropdown\n  toggleSettingsDropdown();\n}\n\n/**\n * Reset template fields to defaults\n */\nfunction resetTemplates() {\n  // Save default templates back into the main settings object\n  const currentSettingsText = localStorage.getItem(\"my_sidekick_michael_settings\");\n  const currentSettings = currentSettingsText ? JSON.parse(currentSettingsText) : {};\n  currentSettings.templates = DEFAULT_TEMPLATES;\n  localStorage.setItem(\"my_sidekick_michael_settings\", JSON.stringify(currentSettings));\n\n  // Update textareas\n  document.getElementById('dropdown-summarize-template').value = DEFAULT_TEMPLATES.summarize;\n  document.getElementById('dropdown-translate-template').value = DEFAULT_TEMPLATES.translate;\n  // Add the new translateSummarize template to the reset function\n  if (document.getElementById('dropdown-translate-summarize-template')) {\n    document.getElementById('dropdown-translate-summarize-template').value = DEFAULT_TEMPLATES.translateSummarize;\n  }\n  showNotification('Templates reset to defaults');\n}\n\n/**\n * Load saved settings to the dropdown form fields\n */\nfunction loadDropdownSettings() {\n  try {\n    const savedSettings = localStorage.getItem('my_sidekick_michael_settings');\n    const apiKey = localStorage.getItem(\"my_sidekick_michael_api_key\");\n\n    // Load main settings\n    if (savedSettings) {\n      const settings = JSON.parse(savedSettings);\n\n      // Set form values\n      if (settings.apiKey) document.getElementById('dropdown-api-key').value = settings.apiKey;\n      if (settings.model) document.getElementById('dropdown-model').value = settings.model;\n      if (settings.defaultLanguage) document.getElementById('dropdown-language').value = settings.defaultLanguage;\n      if (settings.eventTitleLanguage) document.getElementById('dropdown-event-title-language').value = settings.eventTitleLanguage;\n      if (settings.theme) document.getElementById('dropdown-theme').value = settings.theme;\n      if (settings.fontSize) document.getElementById('dropdown-font-size').value = settings.fontSize;\n      if (settings.tldrMode) document.getElementById('dropdown-tldr-mode').value = settings.tldrMode;\n      if (settings.showReply) document.getElementById('dropdown-show-reply').value = settings.showReply;\n      if (settings.replyModel) document.getElementById('dropdown-reply-model').value = settings.replyModel;\n      if (settings.autorun) document.getElementById('dropdown-autorun').value = settings.autorun;\n      if (settings.autorunOption) document.getElementById('dropdown-autorun-option').value = settings.autorunOption;\n      if (settings.devMode) document.getElementById('dropdown-dev-mode').value = settings.devMode;\n      if (settings.devServer) document.getElementById('dropdown-dev-server').value = settings.devServer;\n\n      // Show/hide dev server input based on dev mode\n      const devServerGroup = document.getElementById(\"dev-server-group\");\n      if (devServerGroup) {\n        devServerGroup.style.display = settings.devMode === 'true' ? 'block' : 'none';\n      }\n\n      // Update dev badges visibility\n      updateDevBadges(settings.devMode === 'true');\n\n      // Apply font size if saved\n      if (settings.fontSize) {\n        applyFontSize(settings.fontSize);\n      }\n\n      // Update reply button visibility\n      if (settings.showReply) {\n        updateReplyButtonVisibility(settings.showReply === 'true');\n      }\n\n      // Set templates\n      if (settings.templates) {\n        if (settings.templates.summarize) {\n          document.getElementById('dropdown-summarize-template').value = settings.templates.summarize;\n        }\n        if (settings.templates.translate) {\n          document.getElementById('dropdown-translate-template').value = settings.templates.translate;\n        }\n        if (settings.templates.translateSummarize) {\n          document.getElementById('dropdown-translate-summarize-template').value = settings.templates.translateSummarize;\n        }\n      }\n    } else {\n      // No settings found, load default templates\n      resetTemplates();\n    }\n\n    // Load API key\n    if (apiKey) {\n      document.getElementById('dropdown-api-key').value = apiKey;\n    }\n  } catch (error) {\n    console.error('Error loading dropdown settings:', error);\n    // If there's an error, reset to defaults\n    resetTemplates();\n  }\n}\n\n/**\n * Apply the selected font size to result content\n * @param {string} size - The font size to apply (small, medium, large)\n */\nfunction applyFontSize(size) {\n  document.documentElement.setAttribute('data-font-size', size || 'medium');\n}\n\n// Get email content\nasync function getEmailContent() {\n  return new Promise((resolve, reject) => {\n    Office.context.mailbox.item.body.getAsync(\"text\", (result) => {\n      if (result.status === Office.AsyncResultStatus.Succeeded) {\n        resolve(result.value);\n      } else {\n        reject(new Error(\"Failed to get email content\"));\n      }\n    });\n  });\n}\n\n// Generate content using Gemini API\nasync function generateContent(prompt, apiKey, modelOverride = null, isTldr = false) {\n    // Get model from settings or use default\n    let model = \"gemini-2.0-flash-light\"; // Default model\n\n    if (modelOverride) {\n        model = modelOverride;\n    } else {\n        try {\n            const savedSettings = localStorage.getItem('my_sidekick_michael_settings');\n            if (savedSettings) {\n                const settings = JSON.parse(savedSettings);\n                if (settings.model) {\n                    model = settings.model;\n                }\n            }\n        } catch (error) {\n            console.error(\"Error getting model from settings:\", error);\n        }\n    }\n\n    // API URL with selected model\n    const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/${model}:generateContent?key=${apiKey}`;\n\n    try {\n        const response = await fetch(apiUrl, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n                contents: [\n                    {\n                        parts: [\n                            {\n                                text: prompt\n                            }\n                        ]\n                    }\n                ],\n                generationConfig: {\n                    temperature: 0.4,\n                    topK: 32,\n                    topP: 0.95,\n                    maxOutputTokens: isTldr ? 800 : 8192, // Limit tokens for TL;DR\n                },\n                safetySettings: safetySettings\n            })\n        });\n\n        const data = await response.json();\n\n        if (!response.ok) {\n            throw new Error(data.error?.message || 'Error generating content');\n        }\n\n        if (!data.candidates || data.candidates.length === 0) {\n            throw new Error('No content generated');\n        }\n\n        // Extract the generated text\n        const generatedText = data.candidates[0].content.parts[0].text;\n        return generatedText;\n    } catch (error) {\n        console.error('Error generating content:', error);\n        throw error;\n    } finally {\n        // Hide loading spinner only if this is not a TL;DR request\n        if (!isTldr) {\n            document.getElementById(\"loading\").style.display = \"none\";\n        }\n    }\n}\n\n// Generate TL;DR content\nasync function generateTldrContent(prompt, apiKey, language = \"Korean\",modelOverride = null) {\n  const subject = Office.context.mailbox.item.subject;\n  const emailContent = await getEmailContent();\n\n  const tldrPrompt = DEFAULT_TEMPLATES.tldrPrompt\n      .replace('{subject}', subject)\n      .replace('{content}', emailContent)\n      .replace('{language}', language);\n\n  const content = await generateContent(tldrPrompt, apiKey, modelOverride, true);\n  return content;\n}\n\n// Get language display text\nfunction getLanguageText(languageCode) {\n  switch (languageCode) {\n    case \"es\": return \"Spanish\";\n    case \"fr\": return \"French\";\n    case \"de\": return \"German\";\n    case \"it\": return \"Italian\";\n    case \"ja\": return \"Japanese\";\n    case \"ko\": return \"Korean\";\n    case \"zh_cn\": return \"Chinese\";\n    default: return \"English\";\n  }\n}\n\n// Get API key from local storage\nfunction getApiKey() {\n  return localStorage.getItem(\"my_sidekick_michael_api_key\");\n}\n\n// Get language from settings\nfunction getLanguage() {\n  try {\n    const savedSettings = localStorage.getItem('my_sidekick_michael_settings');\n    if (savedSettings) {\n      const settings = JSON.parse(savedSettings);\n      if (settings.defaultLanguage) {\n        return settings.defaultLanguage;\n      }\n    }\n    return 'ko'; // Default to Korean\n  } catch (error) {\n    console.error('Error getting language:', error);\n    return 'ko';\n  }\n}\n\n// Summarize email\nasync function summarizeEmail() {\n    const apiKey = getApiKey();\n\n    if (!apiKey) {\n        showNotification(\"Please add your Gemini API key in the settings\", 'error');\n        toggleSettingsDropdown(); // Open settings dropdown to prompt for API key\n        return;\n    }\n\n    // Show loading UI\n    showLoading(\"Summarizing email...\");\n\n    try {\n        const emailContent = await getEmailContent();\n        const subject = Office.context.mailbox.item.subject;\n\n        // Get template from storage or use default\n        let template = DEFAULT_TEMPLATES.summarize;\n        try {\n            const savedSettings = localStorage.getItem('my_sidekick_michael_settings');\n            if (savedSettings) {\n                const settings = JSON.parse(savedSettings);\n                if (settings.templates && settings.templates.summarize) {\n                    template = settings.templates.summarize;\n                }\n            }\n        } catch (error) {\n            console.error(\"Error getting template:\", error);\n        }\n\n        // Replace placeholders in template\n        const prompt = template\n            .replace('{subject}', subject)\n            .replace('{content}', emailContent);\n\n        // Check for TL;DR mode\n        let tldrMode = true;\n        try {\n            const savedSettings = localStorage.getItem('my_sidekick_michael_settings');\n            if (savedSettings) {\n                const settings = JSON.parse(savedSettings);\n                if (settings.tldrMode) {\n                    tldrMode = settings.tldrMode === 'true';\n                }\n            }\n        } catch (error) {\n            console.error('Error getting TLDR mode setting:', error);\n        }\n\n        if (tldrMode) {\n            // Generate TL;DR first\n            const tldrContent = await generateTldrContent(prompt, apiKey, \"English\");\n            hideLoading();\n            showResults(tldrContent, TYPES.SUMMARIZE);\n\n            // Then generate full content in the background\n            const fullContent = await generateContent(prompt, apiKey);\n\n            // display notification of full content\n            updateResults(fullContent);\n            updateExpandButton(true);\n        } else {\n            // Generate full content only\n            const summary = await generateContent(prompt, apiKey);\n            showResults(summary, TYPES.SUMMARIZE);\n        }\n    } catch (error) {\n        showNotification(`Error: ${error.message}`, 'error');\n    }\n}\n\n// Translate email\nasync function translateEmail() {\n    const apiKey = getApiKey();\n    const language = getLanguage();\n\n    if (!apiKey) {\n        showNotification(\"Please add your Gemini API key in the settings\", 'error');\n        toggleSettingsDropdown(); // Open settings dropdown to prompt for API key\n        return;\n    }\n\n    // Show loading UI\n    showLoading(\"Translating to \" + getLanguageText(language) + \"...\");\n\n    try {\n        const emailContent = await getEmailContent();\n        const subject = Office.context.mailbox.item.subject;\n\n        // Get template from storage or use default\n        let template = DEFAULT_TEMPLATES.translate;\n        try {\n            const savedSettings = localStorage.getItem('my_sidekick_michael_settings');\n            if (savedSettings) {\n                const settings = JSON.parse(savedSettings);\n                if (settings.templates && settings.templates.translate) {\n                    template = settings.templates.translate;\n                }\n            }\n        } catch (error) {\n            console.error(\"Error getting template:\", error);\n        }\n\n        // Replace placeholders in template\n        const prompt = template\n            .replace('{subject}', subject)\n            .replace('{content}', emailContent);\n\n        // Check for TL;DR mode\n        let tldrMode = true;\n        try {\n            const savedSettings = localStorage.getItem('my_sidekick_michael_settings');\n            if (savedSettings) {\n                const settings = JSON.parse(savedSettings);\n                if (settings.tldrMode) {\n                    tldrMode = settings.tldrMode === 'true';\n                }\n            }\n        } catch (error) {\n            console.error('Error getting TLDR mode setting:', error);\n        }\n\n        if (tldrMode) {\n            // Generate TL;DR first\n            const tldrContent = await generateTldrContent(prompt, apiKey, language);\n            hideLoading();\n            showResults(tldrContent, TYPES.TRANSLATE);\n\n            // Then generate full content in the background\n            const fullContent = await generateContent(prompt, apiKey);\n\n            // display notification of full content\n            updateResults(fullContent);\n            updateExpandButton(true);\n        } else {\n            // Generate full content only\n            const translation = await generateContent(prompt, apiKey, language);\n            showResults(translation, TYPES.TRANSLATE);\n        }\n    } catch (error) {\n        showNotification(`Error: ${error.message}`, 'error');\n    }\n}\n\n/**\n * Update the expand button text and style based on the full content display state\n */\nfunction updateExpandButton(isFullContentVisible) {\n  const expandButton = document.getElementById('expand-content');\n\n  if (expandButton) {\n    expandButton.disabled = !isFullContentVisible;\n    expandButton.classList.toggle('ms-Button--disabled', !isFullContentVisible);\n    expandButton.innerHTML = isFullContentVisible ? 'Show Full Content' : 'Hide Full Content';\n    expandButton.classList.toggle('ms-Button--primary', isFullContentVisible);\n  }\n}\n\n// Copy result to clipboard\nfunction copyResult() {\n  // Check if this is a reply (both TLDR and full content need to be combined)\n  let resultContent = \"\";\n\n  // Get the TLDR content (might contain the subject)\n  const tldrContent = document.getElementById(\"tldr-content\").innerText;\n\n  // Get the full content (might contain the body)\n  const fullContent = document.getElementById(\"result-content\").innerText;\n\n  // Check if this is a reply format\n  const isReply = tldrContent.includes(\"Subject:\") || fullContent.includes(\"Subject:\");\n\n  if (isReply) {\n    // If it's a reply, try to extract and format subject and body properly\n    let subject = \"\";\n    let body = \"\";\n\n    // Try to get subject from headings\n    const headingMatch = /^(?:Subject:\\s*)?(.+?)(?:\\n|$)/i.exec(tldrContent);\n    if (headingMatch) {\n      subject = headingMatch[1].trim();\n    }\n\n    // Get the body text (prioritize full content if visible, otherwise use TLDR minus subject)\n    if (document.getElementById(\"full-content-container\").style.display !== \"none\") {\n      body = fullContent;\n    } else {\n      // Attempt to remove subject line from TLDR if present\n      if (headingMatch) {\n        const lines = tldrContent.split(\"\\n\");\n        body = lines.slice(1).join(\"\\n\").trim();\n      } else {\n        body = tldrContent;\n      }\n    }\n\n    // Format as email reply\n    resultContent = `Subject: ${subject}\\n\\n${body}`;\n  } else {\n    // For normal content, get what's visible (either TLDR or full content)\n    if (document.getElementById(\"full-content-container\").style.display !== \"none\") {\n      resultContent = fullContent;\n    } else {\n      resultContent = tldrContent;\n    }\n  }\n\n  navigator.clipboard.writeText(resultContent).then(() => {\n    const copyStatus = document.getElementById(\"copy-status\");\n    copyStatus.textContent = \"Copied!\";\n    setTimeout(() => {\n      copyStatus.textContent = \"\";\n    }, 2000);\n  }).catch(err => {\n    console.error('Could not copy text: ', err);\n    showNotification(\"Failed to copy to clipboard\", \"error\");\n  });\n}\n\n// Convert markdown to HTML for rendering\nfunction markdownToHtml(markdown) {\n  if (!markdown) return '';\n\n  // Get the current font size from settings\n  let fontSize = 'medium';\n  try {\n    const savedSettings = localStorage.getItem('my_sidekick_michael_settings');\n    if (savedSettings) {\n      const settings = JSON.parse(savedSettings);\n      if (settings.fontSize) {\n        fontSize = settings.fontSize;\n      }\n    }\n  } catch (error) {\n    console.error('Error getting font size:', error);\n  }\n\n  // Get font size values\n  const fontSizeValue = fontSize === 'small' ? '13px' :\n                        fontSize === 'large' ? '18px' : '16px';\n\n  const lineHeightValue = fontSize === 'small' ? '1.5' :\n                           fontSize === 'large' ? '1.7' : '1.6';\n\n  const codeFontSize = fontSize === 'small' ? '13px' :\n                        fontSize === 'large' ? '17px' : '15px';\n\n  // Check if this is a reply format (starts with # Re: or similar)\n  const isReply = /^#\\s+(?:Re:|Subject:|\\[Reply\\]|Response:)/i.test(markdown);\n\n  // Simple markdown to HTML conversion\n  let html = markdown\n    // Handle reply format headings specially\n    .replace(/^#\\s+(.*$)/gim, function(match, p1) {\n      if (isReply) {\n        return `<h1 class=\"reply-heading\">${p1}</h1>`;\n      } else {\n        return `<h1>${p1}</h1>`;\n      }\n    })\n    // Other headings\n    .replace(/^###\\s+(.*$)/gim, '<h3>$1</h3>')\n    .replace(/^##\\s+(.*$)/gim, '<h2>$1</h2>')\n\n    // Convert bold and italic with stronger styling\n    .replace(/\\*\\*(.*?)\\*\\*/gim, '<strong style=\"font-weight: 700;\">$1</strong>')\n    .replace(/\\*(.*?)\\*/gim, '<em style=\"font-style: italic;\">$1</em>')\n    .replace(/\\_\\_([^_]+)\\_\\_/gim, '<strong style=\"font-weight: 700;\">$1</strong>')\n    .replace(/\\_([^_]+)\\_/gim, '<em style=\"font-style: italic;\">$1</em>')\n\n    // Convert lists - updated to remove indentation\n    .replace(/^\\s*\\n\\* (.*)/gim, '<ul class=\"no-indent\">\\n<li>$1</li>')\n    .replace(/^\\* (.*)/gim, '<li>$1</li>')\n    .replace(/^\\s*\\n\\d+\\. (.*)/gim, '<ol class=\"no-indent\">\\n<li>$1</li>')\n    .replace(/^\\d+\\. (.*)/gim, '<li>$1</li>')\n\n    // Convert blockquotes with improved styling\n    .replace(/^\\> (.*$)/gim, '<blockquote style=\"border-left: 4px solid var(--accent-color); padding-left: 1em; margin: 1em 0; background-color: rgba(0,0,0,0.03);\">$1</blockquote>')\n\n    // Convert code blocks with improved visibility\n    .replace(/```([\\s\\S]*?)```/gim, '<pre style=\"background-color: var(--code-background); padding: 12px; border-radius: 5px; overflow-x: auto; border: 1px solid var(--border-color);\"><code style=\"font-family: \\'Courier New\\', Courier, monospace; font-size: ' + codeFontSize + ';\">$1</code></pre>')\n    .replace(/`([^`]+)`/gim, '<code style=\"background-color: var(--code-background); padding: 3px 5px; border-radius: 3px; font-family: \\'Courier New\\', Courier, monospace; font-size: ' + codeFontSize + '; font-weight: 500;\">$1</code>')\n\n    // Convert horizontal rules\n    .replace(/^\\-\\-\\-$/gim, '<hr style=\"height: 2px; background-color: var(--border-color); border: 0; margin: 1.5em 0;\">')\n\n    // Convert links with better visibility\n    .replace(/\\[([^\\]]+)\\]\\(([^)]+)\\)/gim, '<a href=\"$2\" target=\"_blank\" style=\"color: var(--accent-color); text-decoration: none; font-weight: bold;\">$1</a>')\n\n    // Convert paragraphs - handle newlines\n    .replace(/\\n\\s*\\n/gim, '</p><p style=\"margin: 0.8em 0; font-size: ' + fontSizeValue + '; line-height: ' + lineHeightValue + ';\">')\n    .replace(/\\n/gim, '<br>')\n\n    // Wrap in paragraph if not already wrapped\n    .replace(/^(.+)$/gim, '<p style=\"margin: 0.8em 0; font-size: ' + fontSizeValue + '; line-height: ' + lineHeightValue + ';\">$1</p>');\n\n  return html;\n}\n\n// Translate and Summarize email\nasync function translateAndSummarizeEmail() {\n    const apiKey = getApiKey();\n\n    if (!apiKey) {\n        showNotification(\"Please add your Gemini API key in the settings\", 'error');\n        toggleSettingsDropdown(); // Open settings dropdown to prompt for API key\n        return;\n    }\n\n    // Show loading UI\n    showLoading(\"Translating and summarizing...\");\n\n    try {\n        const emailContent = await getEmailContent();\n        const subject = Office.context.mailbox.item.subject;\n        let language = \"English\";\n\n        // Get template from storage or use default\n        let template = DEFAULT_TEMPLATES.translateSummarize;\n        try {\n            const savedSettings = localStorage.getItem('my_sidekick_michael_settings');\n            if (savedSettings) {\n                const settings = JSON.parse(savedSettings);\n                if (settings.templates && settings.templates.translateSummarize) {\n                    template = settings.templates.translateSummarize;\n                }\n                if (settings.language) {\n                    language = settings.language;\n                }\n            }\n        } catch (error) {\n            console.error(\"Error getting template:\", error);\n        }\n\n        // Replace placeholders in template\n        const prompt = template\n            .replace('{subject}', subject)\n            .replace('{content}', emailContent)\n            .replace('{language}', language);\n\n        // Check for TL;DR mode\n        let tldrMode = true;\n        try {\n            const savedSettings = localStorage.getItem('my_sidekick_michael_settings');\n            if (savedSettings) {\n                const settings = JSON.parse(savedSettings);\n                if (settings.tldrMode) {\n                    tldrMode = settings.tldrMode === 'true';\n                }\n            }\n        } catch (error) {\n            console.error('Error getting TLDR mode setting:', error);\n        }\n\n        if (tldrMode) {\n            // Generate TL;DR first\n            const tldrContent = await generateTldrContent(prompt, apiKey);\n            hideLoading();\n            showResults(tldrContent, TYPES.TRANSLATE_SUMMARIZE);\n\n            // Then generate full content in the background\n            const fullContent = await generateContent(prompt, apiKey);\n\n\n            // display notification of full content\n            updateResults(fullContent);\n            updateExpandButton(true);\n        } else {\n            // Generate full content only\n            const result = await generateContent(prompt, apiKey);\n            showResults(result, TYPES.TRANSLATE_SUMMARIZE);\n        }\n    } catch (error) {\n        showNotification(`Error: ${error.message}`, 'error');\n    }\n}\n\n/**\n * Show loading indicator with message\n */\nfunction showLoading(message = \"Loading...\") {\n    // Show loading section\n    const loadingSection = document.getElementById(\"loading\");\n    loadingSection.style.display = \"block\";\n\n    // Update loading message\n    const loadingMessage = document.getElementById(\"loading-message\");\n    loadingMessage.textContent = message;\n\n    // Hide other sections\n    document.getElementById(\"landing-screen\").style.display = \"none\";\n    document.getElementById(\"result-section\").style.display = \"none\";\n}\n\n/**\n * Hide loading indicator\n */\nfunction hideLoading() {\n    const loadingSection = document.getElementById(\"loading\");\n    if (loadingSection) {\n        loadingSection.style.display = \"none\";\n    }\n}\n\n// Function to show the results\nfunction showResults(content, type) {\n\n    // Reset the full result content\n    document.getElementById(\"result-content\").innerHTML = \"\";\n    // Reset the tldr content\n    document.getElementById(\"tldr-content\").innerHTML = \"\";\n\n    // Reset the expand button\n    const expandButton = document.getElementById(\"expand-content\");\n    if (expandButton) {\n        expandButton.disabled = true;\n        expandButton.classList.add(\"ms-Button--disabled\");\n        expandButton.innerHTML = '<span class=\"ms-Button-label\">Show Full Content</span>';\n        expandButton.classList.remove('ms-Button--primary');\n    }\n\n    // Hide loading section\n    document.getElementById(\"loading\").style.display = \"none\";\n\n    // Show result section\n    document.getElementById(\"result-section\").style.display = \"block\";\n\n    // Hide landing screen\n    document.getElementById(\"landing-screen\").style.display = \"none\";\n\n    // Show the app body\n    document.getElementById(\"app-body\").style.display = \"block\";\n\n    // Check for TL;DR mode\n    let tldrMode = true;\n    try {\n        const savedSettings = localStorage.getItem('my_sidekick_michael_settings');\n        if (savedSettings) {\n            const settings = JSON.parse(savedSettings);\n            if (settings.tldrMode) {\n                tldrMode = settings.tldrMode === 'true';\n            }\n        }\n    } catch (error) {\n        console.error('Error getting TLDR mode setting:', error);\n    }\n\n    // Update content based on TL;DR mode\n    if (tldrMode) {\n        // For TL;DR mode, show the quick summary first\n        document.getElementById(\"tldr-content\").innerHTML = marked.parse(content);\n\n        // // Show loading spinner in full content section\n        // const fullContentContainer = document.getElementById(\"full-content-container\");\n        // fullContentContainer.style.display = \"block\";\n        // fullContentContainer.innerHTML = `\n        //     <div class=\"loading-container\" style=\"display: flex; flex-direction: column; align-items: center; justify-content: center; padding: 20px;\">\n        //         <div class=\"spinner\"></div>\n        //         <p style=\"margin-top: 10px; color: var(--text-secondary);\">Generating full content...</p>\n        //     </div>\n        // `;\n\n        // Disable expand button and set to loading state\n        const expandButton = document.getElementById(\"expand-content\");\n        if (expandButton) {\n            expandButton.disabled = true;\n            expandButton.classList.add(\"ms-Button--disabled\");\n            expandButton.innerHTML = '<span class=\"ms-Button-label\">Loading Full Content...</span>';\n        }\n    } else {\n        // For non-TL;DR mode, show the full content\n        document.getElementById(\"tldr-content\").innerHTML = marked.parse(content);\n\n        // Ensure result-content element exists\n        let resultContent = document.getElementById(\"result-content\");\n        if (!resultContent) {\n            resultContent = document.createElement(\"div\");\n            resultContent.id = \"result-content\";\n            document.getElementById(\"full-content-container\").appendChild(resultContent);\n        }\n        resultContent.innerHTML = marked.parse(content);\n        document.getElementById(\"full-content-container\").style.display = \"block\";\n\n        // Enable expand button and set to normal state\n        const expandButton = document.getElementById(\"expand-content\");\n        if (expandButton) {\n            expandButton.disabled = false;\n            expandButton.classList.remove(\"ms-Button--disabled\");\n            expandButton.innerHTML = '<span class=\"ms-Button-label\">Show Full Content</span>';\n            expandButton.classList.add('ms-Button--primary');\n        }\n    }\n\n    // Show/hide copy reply button based on type\n    const copyReplyButton = document.getElementById(\"copy-reply\");\n    if (copyReplyButton) {\n        copyReplyButton.style.display = type === TYPES.REPLY ? \"inline-block\" : \"none\";\n    }\n\n    // Show/hide copy result button based on type\n    const copyResultButton = document.getElementById(\"copy-result\");\n    if (copyResultButton) {\n        copyResultButton.style.display = type === TYPES.REPLY ? \"none\" : \"inline-block\";\n    }\n\n    // Show/hide generate reply button based on type and settings\n    const generateReplyButton = document.getElementById(\"generate-reply\");\n    if (generateReplyButton) {\n        const showReply = localStorage.getItem('my_sidekick_michael_settings') &&\n            JSON.parse(localStorage.getItem('my_sidekick_michael_settings')).showReply === 'true';\n        generateReplyButton.style.display = type === TYPES.REPLY ? \"none\" : (showReply ? \"inline-block\" : \"none\");\n    }\n\n    // Apply font size from settings\n    try {\n        const savedSettings = localStorage.getItem('my_sidekick_michael_settings');\n        if (savedSettings) {\n            const settings = JSON.parse(savedSettings);\n            if (settings.fontSize) {\n                applyFontSize(settings.fontSize);\n            }\n            // Update reply button visibility\n            if (settings.showReply) {\n                updateReplyButtonVisibility(settings.showReply === 'true');\n            }\n        }\n    } catch (error) {\n        console.error('Error applying font size:', error);\n    }\n\n    // Scroll to top of result content if elements exist\n    const resultContent = document.getElementById(\"result-content\");\n    const tldrContent = document.getElementById(\"tldr-content\");\n    if (resultContent) {\n        resultContent.scrollTop = 0;\n    }\n    if (tldrContent) {\n        tldrContent.scrollTop = 0;\n    }\n}\n\nfunction updateResults(content) {\n  // change the button status to show full content\n  const expandButton = document.getElementById(\"expand-content\");\n  if (expandButton) {\n    expandButton.disabled = false;\n    expandButton.classList.remove(\"ms-Button--disabled\");\n    expandButton.innerHTML = '<span class=\"ms-Button-label\">Show Full Content</span>';\n  }\n\n  // Remove the loading container\n  const loadingContainer = document.getElementById(\"loading-container\");\n  if (loadingContainer) {\n    loadingContainer.remove();\n  }\n\n  // Redo the result content\n  const resultContent = document.getElementById(\"result-content\");\n  if (resultContent) {\n    resultContent.innerHTML = marked.parse(content);\n  }\n}\n\n// Function to reset the UI\nfunction resetUI() {\n    document.getElementById(\"loading\").style.display = \"none\";\n    document.getElementById(\"result-section\").style.display = \"none\";\n    document.getElementById(\"landing-screen\").style.display = \"block\";\n}\n\n/**\n * Update reply button visibility based on settings\n */\nfunction updateReplyButtonVisibility(show) {\n  const replyButton = document.getElementById('generate-reply');\n  if (replyButton) {\n    replyButton.style.display = show ? 'inline-block' : 'none';\n  }\n}\n\n/**\n * Expand the full content when the expand button is clicked\n */\nfunction expandContent() {\n    const expandButton = document.getElementById('expand-content');\n    if (expandButton.disabled) {\n        return; // Don't do anything if button is disabled\n    }\n\n    const fullContentContainer = document.getElementById('full-content-container');\n\n    if (fullContentContainer.style.display === 'none') {\n        fullContentContainer.style.display = 'block';\n        expandButton.innerHTML = '<span class=\"ms-Button-label\">Hide Full Content</span>';\n        expandButton.classList.remove('ms-Button--primary');\n    } else {\n        fullContentContainer.style.display = 'none';\n        expandButton.innerHTML = '<span class=\"ms-Button-label\">Show Full Content</span>';\n        expandButton.classList.add('ms-Button--primary');\n    }\n}\n\n// Format a reply with clear subject and body sections\nfunction formatReplyOutput(replyText) {\n  // Extract subject and body\n  let subject = \"\";\n  let body = \"\";\n\n  // Check for a SUBJECT: line first\n  const subjectMatch = replyText.match(/^(?:SUBJECT:|Subject:)\\s*(.+?)(?:\\n|$)/m);\n  if (subjectMatch) {\n    subject = subjectMatch[1].trim();\n\n    // Remove the subject line from the text to get the body\n    body = replyText.replace(/^(?:SUBJECT:|Subject:)\\s*.+?\\n+/m, '').trim();\n  } else {\n    // If no explicit subject marker, check for first line as subject\n    const lines = replyText.trim().split('\\n');\n    if (lines.length > 0) {\n      subject = lines[0].trim();\n      body = lines.slice(1).join('\\n').trim();\n    } else {\n      // Fallback if no clear structure\n      subject = \"Re: Your email\";\n      body = replyText.trim();\n    }\n  }\n\n  // Create formatted HTML\n  const formattedHtml = `\n    <div class=\"reply-container\">\n      <div class=\"reply-subject\">\n        <span class=\"reply-label\">Subject:</span>${subject}\n      </div>\n      <div class=\"reply-body\">${body}</div>\n    </div>\n  `;\n\n  return {\n    html: formattedHtml,\n    subject: subject,\n    body: body,\n    raw: `Subject: ${subject}\\n\\n${body}`\n  };\n}\n\n// Generate a reply based on the current content\nasync function generateReply() {\n  const apiKey = getApiKey();\n\n  if (!apiKey) {\n    showNotification(\"Please add your Gemini API key in the settings\", 'error');\n    toggleSettingsDropdown();\n    return;\n  }\n\n  // Show loading UI\n  showLoading(\"Generating reply...\");\n\n  try {\n    const emailContent = await getEmailContent();\n    const subject = Office.context.mailbox.item.subject;\n\n    // Create prompt for reply generation with structured output\n    const prompt = `You are a professional email composer. Based on the following email content,\n    draft a concise, professional reply. The reply MUST include:\n\n    1. Start with \"SUBJECT: \" followed by an appropriate subject line, then a blank line\n    2. A professional, concise email body\n\n    Make the response clear, helpful, and to the point. Use a professional tone.\n\n    Email content to reply to:\n    Subject: ${subject}\n\n    ${emailContent}`;\n\n    const result = await generateContent(prompt, apiKey);\n    let formattedReply = formatReplyOutput(result);\n\n    // Display in TLDR and full content sections\n    document.getElementById(\"tldr-content\").innerHTML = formattedReply.html;\n    document.getElementById(\"result-content\").innerHTML = formattedReply.html;\n\n    // Show the result section\n    document.getElementById(\"result-section\").style.display = \"block\";\n\n    // Show the copy reply button and hide the regular copy button\n    document.getElementById(\"copy-reply\").style.display = \"inline-block\";\n    document.getElementById(\"copy-result\").style.display = \"none\";\n  } catch (error) {\n    showNotification(`Error: ${error.message}`, 'error');\n  } finally {\n    hideLoading();\n  }\n}\n\n// Copy the reply to clipboard\nfunction copyReply() {\n  // Get the formatted reply content\n  const tldrContent = document.getElementById(\"tldr-content\").innerText;\n\n  // Extract subject and body using regex\n  const subjectMatch = tldrContent.match(/Subject:\\s*(.+?)(?:\\n|$)/i);\n  const subject = subjectMatch ? subjectMatch[1].trim() : \"\";\n\n  // Get the body (everything after the subject)\n  const bodyStart = tldrContent.indexOf(subject) + subject.length;\n  const body = tldrContent.substring(bodyStart).trim();\n\n  // Format as email reply\n  const replyContent = `Subject: ${subject}\\n\\n${body}`;\n\n  navigator.clipboard.writeText(replyContent).then(() => {\n    const copyStatus = document.getElementById(\"copy-reply-status\");\n    copyStatus.textContent = \"Copied!\";\n    setTimeout(() => {\n      copyStatus.textContent = \"\";\n    }, 2000);\n  }).catch(err => {\n    console.error('Could not copy reply: ', err);\n    showNotification(\"Failed to copy reply\", \"error\");\n  });\n}\n\n/**\n * Extract TL;DR from content, or generate a brief summary\n */\nfunction extractTLDR(content) {\n    // Check if the content already contains a TL;DR section\n    const tldrRegex = /TL;DR:?\\s*(.*?)(?:\\n\\n|$)/is;\n    const tldrMatch = content.match(tldrRegex);\n\n    if (tldrMatch && tldrMatch[1]) {\n        return tldrMatch[1];\n    }\n\n    // Check for \"Summary:\" section\n    const summaryRegex = /Summary:?\\s*(.*?)(?:\\n\\n|$)/is;\n    const summaryMatch = content.match(summaryRegex);\n\n    if (summaryMatch && summaryMatch[1]) {\n        return summaryMatch[1];\n    }\n\n    // If no TL;DR or Summary found, use the first paragraph\n    const firstParagraph = content.split('\\n\\n')[0];\n    if (firstParagraph && firstParagraph.length < 300) {\n        return firstParagraph;\n    } else if (firstParagraph) {\n        return firstParagraph.substring(0, 250) + '...';\n    }\n\n    // Fallback\n    return content.substring(0, 200) + '...';\n}\n\n/**\n * Initialize the application\n */\nasync function initializeApp() {\n  // DOM 요소들을 먼저 찾아서 변수에 저장\n  const settingsSection = document.getElementById(\"settings-section\");\n  const resultSection = document.getElementById(\"result-section\");\n  const tldrSection = document.getElementById(\"tldr-section\");\n\n  // 요소가 존재하는지 확인 후 스타일 적용\n  if (settingsSection) {\n    settingsSection.style.display = \"none\";\n  }\n\n  if (resultSection) {\n    resultSection.style.display = \"none\";\n  }\n\n  if (tldrSection) {\n    tldrSection.style.display = \"none\";\n  }\n\n  // 설정 로드\n  const settings = loadSettings();\n  if (settings) {\n    // 테마 설정\n    if (settings.theme) {\n      setTheme(settings.theme);\n    }\n\n    // 폰트 크기 설정\n    if (settings.fontSize) {\n      setFontSize(settings.fontSize);\n    }\n  }\n\n  // API 키 확인\n  const apiKey = getApiKey();\n  if (!apiKey) {\n    showNotification(\"Please add your Gemini API key in settings\", \"warning\");\n  }\n}\n\n/**\n * Toggle settings panel visibility\n */\nfunction toggleSettings() {\n  const settingsSection = document.getElementById(\"settings-section\");\n  if (settingsSection.style.display === \"none\") {\n    settingsSection.style.display = \"block\";\n  } else {\n    settingsSection.style.display = \"none\";\n  }\n}\n\n/**\n * Save API key to settings\n */\nfunction saveApiKey() {\n  const apiKey = document.getElementById(\"api-key-input\").value;\n  localStorage.setItem(\"my_sidekick_michael_api_key\", apiKey);\n  showNotification(\"API key saved successfully!\", \"success\");\n  toggleSettings();\n}\n\n/**\n * Save settings to local storage\n */\nfunction saveSettings() {\n  const settings = {\n    theme: document.getElementById(\"theme-select\").value,\n    fontSize: document.getElementById(\"font-size-select\").value,\n    apiKey: document.getElementById(\"api-key-input\").value\n  };\n  localStorage.setItem(\"settings\", JSON.stringify(settings));\n  showNotification(\"Settings saved successfully!\", \"success\");\n  loadSettings();\n}\n\n/**\n * Load settings from local storage\n */\nfunction loadSettings() {\n  try {\n    const savedSettings = localStorage.getItem(\"michael_settings\");\n    if (savedSettings) {\n      const settings = JSON.parse(savedSettings);\n\n      // Apply to dropdown values\n      Object.keys(settings).forEach(key => {\n        const element = document.getElementById(key);\n        if (element && element.tagName === \"SELECT\") {\n          element.value = settings[key];\n        }\n      });\n    }\n  } catch (error) {\n    console.error(\"Error loading settings:\", error);\n  }\n}\n\n/**\n * Get a specific setting value\n */\nfunction getSetting(key) {\n  try {\n    const savedSettings = localStorage.getItem(\"michael_settings\");\n    if (savedSettings) {\n      const settings = JSON.parse(savedSettings);\n      return settings[key];\n    }\n  } catch (error) {\n    console.error(`Error getting setting ${key}:`, error);\n  }\n  return null;\n}\n\n/**\n * Set theme based on selection\n */\nfunction setTheme(theme) {\n  const root = document.documentElement;\n\n  if (theme === \"system\") {\n    // Use system preference\n    if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {\n      root.setAttribute('data-theme', 'dark');\n    } else {\n      root.setAttribute('data-theme', 'light');\n    }\n  } else {\n    // Use explicit theme\n    root.setAttribute('data-theme', theme);\n  }\n}\n\n/**\n * Set font size for results\n */\nfunction setFontSize(size) {\n  const root = document.documentElement;\n  root.style.setProperty('--result-font-size', getFontSizeValue(size));\n}\n\n/**\n * Get font size value based on size name\n */\nfunction getFontSizeValue(size) {\n  switch (size) {\n    case \"small\": return \"0.875rem\";\n    case \"medium\": return \"1rem\";\n    case \"large\": return \"1.125rem\";\n    default: return \"1rem\";\n  }\n}\n\n/**\n * Reset all settings to defaults\n */\nfunction resetAllSettings() {\n    // Reset model selection\n    document.getElementById('dropdown-model').value = 'gemini-1.5-flash';\n\n    // Reset language selection\n    document.getElementById('dropdown-language').value = 'ko';\n\n    // Reset event title language selection\n    document.getElementById('dropdown-event-title-language').value = 'en';\n\n    // Reset theme selection\n    document.getElementById('dropdown-theme').value = 'system';\n\n    // Reset font size selection\n    document.getElementById('dropdown-font-size').value = 'medium';\n\n    // Reset TLDR mode selection\n    document.getElementById('dropdown-tldr-mode').value = 'true';\n\n    // Reset show reply selection\n    document.getElementById('dropdown-show-reply').value = 'true';\n\n    // Reset reply model selection\n    document.getElementById('dropdown-reply-model').value = 'gemini-2.0-flash-lite';\n\n    // Reset autorun settings\n    document.getElementById('dropdown-autorun').value = 'false';\n    document.getElementById('dropdown-autorun-option').value = 'summarize';\n\n    // Reset dev mode settings\n    document.getElementById('dropdown-dev-mode').value = 'false';\n    document.getElementById('dropdown-dev-server').value = '';\n    document.getElementById('dev-server-group').style.display = 'none';\n\n    // Reset templates\n    resetTemplates();\n\n    // Clear API key\n    document.getElementById('dropdown-api-key').value = '';\n\n    // Clear saved settings from localStorage\n    localStorage.removeItem('michael_api_key');\n    localStorage.removeItem('michael_settings'); // Clear all settings as well\n\n    // Apply default theme\n    applyCurrentTheme();\n\n    // Apply default font size\n    applyFontSize('medium');\n\n    // Update reply button visibility\n    updateReplyButtonVisibility(true);\n\n    // Update dev badges visibility\n    updateDevBadges(false);\n\n    showNotification('All settings reset to defaults', 'success');\n}\n\n/**\n * Update dev badges visibility\n */\nfunction updateDevBadges(show) {\n    const devBadge = document.getElementById('dev-badge');\n    const footerDevBadge = document.getElementById('footer-dev-badge');\n\n    if (devBadge) {\n        devBadge.style.display = show ? 'block' : 'none';\n    }\n    if (footerDevBadge) {\n        footerDevBadge.style.display = show ? 'block' : 'none';\n    }\n}\n\n// Get event title language from settings\nfunction getEventTitleLanguage() {\n  try {\n    const savedSettings = localStorage.getItem('michael_settings');\n    if (savedSettings) {\n      const settings = JSON.parse(savedSettings);\n      if (settings.eventTitleLanguage) {\n        return settings.eventTitleLanguage;\n      }\n    }\n    return 'en'; // Default to English\n  } catch (error) {\n    console.error('Error getting event title language:', error);\n    return 'en';\n  }\n}\n\n// Helper function to parse event details using Gemini API\nasync function parseEventDetailsWithGemini(emailContent) {\n  try {\n    const apiKey = getApiKey();\n    if (!apiKey) {\n      throw new Error('API key not found');\n    }\n\n    // Get event title language from settings\n    const titleLanguage = getEventTitleLanguage();\n    let langInstructions = \"\";\n\n    // Set language-specific instructions\n    if (titleLanguage === 'en') {\n      langInstructions = `Event title should be in English.\n      If the event has a type or category, include it in square brackets ([]) at the beginning, then if there's a presenter and topic, write the presenter's name first, followed by a hyphen (-) and then the topic.`;\n    } else if (titleLanguage === 'ko') {\n      langInstructions = `이벤트 제목은 한국어로 작성해주세요.\n      이벤트 유형이나 카테고리가 있다면 대괄호([])로 먼저 표시하고, 발표자와 주제가 있다면 발표자 이름을 먼저 쓰고 하이픈(-) 후에 주제를 적어주세요.`;\n    } else if (titleLanguage === 'ja') {\n      langInstructions = `イベントのタイトルは日本語で記載してください。\n      イベントのタイプやカテゴリがある場合は、角括弧（[]）で囲んで最初に表示し、発表者とトピックがある場合は、発表者の名前を最初に書き、ハイフン（-）の後にトピックを書いてください。`;\n    } else if (titleLanguage === 'zh_cn') {\n      langInstructions = `事件标题应该用中文书写。\n      如果事件有类型或类别，请使用方括号（[]）将其括起来并放在开头，如果有演讲者和主题，请先写演讲者的名字，然后是连字符（-），再写主题。`;\n    } else {\n      // Default English instructions for other languages\n      langInstructions = `Event title should be in ${getLanguageText(titleLanguage)}.\n      If the event has a type or category, include it in square brackets ([]) at the beginning, then if there's a presenter and topic, write the presenter's name first, followed by a hyphen (-) and then the topic.`;\n    }\n\n    const prompt = `Analyze the following email content and extract information needed to create a calendar event for Microsoft Graph API.\n    The response must be in valid JSON format and follow the format below exactly.\n    Do not use escape characters that would cause parsing issues.\n    Mark any information that cannot be found as null.\n\n    ${langInstructions}\n\n    Event title format examples:\n    - \"[Event Type] Presenter - Topic\"\n    - \"[Conference Name] Presenter Name - Presentation Topic\"\n    - \"[Seminar Type] Speaker Name - Presentation Title\"\n\n    Required JSON format:\n    {\n      \"subject\": \"Meeting title\",\n      \"body\": {\n        \"contentType\": \"HTML\",\n        \"content\": \"Meeting description\"\n      },\n      \"start\": {\n        \"dateTime\": \"YYYY-MM-DDTHH:mm:ss\",\n        \"timeZone\": \"Asia/Seoul\"\n      },\n      \"end\": {\n        \"dateTime\": \"YYYY-MM-DDTHH:mm:ss\",\n        \"timeZone\": \"Asia/Seoul\"\n      },\n      \"location\": {\n        \"displayName\": \"Location name\"\n      },\n      \"attendees\": [\n        {\n          \"emailAddress\": {\n            \"address\": \"attendee@email.com\",\n            \"name\": \"Attendee Name\"\n          },\n          \"type\": \"required\"\n        }\n      ],\n      \"isOnlineMeeting\": true,\n      \"onlineMeetingProvider\": \"teamsForBusiness\"\n    }\n\n    Important notes:\n    1. Convert dates and times to ISO 8601 format (YYYY-MM-DDTHH:mm:ss)\n    2. Email addresses must be in valid format\n    3. Use \"Asia/Seoul\" as the default timezone\n    4. Set isOnlineMeeting to true if there are Teams links or video conference details\n    5. Process special characters properly to ensure valid JSON\n    6. Return only JSON without any additional explanations or comments\n\n    Email content:\n    ${emailContent}`;\n\n    console.log('Sending prompt to Gemini API');\n    const result = await generateContent(prompt, apiKey, null, false);\n    console.log('Received response from Gemini API');\n\n    // Extract only the JSON part from the result (remove any explanations or comments)\n    let jsonText = result;\n\n    // Extract text that starts with { and ends with } (JSON only)\n    const jsonMatch = result.match(/\\{[\\s\\S]*\\}/);\n    if (jsonMatch) {\n      jsonText = jsonMatch[0];\n    }\n\n    console.log('Extracted JSON text:', jsonText);\n\n    // Try to parse JSON\n    try {\n      const eventDetails = JSON.parse(jsonText);\n      console.log('Successfully parsed event details:', eventDetails);\n\n      // Validate required fields\n      if (!eventDetails.subject) {\n        throw new Error('Event title not found.');\n      }\n\n      if (!eventDetails.start?.dateTime) {\n        throw new Error('Event start time not found.');\n      }\n\n      if (!eventDetails.end?.dateTime) {\n        throw new Error('Event end time not found.');\n      }\n\n      // Validate date format\n      const dateRegex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$/;\n      if (!dateRegex.test(eventDetails.start.dateTime)) {\n        throw new Error('Invalid start time format. (Should be YYYY-MM-DDTHH:mm:ss format)');\n      }\n\n      if (!dateRegex.test(eventDetails.end.dateTime)) {\n        throw new Error('Invalid end time format. (Should be YYYY-MM-DDTHH:mm:ss format)');\n      }\n\n      return eventDetails;\n    } catch (parseError) {\n      console.error('JSON parsing error:', parseError);\n      console.error('Original response:', result);\n      throw new Error('Failed to extract event information: ' + parseError.message);\n    }\n  } catch (error) {\n    console.error('Error extracting event information:', error);\n    throw error;\n  }\n}\n\n// Create calendar event using Outlook Add-in API\nasync function createCalendarEvent(eventDetails) {\n  try {\n    // Validate required fields\n    if (!eventDetails.subject || !eventDetails.start?.dateTime || !eventDetails.end?.dateTime) {\n      throw new Error('Required event information is missing.');\n    }\n\n    // Convert to Outlook Add-in API format\n    // Create Date objects from ISO 8601 strings\n    const startDate = new Date(eventDetails.start.dateTime);\n    const endDate = new Date(eventDetails.end.dateTime);\n\n    // Convert attendee list to string arrays\n    const requiredAttendees = [];\n    const optionalAttendees = [];\n\n    if (eventDetails.attendees && eventDetails.attendees.length > 0) {\n      eventDetails.attendees.forEach(attendee => {\n        if (attendee.emailAddress && attendee.emailAddress.address) {\n          if (attendee.type === 'optional') {\n            optionalAttendees.push(attendee.emailAddress.address);\n          } else {\n            requiredAttendees.push(attendee.emailAddress.address);\n          }\n        }\n      });\n    }\n\n    // Create appointment format - according to Outlook API\n    const appointmentData = {\n      requiredAttendees: requiredAttendees,\n      optionalAttendees: optionalAttendees,\n      start: startDate,\n      end: endDate,\n      location: eventDetails.location?.displayName || '',\n      body: eventDetails.body?.content || '',\n      subject: eventDetails.subject\n    };\n\n    console.log('Creating appointment with data:', JSON.stringify(appointmentData));\n\n    // Display appointment form - using new appointment creation method\n    Office.context.mailbox.displayNewAppointmentForm({\n      requiredAttendees: requiredAttendees,\n      optionalAttendees: optionalAttendees,\n      start: startDate,\n      end: endDate,\n      location: eventDetails.location?.displayName || '',\n      body: eventDetails.body?.content || '',\n      subject: eventDetails.subject\n    });\n\n    showNotification(`Event '${eventDetails.subject}' has been created.`, 'info');\n    return true;\n  } catch (error) {\n    showNotification(`Failed to create event: ${error.message}`, 'error');\n    console.error('Error creating calendar event:', error);\n    throw error;\n  }\n}\n\n// Check if email content is a calendar event\nasync function checkIfCalendarEvent(emailContent) {\n  try {\n    const apiKey = getApiKey();\n    if (!apiKey) {\n      console.error('API key not found');\n      return false;\n    }\n\n    const prompt = `Check if the following email content is a calendar event (meeting, appointment, schedule, etc.).\n    Return true if the email content includes one or more of the following:\n    - Date and time information\n    - Meeting-related keywords (meeting, conference, appointment, schedule, calendar, etc.)\n    - Attendee information\n    - Location information\n    - Schedule-related actions (attendance confirmation, add to calendar, etc.)\n\n    Email content:\n    ${emailContent}\n\n    Your response must only contain \"true\" or \"false\".`;\n\n    const result = await generateContent(prompt, apiKey, null, true);\n    return result.toLowerCase().trim() === 'true';\n  } catch (error) {\n    console.error('Error checking if calendar event:', error);\n    return false;\n  }\n}\n\n// Handle calendar event button click\nasync function handleCalendarEvent() {\n  const apiKey = getApiKey();\n\n  if (!apiKey) {\n    showNotification(\"Please add your API key in settings\", 'error');\n    toggleSettingsDropdown();\n    return;\n  }\n\n  showLoading(\"Creating calendar event...\");\n\n  try {\n    const emailContent = await getEmailContent();\n\n    // Display result section\n    document.getElementById(\"landing-screen\").style.display = \"none\";\n    document.getElementById(\"result-section\").style.display = \"block\";\n\n    // Display email content and prepare copy button\n    document.getElementById(\"tldr-content\").innerHTML = `\n      <div class=\"email-content-header\">\n        <h3>Email Content</h3>\n        <button id=\"copy-email-content\" class=\"ms-Button ms-Button--primary\">\n          <span class=\"ms-Button-label\">Copy to Clipboard</span>\n        </button>\n      </div>\n      <div class=\"email-content-body\">\n        <pre style=\"white-space: pre-wrap; word-break: break-word;\">${emailContent}</pre>\n      </div>\n    `;\n\n    // Add event listener to clipboard copy button\n    document.getElementById(\"copy-email-content\").addEventListener(\"click\", function() {\n      navigator.clipboard.writeText(emailContent)\n        .then(() => {\n          showNotification(\"Email content copied to clipboard\", 'info');\n        })\n        .catch(err => {\n          console.error('Error copying to clipboard:', err);\n          showNotification(\"Failed to copy to clipboard\", 'error');\n        });\n    });\n\n    try {\n      // Parse event details with Gemini API\n      const eventDetails = await parseEventDetailsWithGemini(emailContent);\n\n      // Display extracted event details\n      document.getElementById(\"result-content\").innerHTML = `\n        <div class=\"event-details-header\">\n          <h3>Extracted Event Details</h3>\n        </div>\n        <div class=\"event-details-body\">\n          <p><strong>Subject:</strong> ${eventDetails.subject || 'Not found'}</p>\n          <p><strong>Start:</strong> ${eventDetails.start?.dateTime || 'Not found'}</p>\n          <p><strong>End:</strong> ${eventDetails.end?.dateTime || 'Not found'}</p>\n          <p><strong>Location:</strong> ${eventDetails.location?.displayName || 'Not found'}</p>\n        </div>\n      `;\n\n      // Create calendar event\n      await createCalendarEvent(eventDetails);\n\n    } catch (extractionError) {\n      console.error('Event extraction error:', extractionError);\n      // Clean up error message by removing the prefix if present\n      const errorMessage = extractionError.message;\n      const cleanedMessage = errorMessage.includes('Failed to extract event information:')\n        ? errorMessage.split('Failed to extract event information:')[1].trim()\n        : errorMessage;\n\n      document.getElementById(\"result-content\").innerHTML = `\n        <div class=\"event-details-header\">\n          <h3>Event Extraction Failed</h3>\n        </div>\n        <div class=\"event-details-body\">\n          <p class=\"error-message\">${cleanedMessage}</p>\n        </div>\n      `;\n\n      showNotification(`Event extraction failed: ${cleanedMessage}`, 'error');\n    }\n  } catch (error) {\n    console.error('Calendar event handling error:', error);\n    showNotification(`Error: ${error.message}`, 'error');\n  } finally {\n    // Hide loading and update button state\n    hideLoading();\n    updateCalendarButtonState();\n\n    // Enable show full content button\n    const expandButton = document.getElementById(\"expand-content\");\n    if (expandButton) {\n      expandButton.disabled = false;\n      expandButton.classList.remove(\"ms-Button--disabled\");\n      expandButton.innerHTML = '<span class=\"ms-Button-label\">Show Full Content</span>';\n      expandButton.classList.add('ms-Button--primary');\n\n      // Show full content container\n      document.getElementById(\"full-content-container\").style.display = \"block\";\n    }\n  }\n}\n\n// Update calendar button state based on email content\nasync function updateCalendarButtonState() {\n  try {\n    const emailContent = await getEmailContent();\n    const isCalendarEvent = await checkIfCalendarEvent(emailContent);\n\n    const calendarBtn = document.getElementById('calendar-event');\n    if (calendarBtn) {\n      if (isCalendarEvent) {\n        calendarBtn.disabled = false;\n        calendarBtn.classList.remove('action-button--disabled');\n        calendarBtn.classList.add('action-button--primary');\n        console.log('Calendar event detected, button enabled');\n      } else {\n        calendarBtn.disabled = true;\n        calendarBtn.classList.add('action-button--disabled');\n        calendarBtn.classList.remove('action-button--primary');\n        console.log('Not a calendar event, button disabled');\n      }\n    }\n  } catch (error) {\n    console.error('Error updating calendar button state:', error);\n  }\n}\n\n/**\n * Export current templates as markdown file\n */\nfunction exportTemplatesAsMarkdown() {\n    try {\n        // Get current settings\n        const savedSettings = localStorage.getItem('michael_settings');\n        const settings = savedSettings ? JSON.parse(savedSettings) : {};\n        const apiKey = localStorage.getItem('michael_api_key') || 'Not Set'; // Get API key\n\n        // Get current date for filename\n        const now = new Date();\n        const dateStr = now.toISOString().slice(0, 10); // YYYY-MM-DD format\n\n        // Get current user information if available\n        let userInfo = '';\n        try {\n            if (Office.context.mailbox && Office.context.mailbox.userProfile) {\n                const user = Office.context.mailbox.userProfile;\n                userInfo = `\\n\\n*Exported by: ${user.displayName} (${user.emailAddress})*`;\n            }\n        } catch (err) {\n            console.log('User profile not available');\n        }\n\n        // Create markdown content\n        let markdownContent = `# Michael Prompt Templates\\n\\n`;\n        markdownContent += `*Exported on: ${now.toLocaleString()}*${userInfo}\\n\\n`;\n\n        // Add model information\n        markdownContent += `## General Settings\\n\\n`;\n        markdownContent += `- **Model**: ${settings.model || 'gemini-1.5-flash'}\\n`;\n        markdownContent += `- **Default Language**: ${settings.defaultLanguage || 'ko'}\\n`;\n        markdownContent += `- **Event Title Language**: ${settings.eventTitleLanguage || 'en'}\\n\\n`;\n\n        // Add prompts\n        markdownContent += `## Prompt Templates\\n\\n`;\n\n        // Summarize template\n        markdownContent += `### Summarize Template\\n\\n\\`\\`\\`\\n${\n            settings.templates && settings.templates.summarize ?\n            settings.templates.summarize :\n            'No template defined'\n        }\\n\\`\\`\\`\\n\\n`;\n\n        // Translate template\n        markdownContent += `### Translate Template\\n\\n\\`\\`\\`\\n${\n            settings.templates && settings.templates.translate ?\n            settings.templates.translate :\n            'No template defined'\n        }\\n\\`\\`\\`\\n\\n`;\n\n        // Translate & Summarize template\n        markdownContent += `### Translate & Summarize Template\\n\\n\\`\\`\\`\\n${\n            settings.templates && settings.templates.translateSummarize ?\n            settings.templates.translateSummarize :\n            'No template defined'\n        }\\n\\`\\`\\`\\n\\n`;\n\n        // Create download link\n        const blob = new Blob([markdownContent], { type: 'text/markdown' });\n        const url = URL.createObjectURL(blob);\n        const a = document.createElement('a');\n        a.href = url;\n        a.download = `michael-templates-${dateStr}.md`;\n\n        // Append to body, click, and remove\n        document.body.appendChild(a);\n        a.click();\n\n        // Clean up\n        setTimeout(function() {\n            document.body.removeChild(a);\n            URL.revokeObjectURL(url);\n        }, 100);\n\n        showNotification('Templates exported successfully', 'success');\n    } catch (error) {\n        console.error('Error exporting templates:', error);\n        showNotification('Failed to export templates', 'error');\n    }\n}\n"],"names":["_defaults","async","breaks","extensions","gfm","hooks","pedantic","renderer","silent","tokenizer","walkTokens","changeDefaults","newDefaults","noopTest","exec","edit","regex","opt","source","obj","replace","name","val","valSource","other","caret","getRegex","RegExp","codeRemoveIndent","outputLinkReplace","indentCodeCompensation","beginningSpace","endingHash","startingSpaceChar","endingSpaceChar","nonSpaceChar","newLineCharGlobal","tabCharGlobal","multipleSpaceGlobal","blankLine","doubleBlankLine","blockquoteStart","blockquoteSetextReplace","blockquoteSetextReplace2","listReplaceTabs","listReplaceNesting","listIsTask","listReplaceTask","anyLine","hrefBrackets","tableDelimiter","tableAlignChars","tableRowBlankLine","tableAlignRight","tableAlignCenter","tableAlignLeft","startATag","endATag","startPreScriptTag","endPreScriptTag","startAngleBracket","endAngleBracket","pedanticHrefTitle","unicodeAlphaNumeric","escapeTest","escapeReplace","escapeTestNoEncode","escapeReplaceNoEncode","unescapeTest","percentDecode","findPipe","splitPipe","slashPipe","carriageReturn","spaceLine","notSpaceStart","endingNewline","listItemRegex","bull","nextBulletRegex","indent","Math","min","hrRegex","fencesBeginRegex","headingBeginRegex","htmlBeginRegex","hr","bullet","lheadingCore","lheading","lheadingGfm","_paragraph","_blockLabel","def","list","_tag","_comment","html","paragraph","blockNormal","blockquote","code","fences","heading","newline","table","text","gfmTable","blockGfm","blockPedantic","br","_punctuation","_punctuationOrSpace","_notPunctuationOrSpace","punctuation","_punctuationGfmStrongEm","emStrongLDelimCore","emStrongLDelim","emStrongLDelimGfm","emStrongRDelimAstCore","emStrongRDelimAst","emStrongRDelimAstGfm","emStrongRDelimUnd","anyPunctuation","autolink","_inlineComment","tag","_inlineLabel","reflink","nolink","inlineNormal","_backpedal","blockSkip","del","escape","link","reflinkSearch","url","inlinePedantic","inlineGfm","inlineBreaks","block","normal","inline","escapeReplacements","getEscapeReplacement","ch","encode","test","cleanUrl","href","encodeURI","splitCells","tableRow","count","cells","match","offset","str","escaped","curr","split","i","trim","shift","length","at","pop","splice","push","rtrim","c","invert","l","suffLen","charAt","slice","outputLink","cap","raw","lexer","rules","title","state","inLink","token","type","tokens","inlineTokens","_Tokenizer","options","constructor","this","space","src","codeBlockStyle","matchIndentToCode","indentToCode","map","node","matchIndentInNode","indentInNode","join","lang","trimmed","depth","lines","inBlockquote","currentLines","currentRaw","currentText","top","blockTokens","lastToken","oldToken","newText","newToken","substring","isordered","ordered","start","loose","items","itemRegex","endsWithBlankLine","endEarly","itemContents","line","t","repeat","nextLine","trimStart","search","rawLine","nextLineWithoutTabs","ischecked","istask","task","checked","lastItem","trimEnd","spacers","filter","hasMultipleLineBreaks","some","pre","toLowerCase","headers","aligns","rows","item","header","align","row","cell","inRawBlock","trimmedUrl","rtrimSlash","lastParenIndex","b","indexOf","level","findClosingBracket","linkLen","links","emStrong","maskedSrc","prevChar","lLength","rDelim","rLength","delimTotal","midDelimTotal","endReg","lastIndex","lastCharLength","index","codespan","hasNonSpaceChars","hasSpaceCharsOnBothEnds","prevCapZero","inlineText","_Lexer","inlineQueue","Object","create","lex","lexInline","next","lastParagraphClipped","extTokenizer","call","undefined","cutSrc","startBlock","startIndex","Infinity","tempSrc","tempStart","forEach","getStartIndex","errMsg","charCodeAt","console","error","Error","keys","includes","lastIndexOf","keepPrevChar","startInline","_Renderer","parser","langString","parse","parseInline","body","j","listitem","itemBody","checkbox","unshift","tablecell","tablerow","k","content","strong","em","cleanHref","out","image","_TextRenderer","_Parser","textRenderer","anyToken","renderers","genericToken","ret","textToken","_Hooks","static","Set","preprocess","markdown","postprocess","processAllTokens","provideLexer","provideParser","markedInstance","defaults","setOptions","parseMarkdown","Parser","Renderer","TextRenderer","Lexer","Tokenizer","Hooks","args","use","callback","values","concat","tableToken","listToken","childTokens","flat","pack","opts","ext","prevRenderer","apply","extLevel","prop","rendererProp","rendererFunc","tokenizerProp","tokenizerFunc","prevTokenizer","hooksProp","hooksFunc","prevHook","passThroughHooks","has","arg","Promise","resolve","then","packWalktokens","blockType","origOpt","throwError","onError","prototype","toString","all","catch","e","message","msg","reject","marked","_regeneratorRuntime","r","n","hasOwnProperty","o","defineProperty","value","Symbol","a","iterator","asyncIterator","u","toStringTag","define","enumerable","configurable","writable","wrap","Generator","Context","makeInvokeMethod","tryCatch","h","f","s","y","GeneratorFunction","GeneratorFunctionPrototype","p","d","getPrototypeOf","v","g","defineIteratorMethods","_invoke","AsyncIterator","invoke","_typeof","__await","callInvokeWithMethodAndArg","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","return","TypeError","resultName","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","resetTryEntry","completion","reset","isNaN","displayName","isGeneratorFunction","mark","setPrototypeOf","__proto__","awrap","reverse","prev","stop","rval","handle","complete","finish","delegateYield","asyncGeneratorStep","_asyncToGenerator","arguments","_next","_throw","getDefaults","safetySettings","category","threshold","DEFAULT_TEMPLATES","summarize","translate","translateSummarize","reply","tldrPrompt","toggleSettingsDropdown","dropdown","document","getElementById","isVisible","style","display","applyCurrentTheme","savedTheme","localStorage","getItem","setAttribute","classList","remove","add","Office","context","officeTheme","bodyBackgroundColor","color","parseInt","substr","isDarkTheme","onSettingsChanged","eventArgs","showNotification","existingNotification","notification","createElement","id","className","textContent","appendChild","offsetHeight","animation","setTimeout","saveDropdownSettings","settings","savedSettings","JSON","apiKey","model","language","eventTitleLanguage","theme","fontSize","tldrMode","showReply","replyModel","autorun","autorunOption","devMode","devServer","summarizeTemplate","translateTemplate","translateSummarizeTemplate","defaultLanguage","templates","setItem","stringify","removeItem","applyFontSize","updateReplyButtonVisibility","updateDevBadges","resetTemplates","currentSettingsText","currentSettings","size","documentElement","getEmailContent","_getEmailContent","_callee","_context","mailbox","getAsync","result","status","AsyncResultStatus","Succeeded","generateContent","_x","_x2","_generateContent","_callee2","prompt","modelOverride","isTldr","apiUrl","response","data","_data$error","generatedText","_args2","_context2","fetch","contents","parts","generationConfig","temperature","topK","topP","maxOutputTokens","json","ok","candidates","t0","generateTldrContent","_x3","_x4","_generateTldrContent","_callee3","subject","emailContent","_args3","_context3","getLanguageText","languageCode","getApiKey","getLanguage","summarizeEmail","_summarizeEmail","_callee4","template","_savedSettings4","_settings4","tldrContent","_context4","showLoading","hideLoading","showResults","updateResults","updateExpandButton","translateEmail","_translateEmail","_callee5","_savedSettings5","_settings5","_context5","isFullContentVisible","expandButton","disabled","toggle","innerHTML","copyResult","resultContent","innerText","fullContent","headingMatch","navigator","clipboard","writeText","copyStatus","err","translateAndSummarizeEmail","_translateAndSummarizeEmail","_callee6","_savedSettings6","_settings6","_context6","loadingSection","copyReplyButton","copyResultButton","generateReplyButton","scrollTop","loadingContainer","show","replyButton","expandContent","fullContentContainer","formatReplyOutput","replyText","subjectMatch","generateReply","_generateReply","_callee7","formattedReply","_context7","_initializeApp","_callee8","settingsSection","resultSection","tldrSection","_context8","loadSettings","root","window","matchMedia","matches","setProperty","getFontSizeValue","key","element","tagName","resetAllSettings","devBadge","footerDevBadge","getEventTitleLanguage","parseEventDetailsWithGemini","_x5","_parseEventDetailsWithGemini","_callee9","titleLanguage","langInstructions","jsonText","jsonMatch","_eventDetails$start","_eventDetails$end","eventDetails","dateRegex","_context9","log","dateTime","end","t1","createCalendarEvent","_x6","_createCalendarEvent","_callee10","_eventDetails$start2","_eventDetails$end2","_eventDetails$locatio","_eventDetails$body","_eventDetails$locatio2","_eventDetails$body2","startDate","endDate","requiredAttendees","optionalAttendees","appointmentData","_context10","Date","attendees","attendee","emailAddress","address","location","displayNewAppointmentForm","checkIfCalendarEvent","_x7","_checkIfCalendarEvent","_callee11","_context11","handleCalendarEvent","_handleCalendarEvent","_callee12","_eventDetails$start3","_eventDetails$end3","_eventDetails$locatio3","errorMessage","cleanedMessage","_context12","addEventListener","updateCalendarButtonState","_updateCalendarButtonState","_callee13","isCalendarEvent","calendarBtn","_context13","exportTemplatesAsMarkdown","now","dateStr","toISOString","userInfo","userProfile","user","markdownContent","toLocaleString","blob","Blob","URL","createObjectURL","download","click","removeChild","revokeObjectURL","onReady","info","host","HostType","Outlook","initializeApp","autorunEnabled","selectedOption","event","querySelectorAll","select","devServerGroup","loadDropdownSettings","addHandlerAsync","EventType","SettingsChanged","ItemChanged","register"],"sourceRoot":""}